swagger: '2.0'
info:
  title: LORIS API
  description: >-
    This document specifies the LORIS REST API.
    <p>Any request sent to <code>$LorisRoot/api/$APIVERSION/$API_CALL</code> will return either a JSON object or no data. The Loris API uses standard HTTP error codes and the body of any response will either be empty or contain only a JSON object for any request.</p>

    <p>For brevity, the <code>$LorisRoot/api/$APIVERSION</code> is omitted from the definitions in this document. This document specifies $APIVERSION v0.0.2 and it MUST be included before the request in all requests.</p>
    
    <p>HTTP GET requests NEVER modify data. PUT, POST or PATCH requests MUST be used to modify data as per their definitions in the HTTP/1.1 specification. Any methods not supported will respond with a 405 Method Not Allowed response and an appropriate Allow header set (as per HTTP documentation.)</p>
    
    <p>PUT requests either create or overwrite all data for a given resource (instrument/ candidate/visit/etc.) Any fields not explicitly specified in the PUT request are nulled.</p>
    
    <p>PATCH requests are identical to PUT requests, but any fields not explicitly mentioned are unmodified from their current value.</p>
    
    <p>All GET requests include an ETag header. If a PUT or PATCH request is sent and it does not include an ETag, or the ETag does not match the currently existing ETag for that resource, it will result in a 403 Forbidden response. PUT or POST requests used for the creation of resources do not require ETags.</p>
    
    <p>DELETE is not supported on any resource defined in this API.</p>
  version: "1.0.0"
  host: localhost
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
  schemes:
    - http
    - https
  basePath: /api/v0.0.2
produces:
  - application/json
paths:
  /Login:
    post:
      description: >-
        Users can be be authenticated using JSON Web Tokens by sending a POST
        request with their username and password
      tags:
        - Login
      operationId: Authentication
      parameters:
        - name: data
          required: true
          description: Request payload
          in: body
          schema:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
                format: password
      responses:
        '200':
          description: An object with an authenticity token
          schema:
            type: object
            properties:
              token:
                type: string
                description: JWT token
        '401':
          description: Unauthorized

  /Projects:
    get:
      description: Return a list of the project names in this Loris instance
      tags:
        - Project
      security:
        - Bearer: []
      responses:
        '200':
          description: >-
            An object with N properties where N is the projects count. Each property name will be a project name and it will be an object of type Project<br><br>
            If the Loris instance does not use projects, the API will return a single project called "loris" with the appropriate settings for the Loris instance.<br><br>

            useEDC represents a boolean determining whether the EDC date should be included in candidates returned by the API.<br><br>

            PSCID represents a JSON object with the configuration settings for PSCIDs in this project.
          schema:
            type: object
          examples: 
            Projects:
              ProjectName1:
                properties:
                  useEDC: false
                  PSCID: 
                    Type: prompt
                    Regex: '/^SITE{1,1}[0-9]{3,3}$/i'
              ProjectName2:
                properties:
                  useEDC: false
                  PSCID: 
                    Type: prompt
                    Regex: '/^SITE{1,1}[0-9]{3,3}$/i'

  /projects/{name}:
    get:
      description: Return the project definition
      tags:
        - Project
      security:
        - Bearer: []
      parameters:
        - name: name
          in: path
          description: The name of the project
          required: true
          type: string
      responses:
        '200':
          description: An object whit the project informations
          schema:
            type: object
          examples: 
            Meta:
              Project: "ProjectName"
            Visits: 
              - V1
              - V2
              - ...
            Instruments: 
              - InstrumentName
              - InstrumentName2
              - ...
            Candidates:
              - "123543"
              - "523234"
              - ...
        '404':
          description: Not Found

  /projects/{name}/instruments:
    get:
      description: >-
        Returns all the instruments used/installed in this project's test batteries
      tags:
        - Project
      security:
        - Bearer: []
      parameters:
        - name: name
          in: path
          description: The name of the project
          required: true
          type: string
      responses:
        '200':
          description: >-
            An object with that project's instruments informations where the InstrumentNames are the "Short Name" of all the instruments used/installed in this project.
          schema:
            type: object
          examples:
            Meta:
              Project: ProjectName
            Instruments:
             InstrumentName:
               FullName: Long Name
               Subgroup: Subgroup Name
               DoubleDataEntryEnabled: boolean
             Instrument2:
               FullName: Long Name
               Subgroup: Subgroup Name
               DoubleDataEntryEnabled: boolean
             ...: 
  /projects/{name}/instruments/{instrument}:
    get:
      description: >-
        Returns a JSON representation of the instrument form
      tags:
        - Project
      security:
        - Bearer: []
      parameters:
        - name: name
          in: path
          description: The name of the project
          required: true
          type: string 
        - name: instrument
          in: path
          description: The instrument short name
          required: true
          type: string
      responses:
        '200':
          description: >-
            The format for the JSON returned is specified in the accompanying InstrumentFormat.md and RulesFormat.md documents. The JSON document can be used to render the form by a client
          schema:
            type: object
        '404':
          description: Not Found

  /projects/{name}/visits:
    get:
      description: >-      
        Returns a list of visit labels that may exists in that project. 
      tags:
        - Project
      security:
        - Bearer: []
      parameters:
        - name: name
          in: path
          description: The name of the project
          required: true
          type: string            
      responses:
        '200':
          description: >-
            An object with that project's visits informations
          schema:
            type: object
          examples:
            Meta:
              Project: ProjectName
            Visits:
              - V1
              - V2
              - ...

  /projects/{name}/candidates:
    get:
      description: >-      
        Returns a list of candidate id that may exists in that project. 
      tags:
        - Project
      security:
        - Bearer: []
      parameters:
        - name: name
          in: path
          description: The name of the project
          required: true
          type: string            
      responses:
        '200':
          description: >-
            An object with that project's candidate ids
          schema:
            type: object
          examples:
            Meta:
              Project: ProjectName
            Candidates:
              - '123456'
              - '342332'
              - ...

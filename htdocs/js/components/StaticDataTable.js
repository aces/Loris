!function(e){function n(t){if(a[t])return a[t].exports;var r=a[t]={exports:{},id:t,loaded:!1};return e[t].call(r.exports,r,r.exports,n),r.loaded=!0,r.exports}var a={};return n.m=e,n.c=a,n.p="",n(0)}([function(e,n,a){a(1)(a(7))},function(e,n){e.exports=function(e){"undefined"!=typeof execScript?execScript(e):eval.call(null,e)}},,,,,,function(e,n){e.exports='/* exported RStaticDataTable */\n\n/**\n * This file contains React component for Static Data Table\n *\n * @author Loris Team\n * @version 1.0.0\n *\n */\n\n/**\n * Static Data Table component\n * Displays a set of data that is receives via props.\n */\nvar StaticDataTable = React.createClass({\n  displayName: "StaticDataTable",\n\n  mixins: [React.addons.PureRenderMixin],\n  propTypes: {\n    Headers: React.PropTypes.array.isRequired,\n    Data: React.PropTypes.array.isRequired,\n    RowNumLabel: React.PropTypes.string,\n    // Function of which returns a JSX element for a table cell, takes\n    // parameters of the form: func(ColumnName, CellData, EntireRowData)\n    getFormattedCell: React.PropTypes.func\n  },\n  componentDidMount: function componentDidMount() {\n    if (jQuery.fn.DynamicTable) {\n      if (this.props.freezeColumn) {\n        $("#dynamictable").DynamicTable({\n          freezeColumn: this.props.freezeColumn\n        });\n      } else {\n        $("#dynamictable").DynamicTable();\n      }\n    }\n\n    // Retrieve module preferences\n    var modulePrefs = JSON.parse(localStorage.getItem(\'modulePrefs\'));\n\n    // Init modulePrefs object\n    if (modulePrefs === null) {\n      modulePrefs = {};\n    }\n\n    // Init modulePrefs for current module\n    if (modulePrefs[loris.TestName] === undefined) {\n      modulePrefs[loris.TestName] = {};\n      modulePrefs[loris.TestName].rowsPerPage = this.state.RowsPerPage;\n    }\n\n    // Set rows per page\n    var rowsPerPage = modulePrefs[loris.TestName].rowsPerPage;\n    this.setState({\n      RowsPerPage: rowsPerPage\n    });\n\n    // Make prefs accesible within component\n    this.modulePrefs = modulePrefs;\n  },\n  componentDidUpdate: function componentDidUpdate() {\n    if (jQuery.fn.DynamicTable) {\n      if (this.props.freezeColumn) {\n        $("#dynamictable").DynamicTable({\n          freezeColumn: this.props.freezeColumn\n        });\n      } else {\n        $("#dynamictable").DynamicTable();\n      }\n    }\n  },\n  getInitialState: function getInitialState() {\n    return {\n      PageNumber: 1,\n      SortColumn: -1,\n      SortOrder: \'ASC\',\n      RowsPerPage: 20\n    };\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      Headers: [],\n      Data: {},\n      RowNumLabel: \'No.\',\n      Filter: {}\n    };\n  },\n  changePage: function changePage(pageNo) {\n    this.setState({\n      PageNumber: pageNo\n    });\n  },\n  setSortColumn: function setSortColumn(colNumber) {\n    var that = this;\n    return function (e) {\n      if (that.state.SortColumn === colNumber) {\n        that.setState({\n          SortOrder: that.state.SortOrder === \'ASC\' ? \'DESC\' : \'ASC\'\n        });\n      } else {\n        that.setState({\n          SortColumn: colNumber\n        });\n      }\n    };\n  },\n  changeRowsPerPage: function changeRowsPerPage(val) {\n    var rowsPerPage = val.target.value;\n    var modulePrefs = this.modulePrefs;\n\n    // Save current selection\n    modulePrefs[loris.TestName].rowsPerPage = rowsPerPage;\n\n    // Update localstorage\n    localStorage.setItem(\'modulePrefs\', JSON.stringify(modulePrefs));\n\n    this.setState({\n      RowsPerPage: rowsPerPage,\n      PageNumber: 1\n    });\n  },\n  downloadCSV: function downloadCSV(csvData) {\n    var csvworker = new Worker(loris.BaseURL + \'/js/workers/savecsv.js\');\n\n    csvworker.addEventListener(\'message\', function (e) {\n      var dataURL;\n      var dataDate;\n      var link;\n      if (e.data.cmd === \'SaveCSV\') {\n        dataDate = new Date().toISOString();\n        dataURL = window.URL.createObjectURL(e.data.message);\n        link = document.createElement("a");\n        link.download = "data-" + dataDate + ".csv";\n        link.type = "text/csv";\n        link.href = dataURL;\n        document.body.appendChild(link);\n        $(link)[0].click();\n        document.body.removeChild(link);\n      }\n    });\n    csvworker.postMessage({\n      cmd: \'SaveFile\',\n      data: csvData,\n      headers: this.props.Headers,\n      identifiers: this.props.RowNameMap\n    });\n  },\n  countFilteredRows: function countFilteredRows() {\n    var filterMatchCount = 0;\n    var filterValuesCount = this.props.Filter ? Object.keys(this.props.Filter).length : 0;\n    var tableData = this.props.Data;\n    var headersData = this.props.Headers;\n\n    for (var i = 0; i < tableData.length; i++) {\n      var headerCount = 0;\n\n      for (var j = 0; j < headersData.length; j++) {\n        var data = tableData[i] ? tableData[i][j] : null;\n        if (this.hasFilterKeyword(headersData[j], data)) {\n          headerCount++;\n        }\n      }\n\n      if (headerCount === filterValuesCount) {\n        filterMatchCount++;\n      }\n    }\n\n    var hasFilters = filterValuesCount !== 0;\n    if (filterMatchCount === 0 && hasFilters) {\n      return 0;\n    }\n\n    return filterMatchCount === 0 ? tableData.length : filterMatchCount;\n  },\n  toCamelCase: function toCamelCase(str) {\n    return str.replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, function (match, index) {\n      if (Number(match) === 0) return "";\n      return index === 0 ? match.toLowerCase() : match.toUpperCase();\n    });\n  },\n  /**\n   * Searches for the filter keyword in the column cell\n   *\n   * Note: Search is case-insensitive.\n   *\n   * @param {string} headerData column name\n   * @param {string} data search string\n   * @return {boolean} true, if filter value is found to be a substring\n   * of one of the column values, false otherwise.\n   */\n  hasFilterKeyword: function hasFilterKeyword(headerData, data) {\n    var header = this.toCamelCase(headerData);\n    var filterData = this.props.Filter[header] ? this.props.Filter[header] : null;\n\n    // Handle nullinputs\n    if (filterData === null || data === null) {\n      return false;\n    }\n\n    // Handle numeric inputs\n    if (typeof filterData === \'number\') {\n      var intData = Number.parseInt(data, 10);\n      return filterData === intData;\n    }\n\n    // Handle string inputs\n    if (typeof filterData === \'string\') {\n      var searchKey = filterData.toLowerCase();\n      var searchString = data.toLowerCase();\n      return searchString.indexOf(searchKey) > -1;\n    }\n\n    return false;\n  },\n  render: function render() {\n    if (this.props.Data === null || this.props.Data.length === 0) {\n      return React.createElement(\n        "div",\n        { className: "alert alert-info no-result-found-panel" },\n        React.createElement(\n          "strong",\n          null,\n          "No result found."\n        )\n      );\n    }\n    var rowsPerPage = this.state.RowsPerPage;\n    var headers = [React.createElement(\n      "th",\n      { key: "th_col_0", onClick: this.setSortColumn(-1) },\n      this.props.RowNumLabel\n    )];\n    for (var _i = 0; _i < this.props.Headers.length; _i += 1) {\n      if (typeof loris.hiddenHeaders === "undefined" || loris.hiddenHeaders.indexOf(this.props.Headers[_i]) === -1) {\n        var colIndex = _i + 1;\n        if (this.props.Headers[_i] === this.props.freezeColumn) {\n          headers.push(React.createElement(\n            "th",\n            { key: "th_col_" + colIndex, id: this.props.freezeColumn,\n              onClick: this.setSortColumn(_i) },\n            this.props.Headers[_i]\n          ));\n        } else {\n          headers.push(React.createElement(\n            "th",\n            { key: "th_col_" + colIndex, onClick: this.setSortColumn(_i) },\n            this.props.Headers[_i]\n          ));\n        }\n      }\n    }\n    var rows = [];\n    var curRow = [];\n    var index = [];\n    var that = this;\n\n    for (var i = 0; i < this.props.Data.length; i += 1) {\n      var val = this.props.Data[i][this.state.SortColumn];\n\n      if (parseInt(val, 10) === val) {\n        val = parseInt(val, 10);\n      } else if (parseFloat(val) === val) {\n        val = parseFloat(val);\n      } else if (val === \'.\') {\n        val = null;\n      }\n\n      // if string - convert to lowercase to make sort algorithm work\n      var isString = typeof val === \'string\' || val instanceof String;\n      if (val !== undefined && isString) {\n        val = val.toLowerCase();\n      }\n\n      if (this.props.RowNameMap) {\n        index.push({ RowIdx: i, Value: val, Content: this.props.RowNameMap[i] });\n      } else {\n        index.push({ RowIdx: i, Value: val, Content: i + 1 });\n      }\n    }\n\n    index.sort(function (a, b) {\n      if (that.state.SortOrder === \'ASC\') {\n        // Check if null values\n        if (a.Value === null) return -1;\n        if (b.Value === null) return 1;\n\n        // Sort by value\n        if (a.Value < b.Value) return -1;\n        if (a.Value > b.Value) return 1;\n\n        // If all values are equal, sort by rownum\n        if (a.RowIdx < b.RowIdx) {\n          return -1;\n        }\n        if (a.RowIdx > b.RowIdx) return 1;\n      } else {\n        // Check if null values\n        if (a.Value === null) return 1;\n        if (b.Value === null) return -1;\n\n        // Sort by value\n        if (a.Value < b.Value) return 1;\n        if (a.Value > b.Value) return -1;\n\n        // If all values are equal, sort by rownum\n        if (a.RowIdx < b.RowIdx) return 1;\n        if (a.RowIdx > b.RowIdx) return -1;\n      }\n      // They\'re equal..\n      return 0;\n    });\n\n    var matchesFound = 0; // Keeps track of how many rows where displayed so far across all pages\n    var filteredRows = this.countFilteredRows();\n    var currentPageRow = rowsPerPage * (this.state.PageNumber - 1);\n    var filteredData = [];\n\n    // Push rows to data table\n    for (var _i2 = 0; _i2 < this.props.Data.length && rows.length < rowsPerPage; _i2++) {\n      curRow = [];\n\n      // Counts filter matches\n      var filterMatchCount = 0;\n\n      // Itterates through headers to populate row columns\n      // with corresponding data\n      for (var j = 0; j < this.props.Headers.length; j += 1) {\n        var data = "Unknown";\n\n        // Set column data\n        if (this.props.Data[index[_i2].RowIdx]) {\n          data = this.props.Data[index[_i2].RowIdx][j];\n        }\n\n        if (this.hasFilterKeyword(this.props.Headers[j], data)) {\n          filterMatchCount++;\n          filteredData.push(this.props.Data[index[_i2].RowIdx]);\n        }\n\n        var key = \'td_col_\' + j;\n\n        // Get custom cell formatting if available\n        if (this.props.getFormattedCell) {\n          data = this.props.getFormattedCell(this.props.Headers[j], data, this.props.Data[index[_i2].RowIdx], this.props.Headers);\n          if (data !== null) {\n            // Note: Can\'t currently pass a key, need to update columnFormatter\n            // to not return a <td> node\n            curRow.push(data);\n          }\n        } else {\n          curRow.push(React.createElement(\n            "td",\n            { key: key },\n            data\n          ));\n        }\n      }\n\n      // Only display a row if all filter values have been matched\n      if (Object.keys(this.props.Filter).length === filterMatchCount) {\n        matchesFound++;\n        if (matchesFound > currentPageRow) {\n          var rowIndex = index[_i2].Content;\n          rows.push(React.createElement(\n            "tr",\n            { key: \'tr_\' + rowIndex, colSpan: headers.length },\n            React.createElement(\n              "td",\n              null,\n              rowIndex\n            ),\n            curRow\n          ));\n        }\n      }\n    }\n\n    var RowsPerPageDropdown = React.createElement(\n      "select",\n      {\n        className: "input-sm perPage",\n        onChange: this.changeRowsPerPage,\n        value: this.state.RowsPerPage\n      },\n      React.createElement(\n        "option",\n        null,\n        "20"\n      ),\n      React.createElement(\n        "option",\n        null,\n        "50"\n      ),\n      React.createElement(\n        "option",\n        null,\n        "100"\n      ),\n      React.createElement(\n        "option",\n        null,\n        "1000"\n      ),\n      React.createElement(\n        "option",\n        null,\n        "5000"\n      ),\n      React.createElement(\n        "option",\n        null,\n        "10000"\n      )\n    );\n\n    // Include only filtered data if filters were applied\n    var csvData = this.props.Data;\n    if (this.props.Filter && filteredData.length > 0) {\n      csvData = filteredData;\n    }\n\n    return React.createElement(\n      "div",\n      { className: "panel panel-default" },\n      React.createElement(\n        "div",\n        { className: "table-header panel-heading" },\n        React.createElement(\n          "div",\n          { className: "row" },\n          React.createElement(\n            "div",\n            { className: "col-xs-12" },\n            rows.length,\n            " rows displayed of ",\n            filteredRows,\n            ". (Maximum rows per page: ",\n            RowsPerPageDropdown,\n            ")",\n            React.createElement(\n              "div",\n              { className: "pull-right" },\n              React.createElement(PaginationLinks, {\n                Total: filteredRows,\n                onChangePage: this.changePage,\n                RowsPerPage: rowsPerPage,\n                Active: this.state.PageNumber\n              })\n            )\n          )\n        )\n      ),\n      React.createElement(\n        "table",\n        { className: "table table-hover table-primary table-bordered",\n          id: "dynamictable"\n        },\n        React.createElement(\n          "thead",\n          null,\n          React.createElement(\n            "tr",\n            { className: "info" },\n            headers\n          )\n        ),\n        React.createElement(\n          "tbody",\n          null,\n          rows\n        )\n      ),\n      React.createElement(\n        "div",\n        { className: "panel-footer table-footer" },\n        React.createElement(\n          "div",\n          { className: "row" },\n          React.createElement(\n            "div",\n            { className: "col-xs-12" },\n            React.createElement(\n              "div",\n              { className: "col-xs-12 footerText" },\n              rows.length,\n              " rows displayed of ",\n              filteredRows,\n              ". (Maximum rows per page: ",\n              RowsPerPageDropdown,\n              ")"\n            ),\n            React.createElement(\n              "div",\n              { className: "col-xs-6" },\n              React.createElement(\n                "button",\n                {\n                  className: "btn btn-primary downloadCSV",\n                  onClick: this.downloadCSV.bind(null, csvData)\n                },\n                "Download Table as CSV"\n              )\n            ),\n            React.createElement(\n              "div",\n              { className: "pull-right" },\n              React.createElement(PaginationLinks, {\n                Total: filteredRows,\n                onChangePage: this.changePage,\n                RowsPerPage: rowsPerPage,\n                Active: this.state.PageNumber\n              })\n            )\n          )\n        )\n      )\n    );\n  }\n});\n\nvar RStaticDataTable = React.createFactory(StaticDataTable);'}]);
!function(e){function n(a){if(t[a])return t[a].exports;var r=t[a]={exports:{},id:a,loaded:!1};return e[a].call(r.exports,r,r.exports,n),r.loaded=!0,r.exports}var t={};return n.m=e,n.c=t,n.p="",n(0)}([function(e,n,t){t(1)(t(2))},function(e,n){e.exports=function(e){"undefined"!=typeof execScript?execScript(e):eval.call(null,e)}},function(e,n){e.exports="/* exported RDynamicDataTable */\n\nvar DynamicDataTable = React.createClass({\n  displayName: 'DynamicDataTable',\n\n  propTypes: {\n    DataURL: React.PropTypes.string.isRequired\n  },\n\n  getInitialState: function getInitialState() {\n    return {\n      Headers: [],\n      Data: [],\n      isLoaded: false,\n      loadedData: 0\n    };\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      DataURL: ''\n    };\n  },\n  componentDidMount: function componentDidMount() {\n    this.fetchData();\n    // Listen for update event to update data table on outside changes\n    window.addEventListener('update-datatable', this.fetchData);\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    // Unsubscribe from the event before component is destroyed\n    window.removeEventListener('update-datatable', this.fetchData);\n  },\n  fetchData: function fetchData() {\n    var that = this;\n    $.ajax(this.props.DataURL, {\n      dataType: 'json',\n      cache: false,\n      xhr: function xhr() {\n        var xhr = new window.XMLHttpRequest();\n        xhr.addEventListener(\"progress\", function (evt) {\n          that.setState({\n            loadedData: evt.loaded\n          });\n        });\n        return xhr;\n      },\n      success: function success(data) {\n        that.setState({\n          Headers: data.Headers,\n          Data: data.Data,\n          isLoaded: true\n        });\n      },\n      error: function error(data, errorCode, errorMsg) {\n        console.error(errorCode + ': ' + errorMsg);\n        that.setState({ error: \"Error loading data\" });\n      }\n    });\n  },\n  render: function render() {\n    if (!this.state.isLoaded) {\n      if (this.state.error !== undefined) {\n        return React.createElement(\n          'div',\n          { className: 'alert alert-danger' },\n          React.createElement(\n            'strong',\n            null,\n            this.state.error\n          )\n        );\n      }\n\n      return React.createElement(\n        'button',\n        { className: 'btn-info has-spinner' },\n        'Loading',\n        React.createElement('span', { className: 'glyphicon glyphicon-refresh glyphicon-refresh-animate' })\n      );\n    }\n\n    return React.createElement(StaticDataTable, { Headers: this.state.Headers,\n      Data: this.state.Data,\n      Filter: this.props.Filter,\n      getFormattedCell: this.props.getFormattedCell,\n      freezeColumn: this.props.freezeColumn\n    });\n  }\n});\n\nvar RDynamicDataTable = React.createFactory(DynamicDataTable);"}]);
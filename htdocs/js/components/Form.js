!function(e){function n(r){if(t[r])return t[r].exports;var a=t[r]={exports:{},id:r,loaded:!1};return e[r].call(a.exports,a,a.exports,n),a.loaded=!0,a.exports}var t={};return n.m=e,n.c=t,n.p="",n(0)}([function(e,n,t){t(1)(t(4))},function(e,n){e.exports=function(e){"undefined"!=typeof execScript?execScript(e):eval.call(null,e)}},,,function(e,n){e.exports="/* exported FormElement, SelectElement, TextareaElement, TextboxElement, DateElement,\nNumericElement, FileElement, HelpTextElement, StaticElement, ButtonElement, LorisElement\n*/\n\n/**\n * This file contains React components for Loris form elements.\n *\n * @author Loris Team\n * @version 1.0.0\n *\n */\n\n/**\n * Form Component.\n * React wrapper for <form> element that accepts children react components\n *\n * The form elements can be passed in two ways:\n * 1. A `this.props.formElements` JSON object\n * 2. Form components nested directly inside <FormElement></FormElement>\n *\n * Note that if both are passed `this.props.formElements` is displayed first.\n *\n */\nvar FormElement = React.createClass({\n  displayName: 'FormElement',\n\n\n  propTypes: {\n    name: React.PropTypes.string.isRequired,\n    id: React.PropTypes.string,\n    method: React.PropTypes.oneOf(['POST', 'GET']),\n    class: React.PropTypes.string,\n    columns: React.PropTypes.number,\n    formElements: React.PropTypes.array,\n    onSubmit: React.PropTypes.func,\n    onUserInput: React.PropTypes.func\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      name: null,\n      id: null,\n      method: 'POST',\n      class: 'form-horizontal',\n      columns: 1,\n      fileUpload: false,\n      formElements: [],\n      onSubmit: function onSubmit() {\n        console.warn('onSubmit() callback is not set!');\n      },\n      onUserInput: function onUserInput() {\n        console.warn(\"onUserInput() callback is not set!\");\n      }\n    };\n  },\n  getFormElements: function getFormElements() {\n    var formElementsHTML = [];\n    var columns = this.props.columns;\n    var maxColumnSize = 12;\n    var colSize = Math.floor(maxColumnSize / columns);\n    var colClass = \"col-xs-12 col-sm-\" + colSize + \" col-md-\" + colSize;\n\n    // Render elements from JSON\n    var filter = this.props.formElements;\n    var userInput = this.props.onUserInput;\n\n    filter.forEach(function (element, key) {\n      formElementsHTML.push(React.createElement(\n        'div',\n        { key: 'el_' + key, className: colClass },\n        React.createElement(LorisElement, {\n          element: element,\n          onUserInput: userInput\n        })\n      ));\n    });\n\n    // Render elements from React\n    React.Children.forEach(this.props.children, function (child, key) {\n      // If child is plain HTML, insert it as full size.\n      // Useful for inserting <hr> to split form sections\n      var elementClass = \"col-xs-12 col-sm-12 col-md-12\";\n\n      // If child is form element use appropriate size\n      if (React.isValidElement(child)) {\n        elementClass = colClass;\n      }\n      formElementsHTML.push(React.createElement(\n        'div',\n        { key: 'el_' + key, className: elementClass },\n        child\n      ));\n    });\n\n    return formElementsHTML;\n  },\n  handleSubmit: function handleSubmit(e) {\n    // Override default submit if property is set\n    if (this.props.onSubmit) {\n      e.preventDefault();\n      this.props.onSubmit(e);\n    }\n  },\n  render: function render() {\n    var encType = this.props.fileUpload ? 'multipart/form-data' : null;\n\n    // Generate form elements\n    var formElements = this.getFormElements();\n\n    // Flexbox is set to ensure that columns of different heights\n    // are displayed proportionally on the screen\n    var rowStyles = {\n      display: \"flex\",\n      flexWrap: \"wrap\"\n    };\n\n    return React.createElement(\n      'form',\n      {\n        name: this.props.name,\n        id: this.props.id,\n        className: this.props.class,\n        method: this.props.method,\n        encType: encType,\n        onSubmit: this.handleSubmit\n      },\n      React.createElement(\n        'div',\n        { className: 'row', style: rowStyles },\n        formElements\n      )\n    );\n  }\n});\n\n/**\n * Select Component\n * React wrapper for a simple or 'multiple' <select> element.\n */\nvar SelectElement = React.createClass({\n  displayName: 'SelectElement',\n\n\n  propTypes: {\n    name: React.PropTypes.string.isRequired,\n    options: React.PropTypes.object.isRequired,\n    label: React.PropTypes.string,\n    value: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.array]),\n    id: React.PropTypes.string,\n    class: React.PropTypes.string,\n    multiple: React.PropTypes.bool,\n    disabled: React.PropTypes.bool,\n    required: React.PropTypes.bool,\n    emptyOption: React.PropTypes.bool,\n    hasError: React.PropTypes.bool,\n    errorMessage: React.PropTypes.string,\n    onUserInput: React.PropTypes.func\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      name: '',\n      options: {},\n      label: '',\n      value: undefined,\n      id: '',\n      class: '',\n      multiple: false,\n      disabled: false,\n      required: false,\n      emptyOption: true,\n      hasError: false,\n      errorMessage: 'The field is required!',\n      onUserInput: function onUserInput() {\n        console.warn('onUserInput() callback is not set');\n      }\n    };\n  },\n\n  handleChange: function handleChange(e) {\n    var value = e.target.value;\n    var options = e.target.options;\n\n    // Multiple values\n    if (this.props.multiple && options.length > 1) {\n      value = [];\n      for (var i = 0, l = options.length; i < l; i++) {\n        if (options[i].selected) {\n          value.push(options[i].value);\n        }\n      }\n    }\n\n    this.props.onUserInput(this.props.name, value);\n  },\n  render: function render() {\n    var multiple = this.props.multiple ? 'multiple' : null;\n    var required = this.props.required ? 'required' : null;\n    var disabled = this.props.disabled ? 'disabled' : null;\n    var options = this.props.options;\n    var errorMessage = null;\n    var emptyOptionHTML = null;\n    var requiredHTML = null;\n    var elementClass = 'row form-group';\n\n    // Add required asterix\n    if (required) {\n      requiredHTML = React.createElement(\n        'span',\n        { className: 'text-danger' },\n        '*'\n      );\n    }\n\n    // Add empty option\n    if (this.props.emptyOption) {\n      emptyOptionHTML = React.createElement('option', null);\n    }\n\n    // Add error message\n    if (this.props.hasError || this.props.required && this.props.value === \"\") {\n      errorMessage = React.createElement(\n        'span',\n        null,\n        this.props.errorMessage\n      );\n      elementClass = 'row form-group has-error';\n    }\n\n    return React.createElement(\n      'div',\n      { className: elementClass },\n      React.createElement(\n        'label',\n        { className: 'col-sm-3 control-label', htmlFor: this.props.label },\n        this.props.label,\n        requiredHTML\n      ),\n      React.createElement(\n        'div',\n        { className: 'col-sm-9' },\n        React.createElement(\n          'select',\n          {\n            name: this.props.name,\n            multiple: multiple,\n            className: 'form-control',\n            id: this.props.label,\n            value: this.props.value,\n            onChange: this.handleChange,\n            required: required,\n            disabled: disabled\n          },\n          emptyOptionHTML,\n          Object.keys(options).map(function (option) {\n            return React.createElement(\n              'option',\n              { value: option, key: option },\n              options[option]\n            );\n          })\n        ),\n        errorMessage\n      )\n    );\n  }\n});\n\n/**\n * Textarea Component\n * React wrapper for a <textarea> element.\n */\nvar TextareaElement = React.createClass({\n  displayName: 'TextareaElement',\n\n\n  propTypes: {\n    name: React.PropTypes.string.isRequired,\n    label: React.PropTypes.string,\n    value: React.PropTypes.string,\n    id: React.PropTypes.string,\n    disabled: React.PropTypes.bool,\n    required: React.PropTypes.bool,\n    onUserInput: React.PropTypes.func\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      name: '',\n      label: '',\n      value: '',\n      id: null,\n      disabled: false,\n      required: false,\n      onUserInput: function onUserInput() {\n        console.warn('onUserInput() callback is not set');\n      }\n    };\n  },\n  handleChange: function handleChange(e) {\n    this.props.onUserInput(this.props.name, e.target.value);\n  },\n  render: function render() {\n    var disabled = this.props.disabled ? 'disabled' : null;\n    var required = this.props.required ? 'required' : null;\n    var requiredHTML = null;\n\n    // Add required asterix\n    if (required) {\n      requiredHTML = React.createElement(\n        'span',\n        { className: 'text-danger' },\n        '*'\n      );\n    }\n\n    return React.createElement(\n      'div',\n      { className: 'row form-group' },\n      React.createElement(\n        'label',\n        { className: 'col-sm-3 control-label', htmlFor: this.props.id },\n        this.props.label,\n        requiredHTML\n      ),\n      React.createElement(\n        'div',\n        { className: 'col-sm-9' },\n        React.createElement('textarea', {\n          cols: '25',\n          rows: '4',\n          className: 'form-control',\n          name: this.props.name,\n          id: this.props.id,\n          value: this.props.value,\n          required: required,\n          disabled: disabled,\n          onChange: this.handleChange\n        })\n      )\n    );\n  }\n});\n\n/**\n * Textbox Component\n * React wrapper for a <input type=\"text\"> element.\n */\nvar TextboxElement = React.createClass({\n  displayName: 'TextboxElement',\n\n  propTypes: {\n    name: React.PropTypes.string.isRequired,\n    label: React.PropTypes.string,\n    value: React.PropTypes.string,\n    id: React.PropTypes.string,\n    disabled: React.PropTypes.bool,\n    required: React.PropTypes.bool,\n    onUserInput: React.PropTypes.func\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      name: '',\n      label: '',\n      value: '',\n      id: null,\n      disabled: false,\n      required: false,\n      onUserInput: function onUserInput() {\n        console.warn('onUserInput() callback is not set');\n      }\n    };\n  },\n  handleChange: function handleChange(e) {\n    this.props.onUserInput(this.props.name, e.target.value);\n  },\n  render: function render() {\n    var disabled = this.props.disabled ? 'disabled' : null;\n    var required = this.props.required ? 'required' : null;\n    var requiredHTML = null;\n\n    // Add required asterix\n    if (required) {\n      requiredHTML = React.createElement(\n        'span',\n        { className: 'text-danger' },\n        '*'\n      );\n    }\n\n    return React.createElement(\n      'div',\n      { className: 'row form-group' },\n      React.createElement(\n        'label',\n        { className: 'col-sm-3 control-label', htmlFor: this.props.id },\n        this.props.label,\n        requiredHTML\n      ),\n      React.createElement(\n        'div',\n        { className: 'col-sm-9' },\n        React.createElement('input', {\n          type: 'text',\n          className: 'form-control',\n          name: this.props.name,\n          id: this.props.id,\n          value: this.props.value,\n          required: required,\n          disabled: disabled,\n          onChange: this.handleChange\n        })\n      )\n    );\n  }\n});\n\n/**\n * Date Component\n * React wrapper for a <input type=\"date\"> element.\n */\nvar DateElement = React.createClass({\n  displayName: 'DateElement',\n\n\n  propTypes: {\n    name: React.PropTypes.string.isRequired,\n    label: React.PropTypes.string,\n    value: React.PropTypes.string,\n    id: React.PropTypes.string,\n    disabled: React.PropTypes.bool,\n    required: React.PropTypes.bool,\n    onUserInput: React.PropTypes.func\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      name: '',\n      label: '',\n      value: '',\n      id: null,\n      disabled: false,\n      required: false,\n      onUserInput: function onUserInput() {\n        console.warn('onUserInput() callback is not set');\n      }\n    };\n  },\n  handleChange: function handleChange(e) {\n    this.props.onUserInput(this.props.name, e.target.value);\n  },\n  render: function render() {\n    var disabled = this.props.disabled ? 'disabled' : null;\n    var required = this.props.required ? 'required' : null;\n    var requiredHTML = null;\n\n    // Add required asterix\n    if (required) {\n      requiredHTML = React.createElement(\n        'span',\n        { className: 'text-danger' },\n        '*'\n      );\n    }\n\n    return React.createElement(\n      'div',\n      { className: 'row form-group' },\n      React.createElement(\n        'label',\n        { className: 'col-sm-3 control-label', htmlFor: this.props.label },\n        this.props.label,\n        requiredHTML\n      ),\n      React.createElement(\n        'div',\n        { className: 'col-sm-9' },\n        React.createElement('input', {\n          type: 'date',\n          className: 'form-control',\n          name: this.props.name,\n          id: this.props.label,\n          min: this.props.minYear,\n          max: this.props.maxYear,\n          onChange: this.handleChange,\n          value: this.props.value,\n          required: required,\n          disabled: disabled\n        })\n      )\n    );\n  }\n});\n\n/**\n * Numeric Component\n * React wrapper for a <input type=\"number\"> element.\n */\nvar NumericElement = React.createClass({\n  displayName: 'NumericElement',\n\n  propTypes: {\n    name: React.PropTypes.string.isRequired,\n    min: React.PropTypes.number.isRequired,\n    max: React.PropTypes.number.isRequired,\n    label: React.PropTypes.string,\n    value: React.PropTypes.string,\n    id: React.PropTypes.string,\n    disabled: React.PropTypes.bool,\n    required: React.PropTypes.bool,\n    onUserInput: React.PropTypes.func\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      name: '',\n      min: null,\n      max: null,\n      label: '',\n      value: '',\n      id: null,\n      required: false,\n      disabled: false,\n      onUserInput: function onUserInput() {\n        console.warn('onUserInput() callback is not set');\n      }\n    };\n  },\n  handleChange: function handleChange(e) {\n    this.props.onUserInput(this.props.name, e.target.value);\n  },\n  render: function render() {\n    var disabled = this.props.disabled ? 'disabled' : null;\n    var required = this.props.required ? 'required' : null;\n    var requiredHTML = null;\n\n    return React.createElement(\n      'div',\n      { className: 'row form-group' },\n      React.createElement(\n        'label',\n        { className: 'col-sm-3 control-label', htmlFor: this.props.id },\n        this.props.label,\n        requiredHTML\n      ),\n      React.createElement(\n        'div',\n        { className: 'col-sm-9' },\n        React.createElement('input', {\n          type: 'number',\n          className: 'form-control',\n          name: this.props.name,\n          id: this.props.id,\n          min: this.props.min,\n          max: this.props.max,\n          value: this.props.value,\n          disabled: disabled,\n          required: required,\n          onChange: this.handleChange\n        })\n      )\n    );\n  }\n});\n\n/**\n * File Component\n * React wrapper for a simple or 'multiple' <select> element.\n */\nvar FileElement = React.createClass({\n  displayName: 'FileElement',\n\n  propTypes: {\n    name: React.PropTypes.string.isRequired,\n    label: React.PropTypes.string,\n    value: React.PropTypes.string,\n    id: React.PropTypes.string,\n    disabled: React.PropTypes.bool,\n    required: React.PropTypes.bool,\n    hasError: React.PropTypes.bool,\n    errorMessage: React.PropTypes.string,\n    onUserInput: React.PropTypes.func\n  },\n  getInitialState: function getInitialState() {\n    return {\n      value: '',\n      hasError: false\n    };\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      name: '',\n      label: 'File to Upload',\n      value: '',\n      id: null,\n      disabled: false,\n      required: false,\n      hasError: false,\n      errorMessage: 'The field is required!',\n      onUserInput: function onUserInput() {\n        console.warn('onUserInput() callback is not set');\n      }\n    };\n  },\n  componentDidMount: function componentDidMount() {\n    if (this.props.value) {\n      this.setState({\n        value: this.props.value\n      });\n    }\n  },\n  componentWillReceiveProps: function componentWillReceiveProps() {\n    if (this.props.hasError) {\n      this.setState({\n        hasError: this.props.hasError\n      });\n    }\n  },\n  handleChange: function handleChange(e) {\n    var hasError = false;\n    if (this.props.required && e.target.value === \"\") {\n      hasError = true;\n    }\n    this.setState({\n      value: e.target.value.split(/(\\\\|\\/)/g).pop(),\n      hasError: hasError\n    });\n    // pass current file to parent form\n    var file = e.target.files[0];\n    this.props.onUserInput(this.props.name, file);\n  },\n\n  render: function render() {\n    var required = this.props.required ? 'required' : null;\n    var requiredHTML = null;\n    var errorMessage = '';\n    var elementClass = 'row form-group';\n\n    // Add error message\n    if (this.state.hasError) {\n      errorMessage = this.props.errorMessage;\n      elementClass = 'row form-group has-error';\n    }\n\n    // Add required asterix\n    if (required) {\n      requiredHTML = React.createElement(\n        'span',\n        { className: 'text-danger' },\n        '*'\n      );\n    }\n\n    var truncateEllipsis = {\n      display: 'table',\n      tableLayout: 'fixed',\n      width: '100%',\n      whiteSpace: 'nowrap'\n    };\n\n    var truncateEllipsisChild = {\n      display: 'table-cell',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis'\n    };\n\n    if (this.props.disabled) {\n      // add padding to align video title on disabled field\n      truncateEllipsis.paddingTop = \"7px\";\n\n      return React.createElement(\n        'div',\n        { className: elementClass },\n        React.createElement(\n          'label',\n          { className: 'col-sm-3 control-label' },\n          this.props.label\n        ),\n        React.createElement(\n          'div',\n          { className: 'col-sm-9' },\n          React.createElement(\n            'div',\n            { style: truncateEllipsis },\n            React.createElement(\n              'span',\n              { style: truncateEllipsisChild },\n              this.state.value\n            )\n          )\n        )\n      );\n    }\n\n    // Need to manually reset file value, because HTML API\n    // does not allow setting value to anything than empty string.\n    // Hence can't use value attribute in the input element.\n    var file = document.querySelector(\".fileUpload\");\n    if (file && !this.state.value) {\n      file.value = \"\";\n    }\n\n    return React.createElement(\n      'div',\n      { className: elementClass },\n      React.createElement(\n        'label',\n        { className: 'col-sm-3 control-label' },\n        this.props.label,\n        requiredHTML\n      ),\n      React.createElement(\n        'div',\n        { className: 'col-sm-9' },\n        React.createElement(\n          'div',\n          { className: 'input-group' },\n          React.createElement(\n            'div',\n            { tabIndex: '-1',\n              className: 'form-control file-caption kv-fileinput-caption' },\n            React.createElement(\n              'div',\n              { style: truncateEllipsis },\n              React.createElement(\n                'span',\n                { style: truncateEllipsisChild },\n                this.state.value\n              )\n            ),\n            React.createElement('div', { className: 'file-caption-name', id: 'video_file' })\n          ),\n          React.createElement(\n            'div',\n            { className: 'input-group-btn' },\n            React.createElement(\n              'div',\n              { className: 'btn btn-primary btn-file' },\n              React.createElement('i', { className: 'glyphicon glyphicon-folder-open' }),\n              ' Browse',\n              React.createElement('input', {\n                type: 'file',\n                className: 'fileUpload',\n                name: this.props.name,\n                onChange: this.handleChange,\n                required: required\n              })\n            )\n          )\n        ),\n        React.createElement(\n          'span',\n          null,\n          errorMessage\n        )\n      )\n    );\n  }\n});\n\n/**\n * HelpText Component\n * Used to display a block of help text in a form\n * @deprecated 08/09/2016\n */\nvar HelpTextElement = React.createClass({\n  displayName: 'HelpTextElement',\n\n  componentDidMount: function componentDidMount() {\n    console.warn(\"<HelpTextElement> component is deprecated!\" + \"Please use <StaticElement> instead!\");\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      html: false,\n      label: '',\n      text: ''\n    };\n  },\n  render: function render() {\n    if (this.props.html) {\n      return React.createElement(\n        'div',\n        { className: 'row form-group' },\n        React.createElement(\n          'label',\n          { className: 'col-sm-3 control-label' },\n          this.props.label\n        ),\n        React.createElement(\n          'div',\n          { className: 'col-sm-9' },\n          React.createElement('div', { dangerouslySetInnerHTML: { __html: this.props.text } })\n        )\n      );\n    }\n    return React.createElement(\n      'div',\n      { className: 'row form-group' },\n      React.createElement(\n        'label',\n        { className: 'col-sm-3 control-label' },\n        this.props.label\n      ),\n      React.createElement(\n        'div',\n        { className: 'col-sm-9' },\n        React.createElement(\n          'div',\n          null,\n          this.props.text\n        )\n      )\n    );\n  }\n});\n\n/**\n * Static element component.\n * Used to displays plain/formatted text as part of a form\n *\n * To pass a formatted text, you need to wrap it in a single parent element.\n * Example usage:\n *\n * ```\n * var myText = (<span>This is my <b>text</b></span>);\n * <StaticElement\n *    text={myText}\n *    label={note}\n * />\n * ```\n */\nvar StaticElement = React.createClass({\n  displayName: 'StaticElement',\n\n\n  mixins: [React.addons.PureRenderMixin],\n  propTypes: {\n    label: React.PropTypes.string,\n    text: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.element])\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      label: '',\n      text: null\n    };\n  },\n\n  render: function render() {\n    return React.createElement(\n      'div',\n      { className: 'row form-group' },\n      React.createElement(\n        'label',\n        { className: 'col-sm-3 control-label' },\n        this.props.label\n      ),\n      React.createElement(\n        'div',\n        { className: 'col-sm-9' },\n        React.createElement(\n          'p',\n          { className: 'form-control-static' },\n          this.props.text\n        )\n      )\n    );\n  }\n});\n\n/**\n * Button component\n * React wrapper for <button> element, typically used to submit forms\n */\nvar ButtonElement = React.createClass({\n  displayName: 'ButtonElement',\n\n  propTypes: {\n    label: React.PropTypes.string,\n    type: React.PropTypes.string,\n    onUserInput: React.PropTypes.func\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      label: 'Submit',\n      type: 'submit',\n      buttonClass: 'btn btn-primary',\n      columnSize: 'col-sm-9 col-sm-offset-3',\n      onUserInput: function onUserInput() {\n        console.warn('onUserInput() callback is not set');\n      }\n    };\n  },\n  handleClick: function handleClick(e) {\n    this.props.onUserInput(e);\n  },\n  render: function render() {\n    return React.createElement(\n      'div',\n      { className: 'row form-group' },\n      React.createElement(\n        'div',\n        { className: this.props.columnSize },\n        React.createElement(\n          'button',\n          {\n            type: this.props.type,\n            className: this.props.buttonClass,\n            onClick: this.handleClick\n          },\n          this.props.label\n        )\n      )\n    );\n  }\n});\n\n/**\n * Generic form element.\n */\nvar LorisElement = React.createClass({\n  displayName: 'LorisElement',\n\n\n  render: function render() {\n    var elementProps = this.props.element;\n    elementProps.ref = elementProps.name;\n    elementProps.onUserInput = this.props.onUserInput;\n\n    var elementHtml = React.createElement('div', null);\n\n    switch (elementProps.type) {\n      case 'text':\n        elementHtml = React.createElement(TextboxElement, elementProps);\n        break;\n      case 'select':\n        elementHtml = React.createElement(SelectElement, elementProps);\n        break;\n      case 'date':\n        elementHtml = React.createElement(DateElement, elementProps);\n        break;\n      case 'numeric':\n        elementHtml = React.createElement(NumericElement, elementProps);\n        break;\n      case 'textarea':\n        elementHtml = React.createElement(TextareaElement, elementProps);\n        break;\n      case 'file':\n        elementHtml = React.createElement(FileElement, elementProps);\n        break;\n      default:\n        console.warn(\"Element of type \" + elementProps.type + \" is not currently implemented!\");\n        break;\n    }\n\n    return elementHtml;\n  }\n});"}]);
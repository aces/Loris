<?php declare(strict_types=1);

require_once 'generic_includes.php';
require_once 'CandidateImporter.php';

/**
 * Minimum number of arguments needed to run this script.
 *
 * @var int
 */
const NUM_ARGS_REQUIRED = 4;

/*
 * Expected indices of parameters passed to this script via $argv
 *
 * @var int
 */
const MAPPING_ARG_INDEX = 2;
const DATA_ARG_INDEX = 3;
const EXCLUDED_ARG_INDEX = 4; // Used only for visit label imports

/**
 * Command line argument for the mode of data importation.
 */
const CANDIDATE_IMPORT = 'candidate';
const INSTRUMENT_IMPORT = 'instrument';
const VISIT_IMPORT = 'visits';

$usage = <<<USAGE
Usage: 

To import columns from a table: 

php {$argv[0]} %s <mapping.csv> <data.csv>
    <mapping.csv>   A CSV file containg columns with OLDPSCID, NEWPSCID, and
                    NEWCANDID
    <data.csv>      A CSV file containing columns with OLDPSCID,DATA


To import instrument information specifically:

php {$argv[0]} %s <mapping.csv> <data.csv>
    <mapping.csv>   A CSV file containg columns with OLDPSCID, NEWPSCID, and
                    NEWCANDID
    <data.csv>      A CSV file containing columns with instrument data. This
                    file should be created using the dataExtractor tool. The
                    filename must begin with the name of the instrument table
                    followed by an underscore.


To import session information specifically:

php {$argv[0]} %s <mapping.csv> <visits.csv> [excluded.csv]
    <mapping.csv>   A CSV file containg columns with OLDPSCID, NEWPSCID, and
                    NEWCANDID
    <visits.csv>    A CSV file containing information from the 'session' table.
                    Generated by dataExtractor.
    [excluded.txt]  Optional. A file containing Visit_labels to be excluded
                    from import. One per line.
        
 
USAGE;

$usageError = sprintf($usage, CANDIDATE_IMPORT, INSTRUMENT_IMPORT, VISIT_IMPORT);

/* BEGIN SCRIPT */

// Die if not enough arguments.
if (count($argv) < NUM_ARGS_REQUIRED) {
    die ($usageError);
}

// Die if invalid execution mode supplied.
$mode = $argv[1];
if ($mode !== CANDIDATE_IMPORT 
    && $mode !== VISIT_IMPORT 
    && $mode !== INSTRUMENT_IMPORT
) {
    die ($usageError);
}
$mappingFile = new SplFileInfo($argv[MAPPING_ARG_INDEX]);
$dataFile = new SplFileInfo($argv[DATA_ARG_INDEX]);

// Basic validation... dataFile name should contain the string 'visits' as this
// is how dataExtractor outputs visits/session data.
//TODO Move below to VisitImporter.php
//if (strpos($dataFile, 'visits') === false && $mode === 'visits') {
//    die (
//        "Data file $dataFile does not appear to have been generated by " .
//        "dataExtractor.php." . PHP_EOL
//    );
//}


switch ($mode) {
case INSTRUMENT_IMPORT:
    $importer = new InstrumentImporter($mappingFile, $dataFile);
case VISIT_IMPORT:
    $importer = new VisitImporter($mappingFile, $dataFile);
case CANDIDATE_IMPORT:
    $importer = new CandidateImporter($mappingFile, $dataFile);
}


if (!$importer->hasSharedCandidates()) {

}
if (count($importer->buildSQLStatements()) < 1) {
    die ('No SQL commands generated');
}

if (count($importer->candidatesSkipped) > 0) {
    echo 'Candidates skipped';
}

file_put_contents($outfile, $importer->buildSQLStatements());


<?php
/**
 * Script changing all table engines from the schema to InnoDB
 *
 * PHP Version 7
 *
 * @category Main
 * @package  Loris
 * @author   Various <example@example.com>
 * @license  Loris license
 * @link     https://www.github.com/aces/Loris-Trunk/
 */
require_once __DIR__ . "/../generic_includes.php";

$dbConfig = $config->getSetting('database');
$adminDB  = Database::singleton(
    $dbConfig['database'],
    $dbConfig['quatUser'],
    $dbConfig['quatPassword'],
    $dbConfig['host'],
    true
);

$base = $config->getSetting('base');
// SETUP OUTPUT to file in project/tables_sql/change_MyISAM_to_INNODB_schemaTables.sql
$filePath = __DIR__ . "/../../SQL/Archive/autogenerated/single_use/change_MyISAM_to_INNODB_schemaTables.sql";

echo "
#####################################################################################
This script will create ALTER TABLE statements to change any table in the database 
  with a MyISAM engine to use INNODB.
This script includes foreign keycheck disabling and re-enabling.
#####################################################################################
\n\n";

//define the command line parameters
if (count($argv) < 2 || $argv[1] == 'help') {
    showHelp();
}

// set default arguments
$confirm    = false;
$printToSQL = false;
$output     = "";

// get the rest of the arguments
if (!is_null($argv[1]) && $argv[1] === 'confirm') {
    $confirm = true;
} elseif (!is_null($argv[1]) && $argv[1] === 'tosql') {
    $printToSQL = true;
} else {
    showHelp();
}
// SETUP INPUT from schema files in SQL loris directory
$schemaFiles    = array(
                   "0000-00-00-schema.sql",
                   "0000-00-01-Permission.sql",
                   "0000-00-02-Menus.sql",
                   "0000-00-03-ConfigTables.sql",
                   "0000-00-04-Help.sql",
                  );
$schemaFileBase = $base."SQL/";
$completeSchema = "";
foreach ($schemaFiles as $file) {
    $completeSchema .= $fc =file_get_contents($schemaFileBase.$file, "r");
}
//print_r($completeSchema);
$createdTables = array();
preg_match_all('/CREATE TABLE \`([_a-zA-Z0-9]+)\`/', $completeSchema, $createdTables);
// END INPUT

// SETUP OUTPUT
$output .="SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS; \n";
$output .="SET FOREIGN_KEY_CHECKS=0; \n";

foreach ($createdTables[1] as $key=>$table)
{
    $output .= "ALTER TABLE `".$table."` ENGINE=INNODB;\n";
}
$output .="SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS; \n";
// END OUTPUT

// Take action, run on DB or generate file
if ($printToSQL) {
    // Generate the file
    writeToFile($filePath, $output);
} elseif ($confirm) {
    // Run on database
    // Get data from all tables to be modified
    $dataPre = array();
    foreach ($table_names as $key=>$table)
    {
        $colNumber = getNumberOfCols($table,$adminDB,$dbConfig);
        $sortString = "";
        for ($i=1; $i < $colNumber-1; $i++) {
            $sortString .= "$i,";
        }
        $sortString .= $colNumber-1;
        $dataPre[$table] = $DB->pselect("SELECT * FROM ". $table . " ORDER BY $sortString", array());
    }
    echo "Running database calls.\n";
    // Admin necessary, ALTER TABLE calls
    $adminDB->run($output);
    $dataPost = array();
    foreach ($table_names as $key=>$table)
    {
        $colNumber = getNumberOfCols($table,$adminDB,$dbConfig);
        $sortString = "";
        for ($i=1; $i < $colNumber-1; $i++) {
            $sortString .= "$i,";
        }
        $sortString .= $colNumber-1;
        $dataPost[$table] = $DB->pselect("SELECT * FROM ". $table . " ORDER BY $sortString", array());
    }
    compareArrays($dataPre, $dataPost);
}

function compareArrays($array1, $array2)
{
    echo "Comparing data before and after engine conversion.\n";
    foreach ($array1 as $table=>$rows) {
        foreach ($rows as $rowid=>$row) {
            foreach ($row as $key=>$val) {
                if ($array2[$table][$rowid][$key] !== $val) {
                    echo "A potential data corruption has been detected in Table $table, at field $key. 
                    (old value: $val, new value: $array2[$table][$rowid][$key])\n";
                }
            }
        }
    }
}

function getNumberOfCols($DBTable, $DB, $dbConfig)
{
    $number = $DB->pselectOne("
          SELECT COUNT(*) 
          FROM `information_schema`.`COLUMNS` 
          WHERE TABLE_NAME=:tbl AND TABLE_SCHEMA=:dbn",
        array(
            "tbl"=> $DBTable,
            "dbn"=> $dbConfig['database']
        )
    );
    return $number;
}

function showHelp()
{
    echo "*** CHANGE MyISAM TO INNODB - schema tables ***\n\n";

    echo "Example: php Engine_Change_MyISAM_to_INNODB_schemaTables.php confirm\n";
    echo "Example: php Engine_Change_MyISAM_to_INNODB_schemaTables.php tosql\n\n";

    echo "When the 'tosql' option is used, the SQL file exported will be located \n".
        "under the following path: \n".
        "%loris_root%/SQL/Archive/autogenerated/single_use/change_MyISAM_to_INNODB_schemaTables.sql\n\n";

    echo "When the 'confirm' option is used, the generated SQL is run directly on the database.\n\n";

    die();
}

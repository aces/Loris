#! /usr/bin/perl
# $Id: tarchiveLoader,v 1.24 2007/12/18 16:00:21 sebas Exp $

=pod

TODO

- dicom_to_minc: change converter back to perl (or make configurable)
- add a check for all programms that will be used (exists, but could be better....)
- consider whether to add a check for registered protocols against the tarchive db to save a few minutes of converting
- also add an option to make it interactively query user to learn new protocols - this should be a separate program
- add to config file whether or not to autocreate scanners

This script interacts with the LorisDB database system. It will connect to/deal with/ modify contents of the
following tables:
session, parameter_file, parameter_type, parameter_type_category, files, mri_staging, notification_spool

=cut

use strict;
use Carp;
use Getopt::Tabular;
use FileHandle;
use File::Basename;
use File::Temp qw/ tempdir /;
use Data::Dumper;
use FindBin;
use Cwd qw/ abs_path /;

# These are the LorisDB modules to be used
use lib "$FindBin::Bin";
use LorisDB::File;
use LorisDB::MRI;
use LorisDB::DBI;
use LorisDB::Notify;

# Turn on autoflush for standard output buffer so that we immediately see the results of print statements.
$|++;

## Starting the program
my $versionInfo = sprintf "%d revision %2d", q$Revision: 1.24 $ =~ /: (\d+)\.(\d+)/;
## needed for log and template
my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =localtime(time);
my $date        = sprintf("%4d-%02d-%02d %02d:%02d:%02d",$year+1900,$mon+1,$mday,$hour,$min,$sec);
my $debug       = 0;  
my $message     = '';
my $verbose     = 1;           # default for now
my $profile     = undef;       # this should never be set unless you are in a stable production environment
my $reckless    = 0;           # this is only for playing and testing. Don't set it to 1!!!
my $NewScanner  = 1;           # This should be the default unless you are a control freak
my $xlog        = 0;           # default should be 0
my $globArchiveLocation = 0;   # whether to use strict ArchiveLocation strings or to glob them (like '%Loc')

my @opt_table = (
                 ["Basic options","section"],
                 ["-profile     ","string",1, \$profile, "name of config file in ~/.lorisdb."],
                 
                 ["Advanced options","section"],
                 ["-reckless", "boolean", 1, \$reckless,"Upload data to database even if study protocol is not defined or violated."],
                 ["-globLocation", "boolean", 1, \$globArchiveLocation,"Loosen the validity check of the tarchive allowing for the possibility that the tarchive was moved to a different directory."],
                 ["-newScanner", "boolean", 1, \$NewScanner, "By default a new scanner will be registered if the data you upload requires it. You can risk turning it off."],

                 ["Fancy options","section"],
# fixme		 ["-keeptmp", "boolean", 1, \$keep, "Keep temp dir. Makes sense if have infinite space on your server."],
                 ["-xlog", "boolean", 1, \$xlog, "Open an xterm with a tail on the current log file."],
                 );

my $Help = <<HELP;
***************************************************************************************
TARCHIVE LOADER 
***************************************************************************************

Author  :   J-Sebastian Muehlboeck based on Jonathan Harlap\'s process_uploads 
            using the all singing and dancing (eierlegende Wollmilchsau) LorisDB lib
Date    :   2006/12/20
Version :   $versionInfo

This takes a [dicom{T(ar}]chive) as an argument and 
performs a lot of magic on the acquisitions within it.  

- archive verification
- candidate id extraction and/or lorisdb candidate creation
- study site determination
- scanner identity check  
- dicom to minc conversion
- miscellaneous header data extraction
- file relocation (to the MRI repository)
- lorisdb mri database registration and JIVification.

HELP
my $Usage = <<USAGE;
usage: $0 </path/to/DICOM-tarchive> [options]
       $0 -help to list options

USAGE
&Getopt::Tabular::SetHelp($Help, $Usage);
&Getopt::Tabular::GetOptions(\@opt_table, \@ARGV) || exit 1;

# input option error checking
{ package Settings; do "$ENV{HOME}/.lorisdb/$profile" }
if ($profile && !defined @Settings::db) { print "\n\tERROR: You don't have a configuration file named '$profile' in:  $ENV{HOME}/.lorisdb/ \n\n"; exit 33; }
if(!$ARGV[0] || !$profile) { print $Help; print "$Usage\n\tERROR: You must specify a valid tarchive and an existing profile.\n\n";  exit 33;  }

my $tarchive = abs_path($ARGV[0]);

#####################################################################################################
# These settings are in a config file (profile)
my $data_dir         = $Settings::data_dir;
my $pic_dir = $data_dir.'/pic';
my $jiv_dir = $data_dir.'/jiv';

my $prefix           = $Settings::prefix;
my $converter        = $Settings::converter;
my $mail_user        = $Settings::mail_user;
my $get_dicom_info   = $Settings::get_dicom_info;
my $exclude          = "localizer"; # case insensitive

my $User             = `whoami`; # fixme
my $template         = "TarLoad-$hour-$min-XXXXXX"; # for tempdir

# fixme there are better ways 
my @progs = ("convert", "Mincinfo", "mincpik", $converter);
&registerProgs(@progs);

# create the temp dir
my $TmpDir = tempdir($template, TMPDIR => 1, CLEANUP => 1 );

# create logdir(if !exists) and logfile
my @temp     = split(/\//, $TmpDir); 
my $templog  = $temp[$#temp];
my $LogDir   = "$data_dir/logs"; if (!-d $LogDir) { mkdir($LogDir, 0700); }
my $logfile  = "$LogDir/$templog.log";
open LOG, ">$logfile";
LOG->autoflush(1);
&logHeader();

# if xlog is set, fork a tail on log file.
my $childPID; if ($xlog) { $childPID = fork(); if($childPID == 0) { exec("xterm -geometry 130x70 -e tail -f $logfile"); exit(0); } }

# establish database connection
my $dbh = &LorisDB::DBI::connect_to_db(@Settings::db);
print LOG "\n==> Successfully connected to database \n";

#####################################################################################################
#
# get useful information from the tarchive table  - The regex is very study specific... !!!!!! fixme
# Fixme figure out a way to get rid of study specific ways of extracting information ... if there is 
# This will query the tarchive and retrieve (hopefully) enough information to continue the upload.
# fixme documentation needed
#
my ($PSCID, $md5sumArchive, $visitLabel, $gender);
#####################################################################################################

my $where = "ArchiveLocation='$tarchive'";
if($globArchiveLocation) {
    $where = "ArchiveLocation LIKE '%/".basename($tarchive)."'";
}
my $query = "SELECT PatientName, PatientID, PatientDoB, md5sumArchive, DateAcquired, DicomArchiveID, PatientGender, ScannerManufacturer, ScannerModel, ScannerSerialNumber, ScannerSoftwareVersion, neurodbCenterName FROM tarchive WHERE $where";
my $sth = $dbh->prepare($query); $sth->execute();
my %tarchiveInfo;

my ($patientName);

if ($sth->rows > 0) {
    my $tarchiveInfoRef = $sth->fetchrow_hashref();
    %tarchiveInfo = %$tarchiveInfoRef;
} else { 
    $message = "\n ERROR: Only archived data can be uploaded. This seems not to be a valid archive for this study!\n\n"; 
    &writeErrorLog($logfile, $message, 77); exit 77;
}

# ----- STEP 1: Verify the archive using the checksum from database
print LOG  "\n==> verifying dicom archive md5sum (checksum)\n";
my $md5_check = `md5sum $tarchive`;
my ($md5_real, $real) = split(' ', $md5_check);
my ($md5_db  , $db)   = split(' ', $tarchiveInfo{'md5sumArchive'});
print LOG " -> Checksum for target        :  $md5_real\n -> Checksum from database     :  $md5_db\n";
if ($md5_real ne $md5_db) { 
    $message =  "\nERROR: Archive seems to be corrupted or modified. Upload will exit now.\nPlease read the creation logs for more information!\n\n"; 
    &writeErrorLog($logfile, $message, 77); exit 77; 
} 

# ----- STEP 2: Verify PSC information using whatever field contains the site string
my ($center_name, $centerID) = LorisDB::MRI::getPSC($tarchiveInfo{$Settings::lookupCenterNameUsing}, \$dbh);
my $psc = $center_name;
if (!$psc) { print LOG "\nERROR: No center found for this candidate \n\n"; exit 77; }
print LOG  "\n==> Verifying acquisition center\n -> Center Name  : $center_name\n -> CenterID     : $centerID\n";

# ----- STEP 3: Determine the ScannerID (optionally create a new one if necessary)
print LOG "\n\n==> Trying to determine scanner ID\n";
my $scannerID = LorisDB::MRI::findScannerID($tarchiveInfo{'ScannerManufacturer'},
                                         $tarchiveInfo{'ScannerModel'},
                                         $tarchiveInfo{'ScannerSerialNumber'},
                                         $tarchiveInfo{'ScannerSoftwareVersion'},
                                         $centerID,\$dbh,$NewScanner
                                         );
if($scannerID == 0) {
    $message = "\n ERROR: The ScannerID for this particular scanner does not exist. Enable creating new ScannerIDs in your profile or this archive can not be uploaded.\n\n";
    &writeErrorLog($logfile, $message, 88); exit 88;
}
print LOG "==> scanner ID : $scannerID\n\n";

# ----- STEP 4: Determine the subject identifiers
if(!defined(&Settings::getSubjectIDs)) {
    $message =  "\nERROR: Profile does not contain getSubjectIDs routine. Upload will exit now.\n\n"; 
    &writeErrorLog($logfile, $message, 66); exit 66; 
}
my $subjectIDsref = Settings::getSubjectIDs($tarchiveInfo{'PatientName'}, 
                                            $tarchiveInfo{'PatientID'}, 
                                            $scannerID,
                                            \$dbh);
print LOG "\n==> Data found for candidate   : $subjectIDsref->{'CandID'} - $subjectIDsref->{'PSCID'} - Visit: $subjectIDsref->{'visitLabel'} - Acquired : $tarchiveInfo{'DateAcquired'}\n";

# ----- STEP 5: Optionally create candidates as needed
# Standardize gender (DICOM uses M/F, DB uses Male/Female)
if ($tarchiveInfo{'PatientGender'} eq 'F') { $gender = "Female"; } elsif ($tarchiveInfo{'PatientGender'} eq 'M')  { $gender = "Male"; }

# Create non-existent candidate if the profile allows for candidate creation
if (!LorisDB::MRI::subjectIDExists($subjectIDsref->{'CandID'}, \$dbh) && $Settings::createCandidates) {
    chomp($User);
    $subjectIDsref->{'CandID'} = LorisDB::MRI::createNewCandID(\$dbh);
    $query = "INSERT INTO candidate (CandID, PSCID, DoB, Gender, CenterID, Date_active, Date_registered, UserID, Entity_type) VALUES (" .
        $dbh->quote($subjectIDsref->{'CandID'}).",".$dbh->quote($subjectIDsref->{'PSCID'}).",". $dbh->quote($tarchiveInfo{'PatientDoB'}) ."," .
        $dbh->quote($gender).",". $dbh->quote($centerID). ", NOW(), NOW(), '$User', 'Human')";
    $dbh->do($query);
    print LOG  "\n==> CREATED NEW CANDIDATE : $subjectIDsref->{'CandID'}";
}
# if the candidate exis
elsif ($subjectIDsref->{'CandID'}) {
    print LOG  "\n==> getSubjectIDs returned this CandID/DCCID : $subjectIDsref->{'CandID'}\n"; 
}
else {
    $message = "\n ERROR: The candidate could not be considered for uploading, since s/he is not registered in your database. \n" . 
        " The dicom header PatientID is   : $tarchiveInfo{'PatientID'}\n".
        " The dicom header PatientName is : $tarchiveInfo{'PatientName'}\n\n";
    &writeErrorLog($logfile, $message, 66); exit 66; 
}

# ----- STEP 6: Get the SessionID
# This will actually create a visit count if it is not provided through the IDs in the dicom header
# The count starts with 1 if there is none.
if(!defined($subjectIDsref->{'visitLabel'})) { $subjectIDsref->{'visitLabel'} = lookupNextVisitLabel($$subjectIDsref->{'CandID'}, \$dbh); }

# get session ID
print LOG "\n\n==> Getting session ID\n";
my ($sessionID, $requiresStaging) = LorisDB::MRI::getSessionID($subjectIDsref, $tarchiveInfo{'DateAcquired'}, \$dbh, $subjectIDsref->{'subprojectID'});

#    # register into the mri staging table if staging is required
#    if($requiresStaging) {
#        my $quotedPatientName = $dbh->quote($patientName);
#        my $studyDate = $file->getParameter('study_date');
#        my $query = "SELECT COUNT(*) AS counter FROM mri_staging WHERE SessionID=$sessionID AND PatientName=$quotedPatientName AND StudyDate=UNIX_TIMESTAMP('$studyDate') AND Resolution IS NULL";
#        my $sth = $dbh->prepare($query); $sth->execute();
#        my $rowhr = $sth->fetchrow_hashref();
#        if($rowhr->{'counter'} == 0) {
#            $query = "INSERT INTO mri_staging SET SessionID=$sessionID, PatientName=$quotedPatientName, StudyDate=UNIX_TIMESTAMP('$studyDate')";
#            $dbh->do($query);
#            $notifier->spool('mri staging required', "Data labelled $quotedPatientName requires staging");
#        }
#    }

# Retain session ID for tarchive table    
print LOG "    SessionID: $sessionID\n";    # Staging: $requiresStaging\n";

# Make sure MRI Scan Done is set to yes, because now there is data.
if ($sessionID) { 
    $query = "UPDATE session SET Scan_done='Y' WHERE ID=$sessionID";
    $dbh->do($query);
}

# ----- STEP 7: extract the tarchive and feed the dicom data dir to the uploader
my $study_dir = $TmpDir . "/" . extract_tarchive($tarchive, $TmpDir);
my $ExtractSuffix  = basename($tarchive, ".tar");
# get rid of the tarchive Prefix 
$ExtractSuffix =~ s/DCM_(\d){4}-(\d){2}-(\d){2}_//;
my $info      = "head -n 12 ${TmpDir}/${ExtractSuffix}.meta";
my $header    = `$info`;
print LOG "\n$header\n";

# ----- STEP 8: Now we know that we actually have data and more things have to happen so let get started:
# make the notifier object
my $notifier = LorisDB::Notify->new(\$dbh);

# optionally do extra filtering on the dicom data, if needed
if( defined( &Settings::dicomFilter )) {
    Settings::dicomFilter($study_dir, \%tarchiveInfo);
}

# convert the dicom data to minc
&dicom_to_minc($study_dir,$converter);

# get list of mincs
my @minc_files = ();
&get_mincs(\@minc_files);

# this is necessary for interleaved acquisitions
&concat_mri(\@minc_files);

## optionally do extra filtering on a given set of files, if needed
#if( defined( $Settings::postConversionFilter )) {
#    $Settings::postConversionFilter(\@minc_files);
#}

# refresh list of mincs
&get_mincs(\@minc_files);

my $mcount = $#minc_files + 1;
print "\nNumber of MINC files that will be considered for inserting into the database: $mcount\n";
# If no good data was found stop processing and write error log.
if ($mcount < 1) { 
    $message = "\nNo data could be converted into valid MINC files. Localizers will not be considered! \n" ; 
    &writeErrorLog($logfile, $message, 99); print $message; exit 99; 
}

############################################### LOOP through MINCs ###########################################

# ----- STEP 9: At this step we actually have (multiple) MINC files so we loop  
# a valid study has at least one file that can be uploaded
my $valid_study = 0;
my $newTarchiveLocation = undef;

foreach my $minc (@minc_files)  {

# create File object
    my $file = LorisDB::File->new(\$dbh);

# load File object
    print LOG "\n==> Loading file from disk $minc\n" if $verbose;
    $file->loadFileFromDisk($minc);

# map dicom fields
    print LOG " --> mapping DICOM parameter for $minc\n" if $verbose;
    LorisDB::MRI::mapDicomParameters(\$file);

# optionally do extra filtering, if needed
    if( defined( &Settings::filterParameters )) {
        print LOG " --> using user-defined filterParameters for $minc\n" if $verbose;
        Settings::filterParameters(\$file);
    }

# compute the md5 hash
    print LOG "==> computing md5 hash for MINC body.\n" if $verbose;
    my $md5hash = &LorisDB::MRI::compute_hash(\$file);
    print LOG " --> md5: $md5hash\n" if $verbose;
    $file->setParameter('md5hash', $md5hash);
    my $unique = LorisDB::MRI::is_unique_hash(\$file);
    if (!$unique) { print LOG " --> WARNING: This file has already been uploaded!"; next; }

# at this point things will appear in the database. 
# Set some file information
    $file->setParameter('ScannerID', $scannerID);
    $file->setFileData('SessionID', $sessionID);
    $file->setFileData('PendingStaging', $requiresStaging);
    $file->setFileData('CoordinateSpace', 'native');
    $file->setFileData('OutputType', 'native');
    $file->setFileData('FileType', 'mnc');

# get acquisition protocol (identify the volume)
    print LOG "==> verifying acquisition protocol\n" if $verbose;
    my $acquisitionProtocol = &LorisDB::MRI::identify_scan_db($center_name, $subjectIDsref->{'subprojectID'}, \$file, \$dbh);
    
# Register scans into the database.  Which protocols to keep optionally controlled by the config file.

    if (!defined(&Settings::isFileToBeRegisteredGivenProtocol) 
        || $reckless 
        || (defined(&Settings::isFileToBeRegisteredGivenProtocol) && Settings::isFileToBeRegisteredGivenProtocol($acquisitionProtocol))) {
        
    # convert the textual scan_type into the scan_type id
        my $acquisitionProtocolID = &LorisDB::MRI::scan_type_text_to_id($acquisitionProtocol, \$dbh);
        $file->setFileData('AcquisitionProtocolID', $acquisitionProtocolID);
        print "Acq protocol: $acquisitionProtocol ID: $acquisitionProtocolID\n" if $debug;
    # set Date_taken = last modification timestamp (can't seem to get creation timestamp)
        my $Date_taken = (stat($minc))[9];
    # rename and move files
        my $minc_protocol_identified = &move_minc(\$minc, $subjectIDsref, $acquisitionProtocol, \$file);
        print "new NAME: ".$minc_protocol_identified ."\n" if $debug;
        $file->setFileData('File', $minc);

    # move the tarchive from the inbox into the tarchive library
    # only if the library dir is defined and the tarchive has not yet been moved
        if(defined($Settings::tarchiveLibraryDir) && !$valid_study) {
            print "Moving tarchive into library\n" if $debug;
            $newTarchiveLocation = $Settings::tarchiveLibraryDir."/".substr($tarchiveInfo{'DateAcquired'}, 0, 4);

        # make the directory if it does not yet exist
            unless(-e $newTarchiveLocation) { mkdir($newTarchiveLocation, 0755); }

        # determine the new name of the tarchive
            my $newTarchiveFilename = basename($tarchive, ".tar");
            my $newTarchiveFilenameSuffix = 1;
            my $doNotMoveTarchive = 0;
          TARCHIVEHASHCHECK:
            while(-e $newTarchiveLocation."/".$newTarchiveFilename."_".$newTarchiveFilenameSuffix.".tar") {
                my $md5cmd = "md5sum ".$newTarchiveLocation."/".$newTarchiveFilename."_".$newTarchiveFilenameSuffix.".tar";
                my @bits = split(' ', `$md5cmd`);
                if($bits[0] eq $md5_real) {
                    $doNotMoveTarchive = 1;
                    last TARCHIVEHASHCHECK;
                }
                $newTarchiveFilenameSuffix++;
            }
            $newTarchiveLocation .= "/".$newTarchiveFilename."_".$newTarchiveFilenameSuffix.".tar";

         # move the tarchive
            unless($doNotMoveTarchive) {
                my $mvTarchiveCmd = "mv $tarchive $newTarchiveLocation";
                `$mvTarchiveCmd`;
            # now update tarchive table to store correct location
                $dbh->do("UPDATE tarchive SET ArchiveLocation=".$dbh->quote($newTarchiveLocation)." WHERE DicomArchiveID=".$dbh->quote($tarchiveInfo{'DicomArchiveID'}));
            }
        }
        if(!defined($Settings::tarchiveLibraryDir)) { $newTarchiveLocation = $tarchive; }

    # record which tarchive was used to make this file
        $file->setParameter('tarchiveLocation', $newTarchiveLocation);
        $file->setParameter('tarchiveMD5', $tarchiveInfo{'md5sumArchive'});

    # mark the study as valid because at least one volume will be inserted into the DB
        $valid_study = 1;

    # register into the db fixme if I ever want a dry run .... 
        print "Registering file into db\n" if $debug;
        my $fileID;
        $fileID = &LorisDB::MRI::register_db(\$file);
        print "FileID: $fileID\n" if $debug;
    # update mri_acquisition_dates table
        &update_mri_acquisition_dates($sessionID, $tarchiveInfo{'DateAcquired'}, \$dbh);
    # jivify
        print "Making JIV\n" if $verbose;
        &LorisDB::MRI::make_jiv(\$file, $jiv_dir);
    # make the browser pics
        print "Making browser pics\n" if $verbose;
        &LorisDB::MRI::make_pics(\$file, $pic_dir, $Settings::horizontalPics);
        
    } ## end if clause to exclude non identified scans ##
    else {
        print LOG " --> WARNING: File was a $acquisitionProtocol and had to be discarded!\n";
    }
    # add series notification
    $notifier->spool('mri new series', $subjectIDsref->{'CandID'} . " " . $subjectIDsref->{'PSCID'} . " " . $subjectIDsref->{'visitLabel'} . "\tacquired " . $file->getParameter('acquisition_date') . "\t" . $file->getParameter('series_description'), $centerID);
    print "\nFinished file:  ".$file->getFileDatum('File')." \n" if $debug;
} # end foreach $minc

if ($valid_study) {
    # spool a new study message
    $notifier->spool('mri new study', $subjectIDsref->{'CandID'} . " " . $subjectIDsref->{'PSCID'} . " " . $subjectIDsref->{'visitLabel'} . "\tacquired ". $tarchiveInfo{'DateAcquired'});
    # link the tarchive with session
    my $query = "UPDATE tarchive SET SessionID=\'$sessionID\' WHERE DicomArchiveID=\'$tarchiveInfo{'DicomArchiveID'}\'";
    $dbh->do($query);
} 
else {
    # spool a failure message This has been changed to tarchive instead of using patientName
    $notifier->spool('mri invalid study', $tarchive. " acquired ". $tarchiveInfo{'DateAcquired'} ." was deemed invalid\n\n". $study_dir);
}

# make final logfile name without overwriting phantom logs
my $final_logfile = $psc."_".$tarchiveInfo{'DateAcquired'}.'_'.$subjectIDsref->{'CandID'};
if ($subjectIDsref->{'isPhantom'}) { $final_logfile = $subjectIDsref->{'PSCID'}."_".$tarchiveInfo{'DateAcquired'}.'_'.$subjectIDsref->{'CandID'}; }
# if something went wrong and there is no acq date and CandID
unless($tarchiveInfo{'DateAcquired'} && $subjectIDsref->{'CandID'}) { $final_logfile .= '_'.$temp[$#temp]; }
$final_logfile .= '.log.gz';

# fixme for now we assume that extracted data will not be kept...
my $cleanup = "rm -rf ${TmpDir}/${ExtractSuffix}*"; 
print "\nCleaning up temp files: $cleanup\n" if $verbose;
`$cleanup`;

# if there are leftovers, dump them in the trashbin
my @leftovers = `\\ls -1 $TmpDir`;
if(scalar(@leftovers) > 0) {
    my $trashdir = $data_dir . '/trashbin/' . $temp[$#temp];
    print LOG "\n==> LEFTOVERS: ".scalar(@leftovers)."\n --> Moving leftovers to $trashdir\n";
    `mkdir -p -m 755 $trashdir`;
    `chmod -R u+w $TmpDir/*`;
    `mv $TmpDir/* $trashdir`;
    open MAIL, "| mail $mail_user";
    print MAIL "Subject: [URGENT Automated] upload LorisDB leftovers!\n";
    print MAIL "Moved some leftovers to $trashdir\n";
    print MAIL "Log of process in $data_dir/logs/$final_logfile\n";
    print MAIL "Files left over:\n".join("", @leftovers)."\n";
    close MAIL;
}

print LOG "\n==> Done!  Removing $TmpDir.\n";
close LOG;
`gzip -9 $logfile`;
my $cmd = "mv $logfile.gz $data_dir/logs/$final_logfile";
`$cmd`;

# kill the xterm with the tail on log
if ($xlog) {
    `kill -9 $childPID`;
#    kill 1, $childPID;
}

##############################################################################
#### FUNCTIONS USED BY ABOVE EVENTUALLY MOVE TO SEPARATE LIBRARY #############
##############################################################################

# Most important function now. Gets the tarchive and extracts it so data can actually be uploaded
sub extract_tarchive {
    my ($tarchive, $tempdir) = @_;
    print "Extracting tarchive\n" if $verbose;
    `cd $tempdir ; tar -xf $tarchive`;
    opendir TMPDIR, $tempdir;
    my @tars = grep { /\.tar\.gz$/ && -f "$tempdir/$_" } readdir(TMPDIR);
    closedir TMPDIR;
    if(scalar(@tars) != 1) {
        print "Error: Could not find inner tar in $tarchive!\n";
        print @tars . "\n";
        exit(1);
    }
    my $dcmtar = $tars[0];
    my $dcmdir = $dcmtar;
    $dcmdir =~ s/\.tar\.gz$//;
    
    `cd $tempdir ; tar -xzf $dcmtar`;
    return $dcmdir;
}

# this is a useful function that will close the log and write error messages in case of abnormal program termination
sub writeErrorLog {
    my ($logfile, $message, $failStatus, ) = @_;
    print LOG $message;
    print LOG "program exit status: $failStatus";
    `cat $logfile >> $LogDir/error.log`;
    close LOG;
    `rm -f $logfile`;
}

# useful only if the visit label IS NOT encoded somewhere in the patient ID or patient Name
sub lookupNextVisitLabel {
    my ($CandID, $dbhr) = @_;
    my $visitLabel = 1;
    my $sth = $${dbhr}->prepare("SELECT Visit_label FROM session WHERE CandID=$CandID ORDER BY ID DESC LIMIT 1");
    $sth->execute();
    if($sth->rows > 0) {
        my @row = $sth->fetchrow_array();
        $visitLabel = $row[0] + 1;
    }
    return $visitLabel;
}

#
sub update_mri_acquisition_dates {
    my ($sessionID, $acq_date, $dbhr) = @_;
    $dbh = $$dbhr;
    
    # get the registered acquisition date for this session
    my $query = "SELECT s.ID, m.AcquisitionDate from session AS s left outer join mri_acquisition_dates AS m on (s.ID=m.SessionID) WHERE s.ID='$sessionID' and (m.AcquisitionDate > '$acq_date' OR m.AcquisitionDate is null) AND '$acq_date'>0";
    my $sth = $dbh->prepare($query);
    $sth->execute();
	
    # if we found a session, it needs updating or inserting, so we use replace into.
    if($sth->rows > 0) {
        my $query = "REPLACE INTO mri_acquisition_dates SET AcquisitionDate='$acq_date', SessionID='$sessionID'";
        $dbh->do($query);
    }
}

# determines where the mincs will go...
sub which_directory {
    my ($subjectIDsref) = @_;
    my %subjectIDs = %$subjectIDsref;
    my $dir = $data_dir;
    
    $dir = "$dir/assembly/$subjectIDs{'CandID'}/$subjectIDs{'visitLabel'}/mri";
    $dir =~ s/ //;
    return $dir;
}

## get_acqusitions($study_dir, \@acquisitions) -> puts list of acq dirs in @acquisitions
sub get_acquisitions {
    my ($study_dir, $acquisitions) = @_;
    @$acquisitions = split("\n", `find $study_dir -type d -name \\*.ACQ`);
    print LOG "Acquisitions: ".join("\n", @$acquisitions)."\n";
}

############
# dicom_to_minc($study_dir) -> converts the dicoms to mincs
# the old version of this was :
# my $d2m_cmd = "find $study_dir -type f | $get_dicom_info -studyuid -series -echo -image -file -stdin | sort -n -k1 -k2 -k3 -k4 | cut -f 5 | dcm2mnc -dname \'\' -stdin -clobber -cmd \"gzip\"  $TmpDir";
# you can do it either way. I found it to be more useful to exclude scouts and localizers since they get discarded anyhow... and there was the Kupio problem with localizers having the same series number
# as the subsequent series which would cause the converter to fail or overwrite...
sub dicom_to_minc {
    my ($study_dir, $converter) = @_;
                                                     # info :   1        2      3      4     5          6          7
    my $d2m_cmd = "find $study_dir -type f | $get_dicom_info -studyuid -series -echo -image -file -series_descr -attvalue 0018 0024 -stdin | sort -n -k1 -k2 -k6 -k3 -k7 -k4 | grep -iv $exclude | cut -f 5 | ";
    # use some other converter if specified in the config
    if ($converter ne 'dcm2mnc') { $d2m_cmd .= "$converter $TmpDir -notape -compress -stdin"; }
    else { $d2m_cmd .= "dcm2mnc -dname '' -stdin -clobber $TmpDir"; }
    my $d2m_log = `$d2m_cmd`;

    if($? > 0) {
        my $exit_code = $? >> 8;
        # dicom_to_minc failed...  don't keep going, just email.
        open MAIL, "| mail $mail_user";
        print MAIL "Subject: [URGENT Automated] uploadLorisDB: dicom->minc failed\n";
        print MAIL "Exit code $exit_code received from:\n$d2m_cmd\n";
        close MAIL;
        croak("dicom_to_minc failure, exit code $exit_code");
    }
    print LOG "### Dicom to MINC:\n$d2m_log";
}

# returns a sorted list of mincfiles
sub get_mincs {
    my ($minc_files) = @_;
    @$minc_files = ();
    opendir TMPDIR, $TmpDir;
    my @files = readdir TMPDIR;
    closedir TMPDIR;
    
    my @files_list;
    foreach my $file (@files) {
        next unless $file =~ /\.mnc(\.gz)?$/;
        push @files_list, `Mincinfo -quiet -tab -file -date $TmpDir/$file`;
    }
    open SORTER, "|sort -nk2 | cut -f1 > $TmpDir/sortlist";
    print SORTER join("", @files_list);
    close SORTER;
    
    open SORTLIST, "<$TmpDir/sortlist";
    while(my $line = <SORTLIST>) {
        chomp($line);
        push @$minc_files, $line;
    }
    close SORTLIST;
    `rm -f $TmpDir/sortlist`;
    print LOG "\n### These MINC files have been created: \n".join("\n", @$minc_files)."\n";
}

## concat_mri(\@minc_files, $psc) -> concats & removes pre-concat mincs
sub concat_mri {
    my ($minc_files) = @_;
    
    # make a list of the mincs to concat (avoid arg list too long errors)
    open CONCATFILES, ">$TmpDir/concatfilelist.txt";
    foreach my $file (@$minc_files) {
        print CONCATFILES "$file\n";
    }
    close CONCATFILES;
    
    mkdir("$TmpDir/concat", 0700);

    my $cmd = "cat $TmpDir/concatfilelist.txt | concat_mri.pl -maxslicesep 3.1 -compress -postfix _concat -targetdir $TmpDir/concat -stdin";
    my $log = `$cmd`;
    `rm -f $TmpDir/concatfilelist.txt`;

    # fixme print LOG "Concat:\n $cmd\n$log\n" if $verbose;
    my $concat_count = `\\ls -1 $TmpDir/concat | wc -l`+0;
    if($concat_count > 0) {
        `mv $TmpDir/concat/*.mnc.gz $TmpDir`;
    }
    `rmdir $TmpDir/concat`;
    print LOG "### Count for concatenated MINCs: $concat_count new files created\n";
}

## move_minc(\$minc, \%minc_ids, $minc_type) -> renames and moves $minc
sub move_minc {
    my ($minc, $subjectIDsref, $minc_type, $fileref) = @_;
    
    my ($new_name, $version);
    my %subjectIDs = %$subjectIDsref;

    # figure out where to put the files
    my $dir = which_directory($subjectIDsref);
    `mkdir -p -m 755 $dir/native`;

    # figure out what to call files
    my @exts = split(/\./, basename($$minc));
    shift @exts;
    my $extension = join('.', @exts);

    my $concat = "";
    $concat = '_concat' if $minc =~ /_concat/;

    my $new_dir = "$dir/native";

    $version = 1;
    $new_name = $prefix."_".$subjectIDs{'CandID'}."_".$subjectIDs{'visitLabel'}."_".$minc_type."_".sprintf("%03d",$version).$concat.".$extension";
    $new_name =~ s/ //;
    $new_name =~ s/__+/_/g;

    while(-e "$new_dir/$new_name") {
        $version = $version + 1;
        $new_name =  $prefix."_".$subjectIDs{'CandID'}."_".$subjectIDs{'visitLabel'}."_".$minc_type."_".sprintf("%03d",$version).$concat.".$extension";
        $new_name =~ s/ //;
        $new_name =~ s/__+/_/g;
    }

    $new_name = "$new_dir/$new_name";
    my $cmd = "mv $$minc $new_name";
    `$cmd`;
    print LOG "File $$minc \n moved to:\n $new_name\n";
    $$minc = $new_name;
    return $new_name;
}


sub logHeader () {
    print LOG "
----------------------------------------------------------------------------------------------------------
                                     AUTOMATED DICOM DATA UPLOAD
----------------------------------------------------------------------------------------------------------
*** Date and time of upload    : $date
*** Location of source data    : $tarchive
*** tmp dir location           : $TmpDir
";
}

# There is better ways to do this
# yes.  there is.
sub registerProgs() {
    my @toregister = @_;
    foreach my $prog (@toregister) {
        my $present = `which $prog`;
        if (!$present) { die("$prog not found") };
    }
}

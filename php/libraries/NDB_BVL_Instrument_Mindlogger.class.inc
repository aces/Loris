<?php
/**
 * This file contains the base class for Mindlogger instruments in Loris
 *
 * PHP Version 5
 *
 * @category Mindlogger
 * @package  Mindlogger
 * @author   Dzmitry Yahur <dyagur@scnsoft.com>
 * @license  http://www.gnu.org/licenses/gpl-3.0.txt GPLv3
 * @link     https://www.github.com/aces/Loris-Trunk/
 */

namespace Loris\Behavioural;

use LORIS\Data\Cardinality;
use \LORIS\Data\Scope;
use LORIS\Data\Types\Enumeration;
use LORIS\Data\Types\IntegerType;
use LORIS\Data\Types\StringType;
use LORIS\Data\Types\DateType;
use LORIS\Data\Types\TimeType;
use LORIS\Data\Types\URI;
use \LORIS\instruments\DictionaryItem;

/**
 * Base class for all Mindlogger instruments in Loris
 *
 * @category Main
 * @package  Behavioural
 * @author   Dzmitry Yahur <dyagur@scnsoft.com>
 * @license  http://www.gnu.org/licenses/gpl-3.0.txt GPLv3
 * @link     https://www.github.com/aces/Loris-Trunk/
 */
class NDB_BVL_Instrument_Mindlogger extends \NDB_BVL_Instrument
{
    const ACTIVITY_ITEM_TEXT = "text";
    const ACTIVITY_ITEM_SINGLE_SELECT = "singleSelect";
    const ACTIVITY_ITEM_MULTI_SELECT = "multiSelect";
    const ACTIVITY_ITEM_SLIDER = "slider";
    const ACTIVITY_ITEM_NUMBER_SELECT = "numberSelect";
    const ACTIVITY_ITEM_TIME_RANGE = "timeRange";
    const ACTIVITY_ITEM_GEOLOCATION = "geolocation";
    const ACTIVITY_ITEM_DRAWING = "drawing";
    const ACTIVITY_ITEM_PHOTO = "photo";
    const ACTIVITY_ITEM_VIDEO = "video";
    const ACTIVITY_ITEM_DATE = "date";
    const ACTIVITY_ITEM_SLIDER_ROWS = "sliderRows";
    const ACTIVITY_ITEM_SINGLE_SELECT_ROWS = "singleSelectRows";
    const ACTIVITY_ITEM_MULTI_SELECT_ROWS = "multiSelectRows";
    const ACTIVITY_ITEM_AUDIO = "audio";
    const ACTIVITY_ITEM_TIME = "time";
    const ACTIVITY_ITEM_FLANKER = "flanker";
    const ACTIVITY_ITEM_STABILITY_TRACKER = "stabilityTracker";
    const ACTIVITY_ITEM_AB_TRAILS = "ABTrails";
    const ACTIVITY_ITEM_AUDIO_PLAYER = "audioPlayer"; // Won't be used
    const ACTIVITY_ITEM_MESSAGE = "message"; // Won't be used

    protected array $dictionary = [];
    protected Scope $scope;

    protected string $appletName = "Mindlogger Applet";
    protected array $subTestsList = [];

    /**
     * @param string|null $commentID The CommentID being loaded
     * @param string|null $page The page being loaded
     *
     * @return void
     */
    public function setup(?string $commentID = null, ?string $page = null): void
    {
        parent::setup($commentID, $page); // TODO: Change the autogenerated stub
    }

    /**
     * @return string|null
     */
    public function getFullName(): ?string
    {
        return $this->appletName;
    }

    /**
     * @param string $appletID The applet ID to load
     * @param bool $_ Will be ignored
     * @return void
     * @throws \LorisException
     */
    public function loadInstrumentFile(string $appletID, bool $_ = true): void
    {
        try {
            $this->scope = new Scope(Scope::SESSION);
            $db = $this->loris->getDatabaseConnection();
            $applet = $db->pselectRow("SELECT * FROM instrument_mindlogger_schema WHERE AppletID = ?", [$appletID]);

            $schema = json_decode($applet["AppletSchema"], true);

            $this->appletName = $schema["displayName"];
            foreach ($schema["activities"] as $activity) {
                $actId = $activity["id"];
                $this->subTestsList[] = [
                    'Name' => $activity["name"],
                    'Description' => $activity["description"],
                ];
                foreach ($activity["items"] as $actItem) {
                    $this->updateDictionary("{$appletID}__{$actId}", $actItem);
                }
            }
        } catch (\Exception $e) {
            throw new \LorisException("Error loading applet: " . $e->getMessage());
        }
    }


    /**
     * @param string $activityUniqId
     * @param array $activityItem
     * @return void
     */
    protected function updateDictionary(string $activityUniqId, array $activityItem): void
    {
        $fieldName = $activityUniqId . "__" . $activityItem["name"];

        switch ($activityItem["responseType"]) {
            case self::ACTIVITY_ITEM_TEXT:
            case self::ACTIVITY_ITEM_GEOLOCATION:
                $this->dictionary[] = new DictionaryItem(
                    $fieldName,
                    $activityItem["question"],
                    $this->scope,
                    new StringType($activityItem["config"]["maxResponseLength"] ?? null),
                    new Cardinality(Cardinality::SINGLE),
                    $activityItem["name"],
                );
                break;
            case self::ACTIVITY_ITEM_SINGLE_SELECT:
            case self::ACTIVITY_ITEM_MULTI_SELECT:
                $cardType = $activityItem["responseType"] === self::ACTIVITY_ITEM_SINGLE_SELECT
                    ? Cardinality::SINGLE
                    : Cardinality::MANY;
                $this->dictionary[] = new DictionaryItem(
                    $fieldName,
                    $activityItem["question"],
                    $this->scope,
                    new Enumeration(
                        ...\array_map(
                        function ($option) {
                            return (string)$option["value"];
                        },
                        $activityItem["responseValues"]["options"]
                    ),
                    ),
                    new Cardinality($cardType),
                    $activityItem["name"],
                );
                break;
            case self::ACTIVITY_ITEM_NUMBER_SELECT:
            case self::ACTIVITY_ITEM_SLIDER:
                $this->dictionary[] = new DictionaryItem(
                    $fieldName,
                    $activityItem["question"],
                    $this->scope,
                    new IntegerType(),
                    new Cardinality(Cardinality::SINGLE),
                    $activityItem["name"],
                );
                break;
            case self::ACTIVITY_ITEM_DATE:
                $this->dictionary[] = new DictionaryItem(
                    $fieldName,
                    $activityItem["question"],
                    $this->scope,
                    new DateType(),
                    new Cardinality(Cardinality::SINGLE),
                    $activityItem["name"],
                );
                break;
            case self::ACTIVITY_ITEM_TIME:
                $this->dictionary[] = new DictionaryItem(
                    $fieldName,
                    $activityItem["question"],
                    $this->scope,
                    new TimeType(),
                    new Cardinality(Cardinality::SINGLE),
                    $activityItem["name"],
                );
                break;
            case self::ACTIVITY_ITEM_DRAWING:
            case self::ACTIVITY_ITEM_PHOTO:
            case self::ACTIVITY_ITEM_VIDEO:
            case self::ACTIVITY_ITEM_AUDIO:
                $this->dictionary[] = new DictionaryItem(
                    $fieldName,
                    $activityItem["question"],
                    $this->scope,
                    new URI(),
                    new Cardinality(Cardinality::SINGLE),
                    $activityItem["name"],
                );
                break;
            case self::ACTIVITY_ITEM_SINGLE_SELECT_ROWS:
            case self::ACTIVITY_ITEM_MULTI_SELECT_ROWS:
                $cardType = $activityItem["responseType"] === self::ACTIVITY_ITEM_SINGLE_SELECT_ROWS
                    ? Cardinality::SINGLE
                    : Cardinality::MANY;
                foreach ($activityItem["responseValues"]["rows"] as $row) {
                    $this->dictionary[] = new DictionaryItem(
                        $activityUniqId . "__" . $activityItem["name"] . "__" . $row["id"],
                        $activityItem["question"],
                        $this->scope,
                        new Enumeration(
                            ...\array_map(
                            function ($option) {
                                return (string)$option["id"];
                            },
                            $activityItem["responseValues"]["options"]
                        ),
                        ),
                        new Cardinality($cardType),
                        $activityItem["name"],
                    );
                }
                break;
            case self::ACTIVITY_ITEM_SLIDER_ROWS:
                foreach ($activityItem["responseValues"]["rows"] as $row) {
                    $this->dictionary[] = new DictionaryItem(
                        $activityUniqId . "__" . $activityItem["name"] . "__" . $row["id"],
                        $activityItem["question"],
                        $this->scope,
                        new IntegerType(),
                        new Cardinality(Cardinality::SINGLE),
                        $activityItem["name"],
                    );
                }
                break;
            case self::ACTIVITY_ITEM_TIME_RANGE:
            case self::ACTIVITY_ITEM_FLANKER:
            case self::ACTIVITY_ITEM_STABILITY_TRACKER:
            case self::ACTIVITY_ITEM_AB_TRAILS:
                //Todo: Will implemented in the future
                break;
        }
    }

    /**
     * @return array
     */
    function getSubtestList(): array
    {
        return $this->subTestsList;
    }

    /**
     * @return iterable
     */
    public function getDataDictionary(): iterable
    {
        return $this->dictionary;
    }
}

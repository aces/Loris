<?php
/**
 * This class defines a factory which can be used to generate other objects that
 * are usually singletons. Instead of directly calling class::singleton statically,
 * this factory should be used so that a mock class can be subbed in for testing.
 *
 * Note: Setters can be used to inject test doubles when writing unit tests.
 *
 * PHP Version 5
 *
 *  @category Main
 *  @package  Main
 *  @author   Dave MacFarlane <david.macfarlane2@mcgill.ca>
 *  @license  http://www.gnu.org/licenses/gpl-3.0.txt GPLv3
 *  @link     https://www.github.com/aces/Loris/
 */
require_once 'NDB_Factory.class.inc';
require_once 'User.class.inc';
require_once 'NDB_Config.class.inc';
require_once 'Database.class.inc';
require_once 'CouchDB.class.inc';

/**
 * Implementation of factory class described in this file's file comment
 *
 *  @category Main
 *  @package  Main
 *  @author   Dave MacFarlane <david.macfarlane2@mcgill.ca>
 *  @license  http://www.gnu.org/licenses/gpl-3.0.txt GPLv3
 *  @link     https://www.github.com/aces/Loris/
 */
class NDB_Factory
{
    /**
     * Single instance of Database class
     *
     * @var Database
     */
    private static $_db = null;

    /**
     * Single instance of CouchDB database wrapper class
     *
     * @var CouchDB
     */
    private static $_couchdb = null;

    /**
     * Single instance of Loris USer object
     *
     * @var User
     */
    private static $_user = null;

    /**
     * Single instance of NDB_Config object
     *
     * @var NDB_Config
     */
    private static $_config = null;


    /**
     * Returns a single factory object. This must be used instead of being
     * constructed directly so that the testing suite and Loris code are
     * using the same factory.
     *
     * @return NDB_Factory A single instance of NDB_Factory
     */
    static function singleton()
    {
        static $self = null;
        if ($self === null) {
            $self = new NDB_Factory();
        }
        return $self;
    }

    /**
     * Reset all of the private variables of the factory to the default
     * state. Used between testing runs.
     *
     * @return none
     */
    public function reset()
    {
        self::$_db      = null;
        self::$_couchdb = null;
        self::$_user    = null;
        self::$_config  = null;
    }

    /**
     * Return NDB_Config object
     *
     * @param string $configFile Location of XML file to parse config from
     *
     * @return NDB_Config A config singleton
     */
    public function config($configFile = "../project/config.xml")
    {
        if (self::$_config !== null) {
            return self::$_config;
        }

        $config = NDB_Config::singleton($configFile);

        self::$_config = $config;
        $config->load($configFile);
        return $config;
    }

    /**
     * Set config
     * (Can used for injecting test doubles)
     *
     * @param NDB_Config $config config object
     *
     * @return NDB_Config config object which was passed in
     */
    public function setConfig(NDB_Config $config)
    {
        self::$_config = $config;
        return $config;
    }

    /**
     * Returns Loris User object.
     *
     * @return User A user singleton
     */
    public function user()
    {
        if (self::$_user !== null) {
            return self::$_user;
        }

        $user = User::singleton();

        self::$_user = $user;
        return $user;
    }

    /**
     * Explicitly set the user singleton that is being used by the factory
     *
     * @param User $user The user to be returned by the factory
     *
     * @return User The same user that was passed in.
     */
    public function setUser(User $user)
    {
        self::$_user = $user;
        return $user;
    }

    /**
     * Returns a connected reference to a database handler
     *
     * @return Database A DB reference
     */
    public function database()
    {
        $db_ref = null;

        $db_ref = &self::$_db;
        if ($db_ref !== null) {
            return $db_ref;
        }
        self::$_db = Database::singleton();

        $config = $this->config();
        $dbc    = $config->getSetting('database');
        $db_ref->connect(
            $dbc['database'],
            $dbc['username'],
            $dbc['password'],
            $dbc['host'],
            true
        );
        return $db_ref;
    }

    /**
     * Explicitly set the database singleton that is being used by the factory
     * (Can be used for injecting test doubles)
     *
     * @param Database $db Database object
     *
     * @return Database same Database object which was passed in
     */
    public function setDatabase(Database $db)
    {
        self::$_db = $db;
        return $db;
    }

    /**
     * Returns a reference to a Loris CouchDB database wrapper.
     *
     * @return CouchDB CouchDB singleton
     */
    public function couchDB()
    {
        if (self::$_couchdb !== null) {
            return self::$_couchdb;
        }

        self::$_couchdb = CouchDB::singleton(); //new CouchDB();

        return self::$_couchdb;
    }

    /**
     * Explicitly set the Couch DB singleton that is being used by the factory
     * (Can be used for injecting test doubles)
     *
     * @param CouchDB $couchDB CouchDB database wrapper
     *
     * @return CouchDB
     */
    public function setCouchDB(CouchDB $couchDB)
    {
        self::$_couchdb = $couchDB;
        return $couchDB;
    }
}
?>

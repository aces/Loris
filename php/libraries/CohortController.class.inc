<?php
/**
 * This file contains the CohortController class.
 *
 * PHP Version 7
 *
 * @category Controller
 * @package  Cohorts
 * @author   Rida Abou-Haidar <rida.abou-haidar@mcin.ca>
 * @license  http://www.gnu.org/licenses/gpl-3.0.txt GPLv3
 * @link     https://www.github.com/aces/Loris/
 */

namespace LORIS;

use LORIS\CohortData;

/**
 * Base class that contains method to access the cohort of projects
 *
 * @category Controller
 * @package  Cohorts
 * @author   Rida Abou-Haidar <rida.abou-haidar@mcin.ca>
 * @license  http://www.gnu.org/licenses/gpl-3.0.txt GPLv3
 * @link     https://www.github.com/aces/Loris/
 */
class CohortController extends \LORIS\Data\ProvisionerInstance
{
    /**
     * The database connection to use
     *
     * @var \Database
     */
    protected $database;

    /**
     * The constructor
     *
     * @param \Database $database The database connection to use
     */
    public function __construct(\Database $database)
    {
        if (!$database->isConnected()) {
            throw new \RuntimeException(
                "CohortController - Database not connected"
            );
        }
        $this->database = $database;
    }

    /**
     * Function defining the base query for cohorts to avoid duplication
     *
     * @return string
     */
    protected function getBaseQuery() : string
    {
        return "SELECT
                CohortID,
                title,
                useEDC,
                WindowDifference,
                RecruitmentTarget
            FROM cohort ";
    }
    /**
     * Retruns a list of configured Cohorts
     *
     * @return CohortData[] The list of cohorts
     */
    public function getAllCohorts(): array
    {
        $cohortRows = $this->database->pselect(
            $this->getBaseQuery(),
            []
        );

        $cohorts = [];
        foreach ($cohortRows as $row) {
            $cohort = new CohortData();
            $cohort->setID(intval($row['CohortID']));
            $cohort->title            = $row['title'];
            $cohort->useEDC           = $row['useEDC'] == 1;
            $cohort->windowDifference = $row['WindowDifference'];
            $cohort->recruitmentTarget = isset($row['RecruitmentTarget'])
                    ? intval($row['RecruitmentTarget']) : null;
            $cohorts[] = $cohort;
        }

        return $cohorts;
    }

    /**
     * This returns a single cohort object for the given cohort
     * title and will only ever instantiate
     * one object in the event that it's called multiple times.
     *
     * @param string $cohortTitle The title of the cohort
     *
     * @return CohortData the Cohort object
     */
    public function getCohortByTitle(string $cohortTitle) : CohortData
    {
        $row = $this->database->pSelectRow(
            $this->getBaseQuery()." WHERE title = :title",
            ['title' => $cohortTitle]
        );

        if (empty($row)) {
            throw new \NotFound(
                "No cohort with title $cohortTitle found."
            );
        }

        $cohort = new CohortData();
        $cohort->setID($row['CohortID']);
        $cohort->title            = $row['title'];
        $cohort->useEDC           = $row['useEDC'] == 1;
        $cohort->windowDifference = $row['WindowDifference'];
        $cohort->recruitmentTarget = isset($row['RecruitmentTarget'])
            ? intval($row['RecruitmentTarget']) : null;

        return $cohort;
    }

    /**
     * Get a cohort object from the ID by mapping the ID to a title and using the
     * singleton function
     *
     * @param int $cohortID The ID of the cohort requested
     *
     * @return CohortData
     */
    public function getCohortByID(int $cohortID) : CohortData
    {
        $cohortTitle = $this->database->pSelectOne(
            "SELECT
              title
            FROM
              cohort
            WHERE CohortID = :id
            ",
            ['id' => $cohortID]
        );

        if (empty($cohortTitle)) {
            throw new \NotFound("No cohort with ID $cohortID found.");
        }

        return $this->getCohortByTitle($cohortTitle);
    }

    /**
     * Create a new cohort and insert it into the database.
     *
     * @param CohortData $cohort A cohort object without the ID
     *
     * @return CohortData The created cohort with its new ID
     */
    public function create(CohortData $cohort)
    : CohortData
    {
        if (!empty($cohort->id)) {
            throw new \LorisException(
                "An ID can not be supplied when creating a new cohort, the ID
                will be generated by the database."
            );
        }
        $cohortExists = $this->cohortExists($cohort->title);

        if (!$cohortExists) {
            throw new \LorisException(
                "A cohort with the same title ".
                $cohort->title." already exists"
            );
        }

        // Update cohort table
        $this->database->insert(
            'cohort',
            [
                'title'             => $cohort->title,
                'useEDC'            => is_null($cohort->useEDC)
                    ?: ($cohort->useEDC ? 1 : 0),
                'WindowDifference'  => $cohort->windowDifference,
                'RecruitmentTarget' => $cohort->recruitmentTarget,
            ]
        );

        return $this->getCohortByTitle($cohort->title);
    }

    /**
     * Update an existing cohort in the database.
     *
     * @param CohortData $cohort The cohort object to update
     *
     * @return CohortData The updated cohort
     */
    public function update(CohortData $cohort)
    : CohortData
    {
        // Update cohort table
        $this->database->update(
            'cohort',
            [
                'title'             => $cohort->title,
                'useEDC'            => is_null($cohort->useEDC)
                    ?: ($cohort->useEDC ? 1 : 0),
                'WindowDifference'  => $cohort->windowDifference,
                'RecruitmentTarget' => $cohort->recruitmentTarget,
            ],
            ['title'  => $cohort->id]
        );

        return $this->getCohortByTitle($cohort->title);
    }

    /**
     * Check if a cohort already exists in the DB based on the title
     *
     * @param string $cohortTitle Title of the cohort
     *
     * @return bool
     */
    public function cohortExists(string $cohortTitle)
    {
        $cohort = $this->database->pselectOne(
            "SELECT CohortID FROM cohort WHERE title=:title",
            ["title"=>$cohortTitle]
        );

        if (empty($cohort)) {
            return false;
        }
        return true;
    }

    /**
     * Query projects associated with the supplied cohort.
     * The querying and instantiation of projects is done by the Project class.
     *
     * @param CohortData $cohort The cohort object for which we want
     *                           the associated cohorts
     *
     * @return \Project[] List of projects for the given cohort
     */
    public function getProjects(CohortData $cohort) : array
    {
        return \Project::getProjectsForCohort($cohort);
    }

    /**
     * Required function when extending ProvisionnerInstance. This simply wraps the
     * array of cohorts in a Traversable object and returns it
     *
     * @return \Traversable
     */
    protected function getAllInstances(): \Traversable
    {
        return new \ArrayIterator($this->getAllCohorts());
    }
}

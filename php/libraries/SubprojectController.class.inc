<?php
/**
 * This file contains the SubprojectController class.
 *
 * PHP Version 7
 *
 * @category Controller
 * @package  Subprojects
 * @author   Rida Abou-Haidar <rida.abou-haidar@mcin.ca>
 * @license  http://www.gnu.org/licenses/gpl-3.0.txt GPLv3
 * @link     https://www.github.com/aces/Loris/
 */

namespace LORIS;

/**
 * Base class that contains method to access the subproject of projects
 *
 * @category Controller
 * @package  Subprojects
 * @author   Rida Abou-Haidar <rida.abou-haidar@mcin.ca>
 * @license  http://www.gnu.org/licenses/gpl-3.0.txt GPLv3
 * @link     https://www.github.com/aces/Loris/
 */
class SubprojectController
{
    /**
     * The database connection to use
     *
     * @var \Database
     */
    protected $database;

    /**
     * The constructor
     *
     * @param \Database $database The database connection to use
     */
    public function __construct(\Database $database)
    {
        if (!$database->isConnected()) {
            throw new \RuntimeException(
                "SubprojectController - Database not connected"
            );
        }
        $this->database = $database;
    }

    /**
     * Retruns a list of configured Subprojects
     *
     * @return \LORIS\Subproject[] The list of subprojects
     */
    public function getAllSubprojects(): array
    {
        $subprojectRows = $this->database->pselect(
            "SELECT
                SubprojectID,
                title,
                useEDC,
                WindowDifference,
                RecruitmentTarget
            FROM subproject
            ",
            []
        );

        $subprojects = [];
        foreach ($subprojectRows as $row) {
            $subproject    = new \LORIS\Subproject(
                intval($row['SubprojectID']),
                $row['title'],
                $row['useEDC'] === '1',
                $row['WindowDifference'],
                isset($row['RecruitmentTarget'])
                    ? intval($row['RecruitmentTarget']) : null
            );
            $subprojects[] = $subproject;
        }

        return $subprojects;
    }

    /**
     * This returns a single subproject object for the given subproject
     * title and will only ever instantiate
     * one object in the event that it's called multiple times.
     *
     * @param string $subprojectTitle The title of the subproject
     *
     * @return \LORIS\Subproject the Subproject object
     */
    public function getSubprojectByTitle($subprojectTitle) : \LORIS\Subproject
    {
        $subprojectData = $this->database->pSelectRow(
            "SELECT
                    SubprojectID,
                    title,
                    useEDC,
                    WindowDifference,
                    RecruitmentTarget
                FROM subproject
                WHERE title = :title",
            ['title' => $subprojectTitle]
        );

        if (empty($subprojectData)) {
            throw new \NotFound(
                "No subproject with title $subprojectTitle found."
            );
        }

        $subproject = new \LORIS\Subproject(
            intval($subprojectData['SubprojectID']),
            $subprojectData['title'],
            $subprojectData['useEDC'] === '1',
            $subprojectData['WindowDifference'],
            isset($subprojectData['RecruitmentTarget'])
                ? intval($subprojectData['RecruitmentTarget']) : null
        );
        return $subproject;
    }

    /**
     * Get a subproject object from the ID by mapping the ID to a title and using the
     * singleton function
     *
     * @param int $subprojectID The ID of the subproject requested
     *
     * @return \LORIS\Subproject
     */
    public function getSubprojectByID(int $subprojectID) : \LORIS\Subproject
    {
        $subprojectTitle = $this->database->pSelectOne(
            "SELECT
              title
            FROM
              subproject
            WHERE SubprojectID = :id
            ",
            ['id' => $subprojectID]
        );

        if (empty($subprojectTitle)) {
            throw new \NotFound("No subproject with ID $subprojectID found.");
        }

        return $this->getSubprojectByTitle($subprojectTitle);
    }

    /**
     * Create a new subproject and insert it into the database.
     *
     * @param \LORIS\Subproject $subproject A subproject object without the ID
     *
     * @return \LORIS\Subproject The created subproject with it's new ID
     */
    public function createSubproject(\LORIS\Subproject $subproject)
    : \LORIS\Subproject
    {
        if (!empty($subproject->getID())) {
            throw new \LorisException(
                "An ID can not be supplied when creating a new subproject, the ID
                will be generated by the database."
            );
        }
        $subprojectExists = $this->subprojectExists($subproject->title);

        if (!$subprojectExists) {
            throw new \LorisException(
                "A subproject with the same title ".
                $subproject->title." already exists"
            );
        }

        // Update subproject table
        $this->database->insert(
            'subproject',
            [
                'title'             => $subproject->title,
                'useEDC'            => is_null($subproject->useEDC)
                    ?: ($subproject->useEDC ? 1 : 0),
                'WindowDifference'  => $subproject->windowDifference,
                'RecruitmentTarget' => $subproject->recruitmentTarget,
            ]
        );

        return $this->getSubprojectByTitle($subproject->title);
    }

    /**
     * Update an existing subproject in the database.
     *
     * @param \LORIS\Subproject $subproject The subproject object to update
     *
     * @return \LORIS\Subproject The updated subproject
     */
    public function updateSubproject(\LORIS\Subproject $subproject)
    : \LORIS\Subproject
    {
        // Update subproject table
        $this->database->update(
            'subproject',
            [
                'title'             => $subproject->title,
                'useEDC'            => is_null($subproject->useEDC)
                    ?: ($subproject->useEDC ? 1 : 0),
                'WindowDifference'  => $subproject->windowDifference,
                'RecruitmentTarget' => $subproject->recruitmentTarget,
            ],
            ['title'  => $subproject->getID()]
        );

        return $this->getSubprojectByTitle($subproject->title);
    }

    /**
     * Check if a subproject already exists in the DB based on the title
     *
     * @param string $subprojectTitle Title of the subproject
     *
     * @return bool
     */
    public function subprojectExists(string $subprojectTitle)
    {
        $subproject = $this->database->pselectOne(
            "SELECT SubprojectID FROM subproject WHERE title=:title",
            ["title"=>$subprojectTitle]
        );

        if (empty($subproject)) {
            return false;
        }
        return true;
    }

    /**
     * Query projects associated with the supplied subproject.
     * The querying and instantiation of projects is done by the Project class.
     *
     * @param \LORIS\Subproject $subproject The subproject object for which we want
     *                                      the associated subprojects
     *
     * @return \Project[] List of projects for the given subproject
     */
    public function getProjects(\LORIS\Subproject $subproject) : array
    {
        return \Project::getProjectsForSubproject($subproject);
    }

}

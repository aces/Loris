<?php
namespace LORIS\Models;

use \LORIS\Models\VO;

 /**
  * Candidate Data Access Object (DAO).
  * This class contains all database handling that is needed to 
  * permanently store and retrieve Candidate object instances. 
  *
  * Note: This sourcecode has been initially generated by FREE
  *       DaoGen generator version 2.4.1.
  */

class Candidate_DAO
{

    private $_database;

    public function __construct(&$conn)
    {
        $this->_database = $conn;
    }

    /**
     * createValueObject-method. This method is used when the Dao class needs
     * to create new value object instance. The reason why this method exists
     * is that sometimes the programmer may want to extend also the valueObject
     * and then this method can be overrided to return extended valueObject.
     * NOTE: If you extend the valueObject class, make sure to override the
     * clone() method in it!
     */
    function createValueObject() {
          return new Candidate_OV();
    }


    /**
     * getObject-method. This will create and load valueObject contents from database 
     * using given Primary-Key as identifier. This method is just a convenience method 
     * for the real load-method which accepts the valueObject as a parameter. Returned
     * valueObject will be created using the createValueObject() method.
     */
    function getObject($ID) {

          $valueObject = $this->createValueObject();
          $valueObject->setID($ID);
          $this->load($valueObject);
          return $valueObject;
    }


    /**
     * load-method. This will load valueObject contents from database using
     * Primary-Key as identifier. Upper layer should use this so that valueObject
     * instance is created and only primary-key should be specified. Then call
     * this method to complete other persistent information. This method will
     * overwrite all other fields except primary-key and possible runtime variables.
     * If load can not find matching row, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be loaded.
     *                     Primary-key field must be set for this to work properly.
     */
    function load(&$valueObject) {

          if (!$valueObject->getID()) {
               //print "Can not select without Primary-Key!";
               return false;
          }

          $sql = "SELECT * FROM candidate WHERE (ID = ".$valueObject->getID().") "; 

          if ($this->singleQuery($this->_database, $sql, $valueObject))
               return true;
          else
               return false;
    }


    /**
     * LoadAll-method. This will read all contents from database table and
     * build an Vector containing valueObjects. Please note, that this method
     * will consume huge amounts of resources if table has lot's of rows. 
     * This should only be used when target tables have only small amounts
     * of data.
     *
     * @param conn         This method requires working database connection.
     */
    function loadAll(&$conn) {


          $sql = "SELECT * FROM candidate ORDER BY ID ASC ";

          $searchResults = $this->listQuery($conn, $sql);

          return $searchResults;
    }



    /**
     * create-method. This will create new row in database according to supplied
     * valueObject contents. Make sure that values for all NOT NULL columns are
     * correctly specified. Also, if this table does not use automatic surrogate-keys
     * the primary-key must be specified. After INSERT command this method will 
     * read the generated primary-key back to valueObject if automatic surrogate-keys
     * were used. 
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be created.
     *                     If automatic surrogate-keys are not used the Primary-key 
     *                     field must be set for this to work properly.
     */
    function create(&$conn, &$valueObject) {

          $sql = "INSERT INTO candidate ( ID, CandID, PSCID, ";
          $sql = $sql."ExternalID, DoB, EDC, ";
          $sql = $sql."Gender, CenterID, ProjectID, ";
          $sql = $sql."Ethnicity, Active, Date_active, ";
          $sql = $sql."RegisteredBy, UserID, Date_registered, ";
          $sql = $sql."flagged_caveatemptor, flagged_reason, flagged_other, ";
          $sql = $sql."flagged_other_status, Testdate, Entity_type, ";
          $sql = $sql."ProbandGender, ProbandDoB) VALUES (".$valueObject->getID().", ";
          $sql = $sql."".$valueObject->getCandID().", ";
          $sql = $sql."'".$valueObject->getPSCID()."', ";
          $sql = $sql."'".$valueObject->getExternalID()."', ";
          $sql = $sql."'".$valueObject->getDoB()."', ";
          $sql = $sql."'".$valueObject->getEDC()."', ";
          $sql = $sql."'".$valueObject->getGender()."', ";
          $sql = $sql."".$valueObject->getCenterID().", ";
          $sql = $sql."".$valueObject->getProjectID().", ";
          $sql = $sql."'".$valueObject->getEthnicity()."', ";
          $sql = $sql."'".$valueObject->getActive()."', ";
          $sql = $sql."'".$valueObject->getDate_active()."', ";
          $sql = $sql."'".$valueObject->getRegisteredBy()."', ";
          $sql = $sql."'".$valueObject->getUserID()."', ";
          $sql = $sql."'".$valueObject->getDate_registered()."', ";
          $sql = $sql."'".$valueObject->getFlagged_caveatemptor()."', ";
          $sql = $sql."".$valueObject->getFlagged_reason().", ";
          $sql = $sql."'".$valueObject->getFlagged_other()."', ";
          $sql = $sql."'".$valueObject->getFlagged_other_status()."', ";
          $sql = $sql."'".$valueObject->getTestdate()."', ";
          $sql = $sql."'".$valueObject->getEntity_type()."', ";
          $sql = $sql."'".$valueObject->getProbandGender()."', ";
          $sql = $sql."'".$valueObject->getProbandDoB()."') ";
          $result = $this->databaseUpdate($conn, $sql);


          return true;
    }


    /**
     * save-method. This method will save the current state of valueObject to database.
     * Save can not be used to create new instances in database, so upper layer must
     * make sure that the primary-key is correctly specified. Primary-key will indicate
     * which instance is going to be updated in database. If save can not find matching 
     * row, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be saved.
     *                     Primary-key field must be set for this to work properly.
     */
    function save(&$conn, &$valueObject) {

          $sql = "UPDATE candidate SET CandID = ".$valueObject->getCandID().", ";
          $sql = $sql."PSCID = '".$valueObject->getPSCID()."', ";
          $sql = $sql."ExternalID = '".$valueObject->getExternalID()."', ";
          $sql = $sql."DoB = '".$valueObject->getDoB()."', ";
          $sql = $sql."EDC = '".$valueObject->getEDC()."', ";
          $sql = $sql."Gender = '".$valueObject->getGender()."', ";
          $sql = $sql."CenterID = ".$valueObject->getCenterID().", ";
          $sql = $sql."ProjectID = ".$valueObject->getProjectID().", ";
          $sql = $sql."Ethnicity = '".$valueObject->getEthnicity()."', ";
          $sql = $sql."Active = '".$valueObject->getActive()."', ";
          $sql = $sql."Date_active = '".$valueObject->getDate_active()."', ";
          $sql = $sql."RegisteredBy = '".$valueObject->getRegisteredBy()."', ";
          $sql = $sql."UserID = '".$valueObject->getUserID()."', ";
          $sql = $sql."Date_registered = '".$valueObject->getDate_registered()."', ";
          $sql = $sql."flagged_caveatemptor = '".$valueObject->getFlagged_caveatemptor()."', ";
          $sql = $sql."flagged_reason = ".$valueObject->getFlagged_reason().", ";
          $sql = $sql."flagged_other = '".$valueObject->getFlagged_other()."', ";
          $sql = $sql."flagged_other_status = '".$valueObject->getFlagged_other_status()."', ";
          $sql = $sql."Testdate = '".$valueObject->getTestdate()."', ";
          $sql = $sql."Entity_type = '".$valueObject->getEntity_type()."', ";
          $sql = $sql."ProbandGender = '".$valueObject->getProbandGender()."', ";
          $sql = $sql."ProbandDoB = '".$valueObject->getProbandDoB()."'";
          $sql = $sql." WHERE (ID = ".$valueObject->getID().") ";
          $result = $this->databaseUpdate($conn, $sql);

          if ($result != 1) {
               //print "PrimaryKey Error when updating DB!";
               return false;
          }

          return true;
    }


    /**
     * delete-method. This method will remove the information from database as identified by
     * by primary-key in supplied valueObject. Once valueObject has been deleted it can not 
     * be restored by calling save. Restoring can only be done using create method but if 
     * database is using automatic surrogate-keys, the resulting object will have different 
     * primary-key than what it was in the deleted object. If delete can not find matching row,
     * NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be deleted.
     *                     Primary-key field must be set for this to work properly.
     */
    function delete(&$conn, &$valueObject) {


          if (!$valueObject->getID()) {
               //print "Can not delete without Primary-Key!";
               return false;
          }

          $sql = "DELETE FROM candidate WHERE (ID = ".$valueObject->getID().") ";
          $result = $this->databaseUpdate($conn, $sql);

          if ($result != 1) {
               //print "PrimaryKey Error when updating DB!";
               return false;
          }
          return true;
    }


    /**
     * deleteAll-method. This method will remove all information from the table that matches
     * this Dao and ValueObject couple. This should be the most efficient way to clear table.
     * Once deleteAll has been called, no valueObject that has been created before can be 
     * restored by calling save. Restoring can only be done using create method but if database 
     * is using automatic surrogate-keys, the resulting object will have different primary-key 
     * than what it was in the deleted object. (Note, the implementation of this method should
     * be different with different DB backends.)
     *
     * @param conn         This method requires working database connection.
     */
    function deleteAll(&$conn) {

          $sql = "DELETE FROM candidate";
          $result = $this->databaseUpdate($conn, $sql);

          return true;
    }


    /**
     * coutAll-method. This method will return the number of all rows from table that matches
     * this Dao. The implementation will simply execute "select count(primarykey) from table".
     * If table is empty, the return value is 0. This method should be used before calling
     * loadAll, to make sure table has not too many rows.
     *
     * @param conn         This method requires working database connection.
     */
    function countAll(&$conn) {

          $sql = "SELECT count(*) FROM candidate";
          $allRows = 0;

          $result = $conn->execute($sql);

          if ($row = $conn->nextRow($result))
                $allRows = $row[0];

          return $allRows;
    }


    /** 
     * searchMatching-Method. This method provides searching capability to 
     * get matching valueObjects from database. It works by searching all 
     * objects that match permanent instance variables of given object.
     * Upper layer should use this by setting some parameters in valueObject
     * and then  call searchMatching. The result will be 0-N objects in vector, 
     * all matching those criteria you specified. Those instance-variables that
     * have NULL values are excluded in search-criteria.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance where search will be based.
     *                     Primary-key field should not be set.
     */
    function searchMatching(&$conn, &$valueObject) {

          $first = true;
          $sql = "SELECT * FROM candidate WHERE 1=1 ";

          if ($valueObject->getID() != 0) {
              if ($first) { $first = false; }
              $sql = $sql."AND ID = ".$valueObject->getID()." ";
          }

          if ($valueObject->getCandID() != 0) {
              if ($first) { $first = false; }
              $sql = $sql."AND CandID = ".$valueObject->getCandID()." ";
          }

          if ($valueObject->getPSCID() != "") {
              if ($first) { $first = false; }
              $sql = $sql."AND PSCID LIKE '".$valueObject->getPSCID()."%' ";
          }

          if ($valueObject->getExternalID() != "") {
              if ($first) { $first = false; }
              $sql = $sql."AND ExternalID LIKE '".$valueObject->getExternalID()."%' ";
          }

          if ($valueObject->getDoB() != "") {
              if ($first) { $first = false; }
              $sql = $sql."AND DoB = '".$valueObject->getDoB()."' ";
          }

          if ($valueObject->getEDC() != "") {
              if ($first) { $first = false; }
              $sql = $sql."AND EDC = '".$valueObject->getEDC()."' ";
          }

          if ($valueObject->getGender() != "") {
              if ($first) { $first = false; }
              $sql = $sql."AND Gender LIKE '".$valueObject->getGender()."%' ";
          }

          if ($valueObject->getCenterID() != 0) {
              if ($first) { $first = false; }
              $sql = $sql."AND CenterID = ".$valueObject->getCenterID()." ";
          }

          if ($valueObject->getProjectID() != 0) {
              if ($first) { $first = false; }
              $sql = $sql."AND ProjectID = ".$valueObject->getProjectID()." ";
          }

          if ($valueObject->getEthnicity() != "") {
              if ($first) { $first = false; }
              $sql = $sql."AND Ethnicity LIKE '".$valueObject->getEthnicity()."%' ";
          }

          if ($valueObject->getActive() != "") {
              if ($first) { $first = false; }
              $sql = $sql."AND Active LIKE '".$valueObject->getActive()."%' ";
          }

          if ($valueObject->getDate_active() != "") {
              if ($first) { $first = false; }
              $sql = $sql."AND Date_active = '".$valueObject->getDate_active()."' ";
          }

          if ($valueObject->getRegisteredBy() != "") {
              if ($first) { $first = false; }
              $sql = $sql."AND RegisteredBy LIKE '".$valueObject->getRegisteredBy()."%' ";
          }

          if ($valueObject->getUserID() != "") {
              if ($first) { $first = false; }
              $sql = $sql."AND UserID LIKE '".$valueObject->getUserID()."%' ";
          }

          if ($valueObject->getDate_registered() != "") {
              if ($first) { $first = false; }
              $sql = $sql."AND Date_registered = '".$valueObject->getDate_registered()."' ";
          }

          if ($valueObject->getFlagged_caveatemptor() != "") {
              if ($first) { $first = false; }
              $sql = $sql."AND flagged_caveatemptor LIKE '".$valueObject->getFlagged_caveatemptor()."%' ";
          }

          if ($valueObject->getFlagged_reason() != 0) {
              if ($first) { $first = false; }
              $sql = $sql."AND flagged_reason = ".$valueObject->getFlagged_reason()." ";
          }

          if ($valueObject->getFlagged_other() != "") {
              if ($first) { $first = false; }
              $sql = $sql."AND flagged_other LIKE '".$valueObject->getFlagged_other()."%' ";
          }

          if ($valueObject->getFlagged_other_status() != "") {
              if ($first) { $first = false; }
              $sql = $sql."AND flagged_other_status LIKE '".$valueObject->getFlagged_other_status()."%' ";
          }

          if ($valueObject->getTestdate() != "") {
              if ($first) { $first = false; }
              $sql = $sql."AND Testdate = '".$valueObject->getTestdate()."' ";
          }

          if ($valueObject->getEntity_type() != "") {
              if ($first) { $first = false; }
              $sql = $sql."AND Entity_type LIKE '".$valueObject->getEntity_type()."%' ";
          }

          if ($valueObject->getProbandGender() != "") {
              if ($first) { $first = false; }
              $sql = $sql."AND ProbandGender LIKE '".$valueObject->getProbandGender()."%' ";
          }

          if ($valueObject->getProbandDoB() != "") {
              if ($first) { $first = false; }
              $sql = $sql."AND ProbandDoB = '".$valueObject->getProbandDoB()."' ";
          }


          $sql = $sql."ORDER BY ID ASC ";

          // Prevent accidential full table results.
          // Use loadAll if all rows must be returned.
          if ($first)
               return array();

          $searchResults = $this->listQuery($conn, $sql);

          return $searchResults;
    }


    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    function getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }


    /**
     * databaseUpdate-method. This method is a helper method for internal use. It will execute
     * all database handling that will change the information in tables. SELECT queries will
     * not be executed here however. The return value indicates how many rows were affected.
     * This method will also make sure that if cache is used, it will reset when data changes.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     */
    function databaseUpdate(&$conn, &$sql) {

          $result = $conn->execute($sql);

          return $result;
    }



    /**
     * databaseQuery-method. This method is a helper method for internal use. It will execute
     * all database queries that will return only one row. The resultset will be converted
     * to valueObject. If no rows were found, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     * @param valueObject  Class-instance where resulting data will be stored.
     */
    function singleQuery(&$conn, &$sql, &$valueObject) {

          $result = $conn->execute($sql);

          if ($row = $conn->nextRow($result)) {

                   $valueObject->setID($row[0]); 
                   $valueObject->setCandID($row[1]); 
                   $valueObject->setPSCID($row[2]); 
                   $valueObject->setExternalID($row[3]); 
                   $valueObject->setDoB($row[4]); 
                   $valueObject->setEDC($row[5]); 
                   $valueObject->setGender($row[6]); 
                   $valueObject->setCenterID($row[7]); 
                   $valueObject->setProjectID($row[8]); 
                   $valueObject->setEthnicity($row[9]); 
                   $valueObject->setActive($row[10]); 
                   $valueObject->setDate_active($row[11]); 
                   $valueObject->setRegisteredBy($row[12]); 
                   $valueObject->setUserID($row[13]); 
                   $valueObject->setDate_registered($row[14]); 
                   $valueObject->setFlagged_caveatemptor($row[15]); 
                   $valueObject->setFlagged_reason($row[16]); 
                   $valueObject->setFlagged_other($row[17]); 
                   $valueObject->setFlagged_other_status($row[18]); 
                   $valueObject->setTestdate($row[19]); 
                   $valueObject->setEntity_type($row[20]); 
                   $valueObject->setProbandGender($row[21]); 
                   $valueObject->setProbandDoB($row[22]); 
          } else {
               //print " Object Not Found!";
               return false;
          }
          return true;
    }


    /**
     * databaseQuery-method. This method is a helper method for internal use. It will execute
     * all database queries that will return multiple rows. The resultset will be converted
     * to the List of valueObjects. If no rows were found, an empty List will be returned.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     */
    function listQuery(&$conn, &$sql) {

          $searchResults = array();
          $result = $conn->execute($sql);

          while ($row = $conn->nextRow($result)) {
               $temp = $this->createValueObject();

               $temp->setID($row[0]); 
               $temp->setCandID($row[1]); 
               $temp->setPSCID($row[2]); 
               $temp->setExternalID($row[3]); 
               $temp->setDoB($row[4]); 
               $temp->setEDC($row[5]); 
               $temp->setGender($row[6]); 
               $temp->setCenterID($row[7]); 
               $temp->setProjectID($row[8]); 
               $temp->setEthnicity($row[9]); 
               $temp->setActive($row[10]); 
               $temp->setDate_active($row[11]); 
               $temp->setRegisteredBy($row[12]); 
               $temp->setUserID($row[13]); 
               $temp->setDate_registered($row[14]); 
               $temp->setFlagged_caveatemptor($row[15]); 
               $temp->setFlagged_reason($row[16]); 
               $temp->setFlagged_other($row[17]); 
               $temp->setFlagged_other_status($row[18]); 
               $temp->setTestdate($row[19]); 
               $temp->setEntity_type($row[20]); 
               $temp->setProbandGender($row[21]); 
               $temp->setProbandDoB($row[22]); 
               array_push($searchResults, $temp);
          }

          return $searchResults;
    }
}


<?php
/**
 * This file contains the VisitController class.
 *
 * PHP Version 7
 *
 * @category Controller
 * @package  Visits
 * @author   Mélanie Legault <melanie.legault2@mcgill.ca>
 * @license  http://www.gnu.org/licenses/gpl-3.0.txt GPLv3
 * @link     https://www.github.com/aces/Loris/
 */

namespace LORIS;

/**
 * Base class that contains method to access the visit of projects
 *
 * @category Controller
 * @package  Visits
 * @author   Mélanie Legault <melanie.legault2@mcgill.ca>
 * @license  http://www.gnu.org/licenses/gpl-3.0.txt GPLv3
 * @link     https://www.github.com/aces/Loris/
 */
class VisitController
{
    /**
     * Array holding existing instances
     *
     * @var array
     */
    private static $_instances = [];

    /**
     * The database connection to use
     *
     * @var \Database
     */
    protected $database;

    /**
     * The constructor
     *
     * @param \Database $database The database connection to use
     */
    public function __construct(\Database $database)
    {
        if (!$database->isConnected()) {
            throw new \RuntimeException("VisitController - Database not connected");
        }
        $this->database = $database;
    }

    /**
     * This returns a single Visit object for the given
     * visit name (formerly known as visit_label), and will only ever instantiate
     * one object in the event that it's called multiple times.
     *
     * @param string $visitName The name of the visit
     *
     * @note This should be used by the NDB_Factory and not be called
     * directly
     *
     * @return \LORIS\Visit the Visit object
     */
    public function getVisitByName($visitName) : \LORIS\Visit
    {
        if (!isset(self::$_instances[$visitName])) {
            $visitData = $this->database->pSelectRow(
                "SELECT
                    VisitID,
                    VisitName,
                    VisitLabel,
                    WindowMinDays,
                    WindowMaxDays,
                    OptimumMinDays,
                    OptimumMaxDays,
                    WindowMidpointDays
                FROM visit v
                    JOIN Visit_Windows vw ON (v.VisitName=vw.Visit_label)
                WHERE v.VisitName = :vname",
                ['vname' => $visitName]
            );

            if (empty($visitData)) {
                throw new \NotFound("No visit named $visitName found.");
            }

            $visit = new \LORIS\Visit(
                intval($visitData["VisitID"]),
                $visitData["VisitName"],
                $visitData["VisitLabel"],
                intval($visitData["WindowMinDays"]),
                intval($visitData["WindowMaxDays"]),
                intval($visitData["OptimumMinDays"]),
                intval($visitData["OptimumMaxDays"]),
                intval($visitData["WindowMidpointDays"]),
            );

            self::$_instances[$visitName] = $visit;
        }

        return self::$_instances[$visitName];
    }

    /**
     * Get a visit object from the ID by mapping the ID to a name and using the
     * singleton function
     *
     * @param int $visitID The ID of the visit requested
     *
     * @return \LORIS\Visit
     */
    public function getVisitByID(int $visitID) : \LORIS\Visit
    {
        $visitName = $this->database->pSelectOne(
            "SELECT
              VisitName
            FROM
              visit
            WHERE VisitID = :vid
            ",
            ['vid' => $visitID]
        );

        if (empty($visitName)) {
            throw new \NotFound("No visit with ID: $visitID");
        }

        return $this->getVisitByName($visitName);
    }

    /**
     * Create a new visit and insert it into the database.
     *
     * @param \LORIS\Visit $visit A visit object without the ID
     *
     * @return \LORIS\Visit The created Visit with it's new ID
     */
    public function createVisit(\LORIS\Visit $visit) : \LORIS\Visit
    {
        if (!empty($visit->getID())) {
            throw new \LorisException(
                "An ID can not be supplied when creating a new visit, the ID
                will be generated by the database."
            );
        }
        $visitExists = $this->database->pselectOne(
            "SELECT VisitName FROM visit WHERE visitName=:vname",
            ['vname' => $visit->getName()]
        );
        if (!empty($visitExists)) {
            throw new \LorisException(
                "A visit with the same name ".$visit->getName()." already exists"
            );
        }

        // Update visit table
        $this->database->insert(
            'visit',
            [
                'VisitName'  => $visit->getName(),
                'VisitLabel' => $visit->getLabel(),
            ]
        );

        // Update Visit_Windows table
        $this->database->insert(
            'Visit_Windows',
            [
                'Visit_label'        => $visit->getName(),
                'WindowMinDays'      => $visit->getWindowMinDays(),
                'WindowMaxDays'      => $visit->getWindowMaxDays(),
                'OptimumMinDays'     => $visit->getOptimumMinDays(),
                'OptimumMaxDays'     => $visit->getOptimumMaxDays(),
                'WindowMidpointDays' => $visit->getWindowMidpointDays(),
            ]
        );

        return $this->getVisitByName($visit->getName());
    }

    /**
     * Update an existing visit in the database.
     *
     * @param \LORIS\Visit $visit The visit object to update
     *
     * @return \LORIS\Visit The updated Visit
     */
    public function updateVisit(\LORIS\Visit $visit) : \LORIS\Visit
    {
        // Name and ID are immutable, verify they match the database values
        $visitDBID = $this->database->pselectOne(
            "SELECT VisitID FROM visit WHERE visitName=:vname",
            ['vname' => $visit->getName()]
        );
        if (empty($visitExists)) {
            throw new \LorisException(
                "The queried visit ".$visit->getName()." does not exist exists."
            );
        }
        if ($visit->getID() !== $visitDBID) {
            throw new \LorisException(
                "The supplied visit name and ID do not match database records."
            );
        }

        // Update visit table
        $this->database->update(
            'visit',
            [
                'VisitLabel' => $visit->getLabel(),
            ],
            ['VisitName'  => $visit->getName()]
        );

        // Update Visit_Windows table
        $this->database->update(
            'Visit_Windows',
            [
                'WindowMinDays'      => $visit->getWindowMinDays(),
                'WindowMaxDays'      => $visit->getWindowMaxDays(),
                'OptimumMinDays'     => $visit->getOptimumMinDays(),
                'OptimumMaxDays'     => $visit->getOptimumMaxDays(),
                'WindowMidpointDays' => $visit->getWindowMidpointDays(),
            ],
            ['Visit_label'        => $visit->getName()]
        );

        return $this->getVisitByName($visit->getName());
    }

    /**
     * Load the ProjectCohortIDs associated with the provided visit into the
     * visit object.
     *
     * @param Visit $visit Visit for which the ProjectCohort associations will
     *                     be loaded
     *
     * @return Visit Visit loaded with ProjectCohorts
     */
    public function loadProjectCohortIDs(\LORIS\Visit $visit) : \LORIS\Visit
    {
        $result = $this->database->pselectCol(
            "SELECT ProjectCohortRelID
            FROM visit_project_cohort_rel
            WHERE VisitID=:vid",
            ["vid" => $visit->getID()]
        );
        $visit->setProjectCohortIDs($result);

        return $visit;
    }

    /**
     * Retruns a list of configured Visits
     *
     * @return array The list of visits
     */
    public function getAllVisits(): array
    {
        return array_map(
            function ($row) {
                return new \LORIS\Visit(
                    intval($row['VisitID']),
                    $row['VisitName'],
                    $row['VisitLabel'],
                    intval($row['WindowMinDays']),
                    intval($row['WindowMaxDays']),
                    intval($row['OptimumMinDays']),
                    intval($row['OptimumMaxDays']),
                    intval($row['WindowMidpointDays']),
                );
            },
            $this->database->pselect(
                'SELECT
                    VisitID,
                    VisitName,
                    VisitLabel,
                    WindowMinDays,
                    WindowMaxDays,
                    OptimumMinDays,
                    OptimumMaxDays,
                    WindowMidpointDays
                FROM visit v
                    JOIN Visit_Windows vw ON (v.VisitName=vw.Visit_label)
                ORDER BY VisitName
                ',
                []
            )
        );
    }

    /**
     * Returns a list of configured Visits and their association with projects
     * and cohorts
     *
     * @return array The list of visits, projectID and cohortID
     */
    public function getVisitsProjectsCohorts(): array
    {
        return array_map(
            function ($row) {
                return [
                    new \LORIS\Visit(
                        intval($row['VisitID']),
                        $row['VisitName'],
                        $row['VisitLabel'],
                        intval($row['WindowMinDays']),
                        intval($row['WindowMaxDays']),
                        intval($row['OptimumMinDays']),
                        intval($row['OptimumMaxDays']),
                        intval($row['WindowMidpointDays']),
                    ),
                    $row['project'],    // will be modified to object when
                    $row['cohort'], // available
                ];
            },
            $this->database->pselect(
                'SELECT
                  VisitID,
                  VisitName,
                  VisitLabel,
                  WindowMinDays,
                  WindowMaxDays,
                  OptimumMinDays,
                  OptimumMaxDays,
                  WindowMidpointDays,
                  psr.ProjectID as "project",
                  psr.CohortID as "cohort"
                 FROM
                  visit v
                 JOIN
                  visit_project_cohort_rel vps
                 ON v.VisitID = vps.VisitID
                 JOIN
                  project_cohort_rel psr
                 ON vps.ProjectCohortRelID = psr.ProjectCohortRelID
                ORDER BY ID, project, cohort
                ',
                []
            )
        );
    }

    /**
     * Check if a visit already exists in the DB
     *
     * @param string $visitName Name of the visit
     *
     * @return bool
     */
    public function visitExists(string $visitName)
    {
        $visit = $this->database->pselectOne(
            "SELECT VisitID FROM visit WHERE VisitName=:vname",
            ["vname"=>$visitName]
        );

        if (empty($visit)) {
            return false;
        }
        return true;
    }

    /**
     * Add an association between the supplied visit and ProjectCohortID
     * to the visit_project_cohort_rel table of the database
     *
     * @param \LORIS\Visit $visit Visit object to add association to
     * @param int          $PSRID ProjectCohortRelID to be added
     *
     * @return void
     */
    public function addProjectCohort(\LORIS\Visit $visit, int $PSRID)
    {
        $this->database->insert(
            "visit_project_cohort_rel",
            ["ProjectCohortRelID"=>$PSRID, "VisitID"=>$visit->getID()]
        );
    }

    /**
     * Remove an association between the supplied visit and ProjectCohortID
     * to the visit_project_cohort_rel table of the database
     *
     * @param \LORIS\Visit $visit Visit object to add association to
     * @param int          $PSRID ProjectCohortRelID to be added
     *
     * @return void
     */
    public function removeProjectCohort(\LORIS\Visit $visit, int $PSRID)
    {
        $this->database->delete(
            "visit_project_cohort_rel",
            ["ProjectCohortRelID"=>$PSRID, "VisitID"=>$visit->getID()]
        );
    }

}

name: LORIS Test Suite
on:
  - push
  - pull_request
env:
  EEG_VIS_ENABLED: "true"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{github.repository}}

jobs:
  raisinbreaddb:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    outputs:
      raisinbreadhash: ${{ steps.rbhash.outputs.rbhash}}
      raisinbreadimage: ${{ steps.rblower.outputs.lowercase}}
    steps:
      - uses: actions/checkout@v2
      - name: Calculate Raisinbread DB Hash
        id: rbhash
        run: >
          hash=`sha256sum SQL/0000-00-0* raisinbread/RB_files/*.sql
          raisinbread/instruments/instrument_sql/*.sql | sha256sum | cut -c1-64`

          echo "rbhash=$hash" >> $GITHUB_OUTPUT

      - name: Lower case image name
        id: rblower
        run: |
          name=`tr [:upper:] [:lower:] <<< ${{env.REGISTRY }}/${{env.IMAGE_NAME}}:raisinbreaddb-${{ steps.rbhash.outputs.rbhash }}`
          echo "lowercase=$name" >> $GITHUB_OUTPUT

      - name: Check if image already exists
        id: imagecheck
        run: |
          if [ "$(docker pull ${{steps.rblower.outputs.lowercase}})" ]; then
              echo "alreadybuilt=1" >> $GITHUB_OUTPUT
          else 
              echo "alreadybuilt=0" >> $GITHUB_OUTPUT
          fi

      - name: Log in to the Container registry
        if: ${{ steps.imagecheck.outputs.alreadybuilt == false}}
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Docker image
        if: ${{ steps.imagecheck.outputs.alreadybuilt == false}}
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: ${{steps.rblower.outputs.lowercase}}
          file: Dockerfile.test.raisinbread.db
      - name: Push Docker Image
        if: ${{ steps.imagecheck.outputs.alreadybuilt == false}}
        run: docker push ${{steps.rblower.outputs.lowercase}}
  api:
    runs-on: ubuntu-latest
    needs: raisinbreaddb
    env:
      DB_DATABASE: LorisTest
      DB_USER: SQLTestUser
      DB_PASSWORD: TestPassword
      LORIS_DB_CONFIG: project/config.xml
      DOCKER_WEB_SERVER: http://localhost:8000/
      RBHASH: ${{needs.raisinbreaddb.outputs.raisinbreadhash}}
      RBIMAGE: ${{needs.raisinbreaddb.outputs.raisinbreadimage}}
    strategy:
        fail-fast: false
        matrix:
            php: ['8.1','8.2']
            apiversion: ['v0.0.3', 'v0.0.4-dev']
    steps:
    - uses: actions/checkout@v2

    - name: Start Raisinbread database
      run: docker run -d -p :3306:3306 ${{env.RBIMAGE}}

    - name: Create SQL User
      run: |
        sleep 3
        mysql -e "CREATE USER '${{env.DB_USER}}'@'localhost' IDENTIFIED BY '${{env.DB_PASSWORD}}'" -uroot -proot --port=3306 --host=localhost --protocol=TCP
        mysql -e "GRANT UPDATE,INSERT,SELECT,DELETE,CREATE TEMPORARY TABLES ON ${{env.DB_DATABASE}}.* TO '${{env.DB_USER}}'@'localhost'" -uroot -proot --port=3306 --host=localhost --protocol=TCP


    - name: Setup project/ directory
      run: |
        mkdir -p project/instruments
        cp test/config.xml project/config.xml
        cp test/test_instrument/NDB_BVL_Instrument_testtest.class.inc project/instruments/
        cp -r raisinbread/instruments/* project/instruments/
        sed -i 's/<sandbox>1<\/sandbox>/<sandbox>0<\/sandbox>/g' project/config.xml
        sed -i 's/<adminUser>SQLTestUser<\/adminUser>/<adminUser>root<\/adminUser>/g' project/config.xml
        sed -i 's/<adminPassword>TestPassword<\/adminPassword>/<adminPassword>root<\/adminPassword>/g' project/config.xml
        sed -i 's/<host>db<\/host>/<host>127.0.0.1<\/host>/g' project/config.xml
        cat project/config.xml

    - name: Set LORIS base path
      run: |
        echo UPDATE Config SET VALUE=\'`pwd`/\' WHERE ConfigID IN \(SELECT ID FROM ConfigSettings WHERE Name=\'base\'\)
        echo UPDATE Config SET VALUE=\'`pwd`/\' WHERE ConfigID IN \(SELECT ID FROM ConfigSettings WHERE Name=\'base\'\) | mysql ${{env.DB_DATABASE}} -uroot -proot --port=3306 --host=localhost --protocol=TCP

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php }}
        extensions: zip, php-ast

    - name: Validate composer.json and composer.lock
      run: composer validate

    - name: Cache Composer packages
      id: composer-cache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"

    - name: Composer cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install package dependencies
      # We only need to install protobuf-compiler
      # Other deps were added to fix an apt dependency issue introduced by a new github Ubuntu image
      # (see https://github.com/actions/runner-images/blob/releases/ubuntu22/20230305/images/linux/Ubuntu2204-Readme.md)
      # that updated the list of installed apt packages/apt repositories. That issue may disappear in future Ubuntu images.
      run: |
        sudo apt install -y imagemagick-6-common libmagickcore-6.q16-6 libmagickwand-6.q16-6 \
                            libprotobuf-dev libprotobuf23 libprotoc23 protobuf-compiler
        cd modules/electrophysiology_browser/jsx/react-series-data-viewer/
        protoc protocol-buffers/chunk.proto --js_out=import_style=commonjs,binary:./src/

    - name: Install composer dependencies
      if: steps.composer-cache.outputs.cache-hit != 'true'
      run: composer install --prefer-dist --no-progress --no-suggest

    - name: Build LORIS
      run: make dev

    - name: Start PHP Web Server
      run: php -S localhost:8000 -t htdocs/ htdocs/router.php 2>error_log &

    - name: Test server
      run: |
           sleep 1
           curl -v http://localhost:8000


    - name: Run Test Suite
      run: |
          vendor/bin/phpunit --configuration test/phpunit.xml --testsuite LorisAPITests --group api-${{ matrix.apiversion }}

    - name: Print Error Logs
      if: always()
      run: cat error_log

  docker:
    runs-on: ubuntu-latest
    strategy:
        fail-fast: false
        matrix:
            testsuite: ['integration']
            php: ['8.1','8.2']
            ci_node_index: [0,1,2,3]

            include:
            # add a variable but do not display it in the job's name
            - ci_node_total: 4

            - testsuite: 'static'
              php: '8.1'
            - testsuite: 'static'
              php: '8.2'
            - testsuite: 'unit'
              php: '8.1'
            - testsuite: 'unit'
              php: '8.2'

    steps:
    - uses: actions/checkout@v2

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php }}
        extensions: zip, php-ast

    - name: Validate composer.json and composer.lock
      run: composer validate

    - name: Cache Composer packages
      id: composer-cache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"

    - name: Composer cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Change PHP Version in Dockerfile
      run: sed -i "s/8.0/${{ matrix.php }}/g" Dockerfile.test.php8

    - name: Install package dependencies
      # We only need to install protobuf-compiler
      # Other deps were added to fix an apt dependency issue introduced by a new github Ubuntu image
      # (see https://github.com/actions/runner-images/blob/releases/ubuntu22/20230305/images/linux/Ubuntu2204-Readme.md)
      # that updated the list of installed apt packages/apt repositories. That issue may disappear in future Ubuntu images.
      run: |
        sudo apt install -y imagemagick-6-common libmagickcore-6.q16-6 libmagickwand-6.q16-6 \
                            libprotobuf-dev libprotobuf23 libprotoc23 protobuf-compiler
        cd modules/electrophysiology_browser/jsx/react-series-data-viewer/
        protoc protocol-buffers/chunk.proto --js_out=import_style=commonjs,binary:./src/

    - name: Install composer dependencies
      if: steps.composer-cache.outputs.cache-hit != 'true'
      run: composer install --prefer-dist --no-progress --no-suggest

    - name: Build LORIS
      run: make dev

    - name: Run Test Suite
      run: |
          # set sandbox to 1 before running the tests
          # since some tests only run in sandbox environments
          sed -i 's/<sandbox>0<\/sandbox>/<sandbox>1<\/sandbox>/g' test/config.xml
          npm run tests:${{ matrix.testsuite }}
      env:
          # Specifies how many jobs you would like to run in parallel,
          CI_NODE_TOTAL: ${{ matrix.ci_node_total }}
          # Use the index from matrix as an environment variable
          CI_NODE_INDEX: ${{ matrix.ci_node_index }}

name: LORIS Test Suite

on:
  - push
  - pull_request

jobs:
  buildjs:
    env:
      EEG_VIS_ENABLED: 'true'
    runs-on: ubuntu-latest
    steps: 
      - uses: actions/checkout@v4
      - name: Install protoc-gen-js plugin
        run: npm install -g protoc-gen-js
      - name: Install EEG package dependencies
        run: |
          sudo apt install -y imagemagick-6-common libmagickcore-6.q16-7t64 libmagickwand-6.q16-7t64 \
             libprotobuf-dev libprotobuf32t64 libprotoc32t64 protobuf-compiler
          cd modules/electrophysiology_browser/jsx/react-series-data-viewer/
          protoc protocol-buffers/chunk.proto --js_out=import_style=commonjs,binary:./src/
      - name: Install other package dependencies
        run: sudo apt install -y gettext
      - name: Install npm modules
        run: npm ci
      - name: Generate LORIS locales
        run: make locales
      - name: Compile LORIS javascript
        run: npm run compile
      - name: Create LORIS JS tarball
        run: tar cfvz lorisjs.tar.gz htdocs/js/components/ modules/*/js/*
      - name: Create node_modules tarball
        run: tar cfvz node_modules.tar.gz node_modules
      - uses: actions/upload-artifact@v4
        name: Upload node_modules artifact
        with:
          name: node_modules
          path: node_modules.tar.gz
      - uses: actions/upload-artifact@v4
        name: Upload lorisjs.tar.gz artifact
        with:
          name: lorisjs
          path: lorisjs.tar.gz

  buildphp:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php: ['8.3', '8.4']
    steps:
      - uses: actions/checkout@v4
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: zip, php-ast
      - name: Validate composer.json and composer.lock
        run: composer validate
      - name: Cache Composer packages
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Composer cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Install composer dependencies
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: composer install --prefer-dist --no-progress --no-suggest
      - name: Create vendor tarball
        run: tar cfvz vendor-php${{matrix.php}}.tar.gz vendor
      - uses: actions/upload-artifact@v4
        name: Upload vendor-php${{matrix.php}}.tar.gz artifact
        with:
          name: vendor-php${{matrix.php}}
          path: vendor-php${{matrix.php}}.tar.gz

  api:
    runs-on: ubuntu-latest
    needs:
      - buildjs
      - buildphp 
    env:
      DB_DATABASE: LorisTest
      DB_USER: SQLTestUser
      DB_PASSWORD: TestPassword
      LORIS_DB_CONFIG: project/config.xml
      DOCKER_WEB_SERVER: http://localhost:8000/
    strategy:
      fail-fast: false
      matrix:
        php: ['8.3', '8.4']
        apiversion: ['v0.0.3', 'v0.0.4-dev']
    steps:
      # unchanged from your original api job ...
      # (keeping same MySQL setup steps)

  docker:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        testsuite: ['integration']
        php: ['8.3', '8.4']
        ci_node_index: [0,1,2,3]
        include:
          - ci_node_total: 4
          - testsuite: 'static'
            php: '8.3'
          - testsuite: 'unit'
            php: '8.3'
          - testsuite: 'static'
            php: '8.4'
          - testsuite: 'unit'
            php: '8.4'

    steps:
      - uses: actions/checkout@v4
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: zip, php-ast
      - name: Validate composer.json and composer.lock
        run: composer validate
      - name: Cache Composer packages
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Composer cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Change PHP Version in Dockerfile
        run: sed -i "s/8.0/${{ matrix.php }}/g" Dockerfile.test.php8
      - name: Install protoc-gen-js plugin
        run: npm install -g protoc-gen-js
      - name: Install package dependencies
        run: |
          sudo apt install -y imagemagick-6-common libmagickcore-6.q16-7t64 libmagickwand-6.q16-7t64 \
             libprotobuf-dev libprotobuf32t64 libprotoc32t64 protobuf-compiler gettext
          cd modules/electrophysiology_browser/jsx/react-series-data-viewer/
          protoc protocol-buffers/chunk.proto --js_out=import_style=commonjs,binary:./src/
      - name: Install composer dependencies
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: composer install --prefer-dist --no-progress --no-suggest
      - name: Build LORIS
        run: make dev

      # Start containers
      - name: Start containers
        run: docker compose up -d

      # Stream MariaDB logs live during startup
      - name: Show MariaDB logs while starting
        run: docker compose logs -f db &
      
      - name: Run Test Suite
        run: |
          sed -i 's/<sandbox>0<\/sandbox>/<sandbox>1<\/sandbox>/g' test/config.xml
          npm run tests:${{ matrix.testsuite }}
        env:
          CI_NODE_TOTAL: ${{ matrix.ci_node_total }}
          CI_NODE_INDEX: ${{ matrix.ci_node_index }}

      # Always show DB logs at end for debugging
      - name: Show MariaDB logs (final dump)
        if: always()
        run: docker compose logs db


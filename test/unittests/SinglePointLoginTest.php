<?php
/**
 * SinglePointLogin tests
 *
 * PHP Version 5
 *
 * @category Tests
 * @package  Test
 * @author   Dave MacFarlane <david.macfarlane2@mcgill.ca>
 * @license  http://www.gnu.org/licenses/gpl-3.0.txt GPLv3
 * @link     https://www.github.com/aces/Loris/
 */

require_once __DIR__ . '/../../vendor/autoload.php';
use PHPUnit\Framework\TestCase;

/**
 * Unit test for SinglePointLogin class
 *
 * @category Tests
 * @package  Test
 * @author   Dave MacFarlane <david.macfarlane2@mcgill.ca>
 * @license  http://www.gnu.org/licenses/gpl-3.0.txt GPLv3
 * @link     https://www.github.com/aces/Loris/
 */
class SinglePointLoginTest extends TestCase
{
    private $login;

    protected function setUp()
    {
        $Factory = NDB_Factory::singleton();
        $Factory->setTesting(true);
        $mockdb = $this->getMockBuilder("\Database")->getMock();
        $mockconfig = $this->getMockBuilder("\NDB_Config")->getMock();

        $this->_configMap = array(
            array(
                'JWTKey',
                "example_key"
            ),
        );
          
         $mockconfig->method('getSetting')
         ->will($this->returnValueMap($this->_configMap));
        $Factory->setConfig($mockconfig);
        $Factory->setDatabase($mockdb);

        $method = array('JWTAuthenticate', 'PasswordAuthenticate', 'authenticate');
        $AllMethods = get_class_methods('SinglePointLogin');
        $exceptMethod = array_diff($AllMethods, $method);
        $this->login = $this->getMockBuilder('SinglePointLogin')->setMethods($exceptMethod)->getMock();

    }

    function testJWTAuthenticateReturnsTrueForValidToken() {
        // Encoded token for
        // {
        //   "sub": "1234567890",
        //   "user": "UnitTester"
        // }
        // Generated by jwt.io
        $token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwidXNlciI6IlVuaXRUZXN0ZXIifQ.7ehZPgCqOxMfJChi8qn8ZmtfLTlxZmIsrpQLuN3LEEY";

        $this->assertTrue($this->login->JWTAuthenticate($token));

    }

    function testJWTAuthenticateFailsWithInvalidSignature() {
        // Same token as testJWTAuthenticateReturnsTrueForValidToken, except with the payload
        // changed to 
        // {
        //   "sub": "1234567890",
        //   "user": "UnitTester2"
        // }
        // and the signature not changed
        $token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwidXNlciI6IlVuaXRUZXN0ZXIyIn0.7ehZPgCqOxMfJChi8qn8ZmtfLTlxZmIsrpQLuN3LEEY";

        $this->assertFalse($this->login->JWTAuthenticate($token));
    }

    function testJWTAuthenticateFailsWithAlgorithmNone() {
        $token = "eyJhbGciOiJOb25lIiwidHlwIjoiSldUIn0.eyJzdWIiOiIxMjM0NTY3ODkwIiwidXNlciI6IlVuaXRUZXN0ZXIyIn0.ac6UpRubGFg27ALCXBGRCXTjNMi_BxJJqrcCdPdKmuk";
        $this->assertFalse($this->login->JWTAuthenticate($token));
    }

    function testJWTAuthenticateFailsWithExpiredToken() {
        // Valid token with payload
        // {
        //   "sub": "1234567890",
        //   "exp" : "5",
        //   "user": "UnitTester"
        // }
        $token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwiZXhwIjoiNSIsInVzZXIiOiJVbml0VGVzdGVyIn0.oOlr8TmPchulpIOu7N4mzS1UolOIUiLmTXZhAkyrKs4";
        $this->assertFalse($this->login->JWTAuthenticate($token));
    }
}

?>

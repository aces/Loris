!function(e){function t(s){if(n[s])return n[s].exports;var i=n[s]={exports:{},id:s,loaded:!1};return e[s].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}({0:function(e,t,n){n(1)(n(21))},1:function(e,t){e.exports=function(e){"undefined"!=typeof execScript?execScript(e):eval.call(null,e)}},21:function(e,t){e.exports='/**\n *  The following file contains the components used for the field select tab\n *\n *  @author   Jordan Stirling <jstirling91@gmail.com>\n *  @author   Dave MacFarlane <david.macfarlane2@mcgill.ca>\n *  @license  http://www.gnu.org/licenses/gpl-3.0.txt GPLv3\n *  @link     https://github.com/mohadesz/Loris-Trunk\n */\n\n/*\n *  The following component is used for displaying individual categories in the\n *  categories list\n */\nCategoryItem = React.createClass({\n    displayName: "CategoryItem",\n\n    render: function render() {\n        var classList = "list-group-item",\n            badge = \'\';\n        if (this.props.selected) {\n            classList += " active";\n        }\n        if (this.props.count >= 0) {\n            badge = React.createElement(\n                "span",\n                { className: "badge" },\n                this.props.count\n            );\n        }\n        return React.createElement(\n            "a",\n            { href: "#", className: classList, onClick: this.props.onClick },\n            this.props.name,\n            badge\n        );\n    }\n});\n\n/*\n *  The following component is used for displaying the list of availible categories\n */\nCategoryList = React.createClass({\n    displayName: "CategoryList",\n\n    getInitialState: function getInitialState() {\n        return {\n            selectedCategory: ""\n        };\n    },\n    selectCategoryHandler: function selectCategoryHandler(category) {\n        var that = this;\n        return function (evt) {\n            if (that.props.onCategorySelect) {\n                that.props.onCategorySelect(category);\n            }\n            that.setState({\n                selectedCategory: category\n            });\n        };\n    },\n    render: function render() {\n        var items = [],\n            selectClosure = function selectClosure(name) {\n            return this.selectCategory(name);\n        };\n        for (i = 0; i < this.props.items.length; i += 1) {\n            selected = false;\n            if (this.props.items[i].category == this.state.selectedCategory) {\n                selected = true;\n            }\n            items.push(React.createElement(CategoryItem, {\n                key: this.props.items[i].category,\n                name: this.props.items[i].category,\n                count: this.props.items[i].numFields,\n                selected: selected,\n                onClick: this.selectCategoryHandler(this.props.items[i].category) }));\n        }\n        return React.createElement(\n            "div",\n            { className: "list-group col-md-3 col-sm-12" },\n            items\n        );\n    }\n});\n\n/*\n *  The following component is used for displaying individual fields\n */\nFieldItem = React.createClass({\n    displayName: "FieldItem",\n\n    visitSelect: function visitSelect(evt) {\n        // Selects and deselects visits\n\n        var field = {\n            instrument: this.props.Category,\n            field: this.props.FieldName\n        };\n        if (evt.target.checked) {\n            this.props.fieldVisitSelect("check", evt.target.value, field);\n        } else {\n            this.props.fieldVisitSelect("uncheck", evt.target.value, field);\n        }\n    },\n    render: function render() {\n        // Renders the html for the component\n\n        var classList = "list-group-item row",\n            downloadIcon = "",\n            criteria,\n            multiselect,\n            that = this;\n        if (this.props.selected) {\n            // If field is selected, add active class and visits\n            classList += " active";\n            multiselect = Object.keys(this.props.Visits).map(function (visit) {\n                var checked = false;\n                if (that.props.selectedVisits[visit]) {\n                    checked = true;\n                }\n                return React.createElement(\n                    "div",\n                    { "class": "checkbox" },\n                    React.createElement(\n                        "label",\n                        null,\n                        React.createElement("input", { type: "checkbox", value: visit, checked: checked, onChange: that.visitSelect }),\n                        " ",\n                        visit\n                    )\n                );\n            });\n        }\n        if (this.props.downloadable) {\n            // Add download icon if field is downloadable\n            downloadIcon = React.createElement("span", { className: "glyphicon glyphicon-download-alt pull-right", title: "Downloadable File" });\n        }\n        // Don\'t display the category in the field selector\n        var displayName = this.props.FieldName;\n\n        return React.createElement(\n            "div",\n            { className: classList },\n            React.createElement(\n                "div",\n                { className: "col-xs-8", onClick: this.props.onClick },\n                React.createElement(\n                    "h4",\n                    { className: "list-group-item-heading col-xs-12" },\n                    displayName,\n                    criteria,\n                    downloadIcon\n                ),\n                React.createElement(\n                    "span",\n                    { className: "col-xs-12" },\n                    this.props.Description\n                )\n            ),\n            React.createElement(\n                "div",\n                { className: "col-xs-4" },\n                multiselect\n            )\n        );\n    }\n});\n\n/*\n *  The following component is used for displaying the list of availible fields for\n *  the selected category\n */\nFieldList = React.createClass({\n    displayName: "FieldList",\n\n    getInitialState: function getInitialState() {\n        return {\n            PageNumber: 1\n        };\n    },\n    onFieldClick: function onFieldClick(fieldName, downloadable) {\n        // Wrapper function used to update field\n        this.props.onFieldSelect(fieldName, this.props.category, downloadable);\n    },\n    changePage: function changePage(i) {\n        this.setState({\n            PageNumber: i\n        });\n    },\n    render: function render() {\n        // Renders the html for the component\n\n        var fields = [];\n        var items = this.props.items || [];\n        var fieldName, desc, isFile;\n        var rowsPerPage = this.props.FieldsPerPage || 20;\n\n        var start = (this.state.PageNumber - 1) * rowsPerPage;\n        var filter = this.props.Filter.toLowerCase();\n        var selectedFields;\n        if (filter > 0) {\n            start = 0;\n        }\n\n        // Display the fields using the FieldItem component\n        for (var i = start; i < items.length; i += 1) {\n            fieldName = items[i].key[1];\n            desc = items[i].value.Description;\n            type = items[i].value.Type || "varchar(255)";\n\n            if (fieldName.toLowerCase().indexOf(filter) == -1 && desc.toLowerCase().indexOf(filter) == -1) {\n                continue;\n            }\n\n            // Check if field is a file, if so set flag to true\n            isFile = false;\n            if (items[i].value.IsFile) {\n                isFile = true;\n            }\n\n            // Check if field is selected, if so set flag to true\n            selected = false;\n            if (this.props.selected && this.props.selected[fieldName]) {\n                selected = true;\n            }\n\n            // Get the fields selected visits, set to empty object if none\n            if (this.props.selected && this.props.selected[fieldName]) {\n                selectedFields = this.props.selected[fieldName];\n            } else {\n                selectedFields = {};\n            }\n\n            fields.push(React.createElement(FieldItem, { FieldName: fieldName,\n                Category: this.props.category,\n                Description: desc,\n                ValueType: type,\n                onClick: this.onFieldClick.bind(this, fieldName, isFile),\n                selected: selected,\n                downloadable: isFile,\n                Visits: this.props.Visits,\n                selectedVisits: selectedFields,\n                fieldVisitSelect: this.props.fieldVisitSelect\n            }));\n            if (fields.length > rowsPerPage) {\n                break;\n            }\n        }\n\n        return React.createElement(\n            "div",\n            { className: "list-group col-md-9 col-sm-12" },\n            fields,\n            React.createElement(PaginationLinks, { Total: items.length, Active: this.state.PageNumber, onChangePage: this.changePage, RowsPerPage: rowsPerPage })\n        );\n    }\n});\n\n/*\n *  The following component is the base component for the field select tan\n */\nFieldSelector = React.createClass({\n    displayName: "FieldSelector",\n\n    propTypes: {\n        selectedFields: React.PropTypes.array\n    },\n    getInitialState: function getInitialState() {\n        var instruments = {};\n        for (var i = 0; i < this.props.items.length; i++) {\n            instruments[this.props.items[i].category] = this.props.items[i].category;\n        }\n        return {\n            filter: "",\n            selectedCategory: "",\n            categoryFields: {},\n            instruments: instruments\n        };\n    },\n    onFieldSelect: function onFieldSelect(fieldName, category, downloadable) {\n        // Wrapper function for field changes\n        this.props.onFieldChange(fieldName, category, downloadable);\n    },\n    onCategorySelect: function onCategorySelect(category) {\n        // Used for getting the fields of the given category\n\n        var that = this;\n\n        // Use the cached version if it exists\n        if (this.state.categoryFields[category]) {} else {\n            // Retrieve the data dictionary\n            $.get(loris.BaseURL + "/AjaxHelper.php?Module=dataquery&script=datadictionary.php", { category: category }, function (data) {\n                var cf = that.state.categoryFields;\n                cf[category] = data;\n                that.setState({\n                    categoryFields: cf\n                });\n            }, \'json\');\n        }\n        this.setState({\n            selectedCategory: category\n        });\n    },\n    filterChange: function filterChange(evt) {\n        this.setState({\n            filter: evt.currentTarget.value\n        });\n    },\n    addAll: function addAll() {\n        // Adds all fields the currently selected category\n        var i, isFile, fieldName, category;\n        for (i in this.state.categoryFields[this.state.selectedCategory]) {\n            fieldName = this.state.categoryFields[this.state.selectedCategory][i].key[1];\n            category = this.state.categoryFields[this.state.selectedCategory][i].key[0];\n            if (this.props.selectedFields[category] && this.props.selectedFields[category][fieldName]) {\n                // Do nothing, already added\n            } else {\n                isFile = this.state.categoryFields[category][i].value.isFile ? true : false;\n                this.props.onFieldChange(fieldName, category, isFile);\n            }\n        }\n    },\n    deleteAll: function deleteAll() {\n        // Deletes all fields the currently selected category\n        var i, index, fieldName;\n        for (i in this.state.categoryFields[this.state.selectedCategory]) {\n            fieldName = this.state.categoryFields[this.state.selectedCategory][i].key[1];\n            category = this.state.categoryFields[this.state.selectedCategory][i].key[0];\n            if (this.props.selectedFields[category] && this.props.selectedFields[category][fieldName]) {\n                isFile = this.state.categoryFields[category][i].value.isFile ? true : false;\n                this.props.onFieldChange(fieldName, category, isFile);\n            }\n        }\n    },\n    modifyCategoryFieldVists: function modifyCategoryFieldVists(visit, action) {\n        if (this.state.selectedCategory && this.props.selectedFields[this.state.selectedCategory]) {\n            for (var field in this.props.selectedFields[this.state.selectedCategory]) {\n                if (field == "allVisits") {\n                    continue;\n                }\n                if (action == "check" && !this.props.selectedFields[this.state.selectedCategory][field][visit]) {\n                    this.props.fieldVisitSelect(action, visit, { "instrument": this.state.selectedCategory, "field": field });\n                } else if (action == "uncheck" && this.props.selectedFields[this.state.selectedCategory][field][visit]) {\n                    this.props.fieldVisitSelect(action, visit, { "instrument": this.state.selectedCategory, "field": field });\n                }\n            }\n        }\n    },\n    render: function render() {\n        // Renders the html for the component\n        var categoryVisits = {},\n            selectedFieldsCount;\n        if (this.state.selectedCategory != "") {\n            if (this.props.selectedFields[this.state.selectedCategory]) {\n                selectedFieldsCount = Object.keys(this.props.selectedFields[this.state.selectedCategory]).length - 1;\n            }\n            for (var key in this.props.Visits) {\n                if (this.props.selectedFields[this.state.selectedCategory] && this.props.selectedFields[this.state.selectedCategory].allVisits[key] && this.props.selectedFields[this.state.selectedCategory].allVisits[key] == selectedFieldsCount) {\n                    categoryVisits[key] = true;\n                } else {\n                    categoryVisits[key] = false;\n                }\n            }\n        }\n\n        return React.createElement(\n            "div",\n            null,\n            React.createElement(\n                "div",\n                { className: "row" },\n                React.createElement(\n                    "h1",\n                    { className: "col-md-8" },\n                    this.props.title\n                ),\n                React.createElement(\n                    "div",\n                    { className: "form-group col-sm-4 search" },\n                    React.createElement(\n                        "label",\n                        { className: "col-sm-12 col-md-4" },\n                        "Search within instrument:"\n                    ),\n                    React.createElement(\n                        "div",\n                        { className: "col-sm-12 col-md-8" },\n                        React.createElement("input", { type: "text", onChange: this.filterChange, className: "form-control input-sm" })\n                    )\n                )\n            ),\n            React.createElement(\n                "div",\n                { className: "row form-group" },\n                React.createElement(\n                    "div",\n                    { className: "col-md-8" },\n                    React.createElement(\n                        "button",\n                        { type: "button", className: "btn btn-primary", onClick: this.addAll },\n                        "Add All"\n                    ),\n                    React.createElement(\n                        "button",\n                        { type: "button", className: "btn btn-primary", onClick: this.deleteAll },\n                        "Remove All"\n                    )\n                )\n            ),\n            React.createElement(\n                "div",\n                { className: "row form-group" },\n                React.createElement(\n                    "div",\n                    { className: "form-group col-sm-8 search" },\n                    React.createElement(\n                        "label",\n                        { className: "col-sm-12 col-md-2" },\n                        "Instrument:"\n                    ),\n                    React.createElement(\n                        "div",\n                        { className: "col-sm-12 col-md-8" },\n                        React.createElement(SelectDropdown, {\n                            multi: false,\n                            options: this.state.instruments,\n                            onFieldClick: this.onCategorySelect,\n                            selectedCategory: this.state.selectedCategory\n                        })\n                    )\n                ),\n                React.createElement(\n                    "div",\n                    { className: "form-group col-sm-4 search" },\n                    React.createElement(\n                        "label",\n                        { className: "col-sm-12 col-md-4" },\n                        "Visits:"\n                    ),\n                    React.createElement(\n                        "div",\n                        { className: "col-sm-12 col-md-8" },\n                        React.createElement(SelectDropdown, {\n                            multi: true,\n                            options: categoryVisits,\n                            onFieldClick: this.modifyCategoryFieldVists\n                        })\n                    )\n                )\n            ),\n            React.createElement(\n                "div",\n                { className: "row" },\n                React.createElement(FieldList, {\n                    items: this.state.categoryFields[this.state.selectedCategory],\n                    category: this.state.selectedCategory,\n                    Criteria: this.props.Criteria,\n                    onFieldSelect: this.onFieldSelect,\n                    FieldsPerPage: "15",\n                    selected: this.props.selectedFields[this.state.selectedCategory],\n                    Filter: this.state.filter,\n                    Visits: this.props.Visits,\n                    fieldVisitSelect: this.props.fieldVisitSelect\n                })\n            )\n        );\n    }\n});'}});
!function(t){function e(r){if(n[r])return n[r].exports;var a=n[r]={exports:{},id:r,loaded:!1};return t[r].call(a.exports,a,a.exports,e),a.loaded=!0,a.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}({0:function(t,e,n){n(1)(n(22))},1:function(t,e){t.exports=function(t){"undefined"!=typeof execScript?execScript(t):eval.call(null,t)}},22:function(t,e){t.exports='/**\n *  The following file contains the components used for the filter builder tab\n *\n *  @author   Jordan Stirling <jstirling91@gmail.com>\n *  @license  http://www.gnu.org/licenses/gpl-3.0.txt GPLv3\n *  @link     https://github.com/mohadesz/Loris-Trunk\n */\n\n/*\n *  The following component is used for displaying operator for the group component\n */\nLogicOperator = React.createClass({\n\tdisplayName: "LogicOperator",\n\n\tchangeOperator: function changeOperator(op) {\n\t\t// Wrapper function updating operator\n\t\tthis.props.updateGroupOperator(op);\n\t},\n\trender: function render() {\n\t\t// Renders the html for the component\n\n\t\tvar andClass = "btn",\n\t\t    orClass = "btn";\n\n\t\t// Set operator to OR if logicOperator is 1, AND otherwise\n\t\tif (this.props.logicOperator === 1) {\n\t\t\torClass += " btn-primary";\n\t\t\tandClass += " switch";\n\t\t} else {\n\t\t\tandClass += " btn-primary";\n\t\t\torClass += " switch";\n\t\t}\n\t\treturn React.createElement(\n\t\t\t"div",\n\t\t\t{ className: "btn-group", role: "group" },\n\t\t\tReact.createElement(\n\t\t\t\t"button",\n\t\t\t\t{ type: "button", className: andClass, onClick: this.changeOperator.bind(this, 0) },\n\t\t\t\t"And"\n\t\t\t),\n\t\t\tReact.createElement(\n\t\t\t\t"button",\n\t\t\t\t{ type: "button", className: orClass, onClick: this.changeOperator.bind(this, 1) },\n\t\t\t\t"Or"\n\t\t\t)\n\t\t);\n\t}\n});\n\n/*\n *  The following component is used for displaying a filter rule\n */\nFilterRule = React.createClass({\n\tdisplayName: "FilterRule",\n\n\tgetInitialState: function getInitialState() {\n\t\treturn {\n\t\t\toperators: {\n\t\t\t\t// "enum" : {\n\t\t\t\t"equal": "=",\n\t\t\t\t"notEqual": "!=",\n\t\t\t\t"lessThanEqual": "<=",\n\t\t\t\t"greaterThanEqual": ">=",\n\t\t\t\t"startsWith": "startsWith",\n\t\t\t\t"contains": "contains"\n\t\t\t\t// }\n\t\t\t}\n\t\t};\n\t},\n\tselectInstrument: function selectInstrument(event) {\n\t\t// Update the rules instrument, getting the instruments avalible fields\n\t\tvar rule = this.props.rule,\n\t\t    that = this;\n\t\tif (event.target.value) {\n\t\t\trule.instrument = event.target.value;\n\t\t\t$.get(loris.BaseURL + "/AjaxHelper.php?Module=dataquery&script=datadictionary.php", { category: rule.instrument }, function (data) {\n\t\t\t\trule.fields = data;\n\t\t\t\tthat.props.updateRule(that.props.index, rule);\n\t\t\t}, \'json\');\n\t\t}\n\t},\n\tfieldSelect: function fieldSelect(event) {\n\t\t// Update the rules desired field, setting the rules field and field type\n\t\tvar rule = this.props.rule;\n\t\tdelete rule.field;\n\t\tdelete rule.fieldType;\n\t\tdelete rule.operator;\n\t\tdelete rule.value;\n\t\tdelete rule.visit;\n\t\tdelete rule.candidates;\n\t\tif (event.target.value) {\n\t\t\trule.field = rule.fields[event.target.value].key[1];\n\t\t\trule.fieldType = rule.fields[event.target.value].value.Type;\n\t\t}\n\t\tthis.props.updateRule(this.props.index, rule);\n\t},\n\toperatorSelect: function operatorSelect(event) {\n\t\t// Update the desired rule operation for the selected field\n\t\tvar rule = this.props.rule;\n\t\tdelete rule.operator;\n\t\tdelete rule.value;\n\t\tdelete rule.visit;\n\t\tdelete rule.candidates;\n\t\tif (event.target.value) {\n\t\t\trule.operator = event.target.value;\n\t\t}\n\t\tthis.props.updateRule(this.props.index, rule);\n\t},\n\tvalueSet: function valueSet(event) {\n\t\t// Update the value to filter for, and runs the query for the rules parameters\n\t\tvar rule = this.props.rule,\n\t\t    that = this;\n\t\tdelete rule.value;\n\t\tdelete rule.visit;\n\t\tdelete rule.candidates;\n\t\tif (event.target.value) {\n\t\t\tvar responseHandler = function responseHandler(data) {\n\t\t\t\tvar i,\n\t\t\t\t    allSessions = {},\n\t\t\t\t    allCandiates = {};\n\t\t\t\t// Loop through data and divide into individual visits with unique PSCIDs\n\t\t\t\t// storing a master list of unique PSCIDs\n\t\t\t\tfor (i = 0; i < data.length; i++) {\n\t\t\t\t\tif (!allSessions[data[i][1]]) {\n\t\t\t\t\t\tallSessions[data[i][1]] = [];\n\t\t\t\t\t}\n\t\t\t\t\tallSessions[data[i][1]].push(data[i][0]);\n\t\t\t\t\tif (!allCandiates[data[i][0]]) {\n\t\t\t\t\t\tallCandiates[data[i][0]] = [];\n\t\t\t\t\t}\n\t\t\t\t\tallCandiates[data[i][0]].push(data[i][1]);\n\t\t\t\t}\n\t\t\t\trule.candidates = {\n\t\t\t\t\t"allCandiates": allCandiates,\n\t\t\t\t\t"allSessions": allSessions\n\t\t\t\t};\n\t\t\t\trule.session = Object.keys(allCandiates);\n\t\t\t\trule.visit = "All";\n\t\t\t\tthat.props.updateSessions(that.props.index, rule);\n\t\t\t},\n\t\t\t    ajaxRetrieve = function ajaxRetrieve(script) {\n\t\t\t\t$.get(loris.BaseURL + "/AjaxHelper.php?Module=dataquery&script=" + script, {\n\t\t\t\t\tcategory: rule.instrument,\n\t\t\t\t\tfield: rule.field,\n\t\t\t\t\tvalue: event.target.value\n\t\t\t\t}, responseHandler, \'json\');\n\t\t\t};\n\t\t\tswitch (rule.operator) {\n\t\t\t\tcase "equal":\n\t\t\t\t\tajaxRetrieve("queryEqual.php");\n\t\t\t\t\tbreak;\n\t\t\t\tcase "notEqual":\n\t\t\t\t\tajaxRetrieve("queryNotEqual.php");\n\t\t\t\t\tbreak;\n\t\t\t\tcase "lessThanEqual":\n\t\t\t\t\tajaxRetrieve("queryLessThanEqual.php");\n\t\t\t\t\tbreak;\n\t\t\t\tcase "greaterThanEqual":\n\t\t\t\t\tajaxRetrieve("queryGreaterThanEqual.php");\n\t\t\t\t\tbreak;\n\t\t\t\tcase "startsWith":\n\t\t\t\t\tajaxRetrieve("queryStartsWith.php");\n\t\t\t\t\tbreak;\n\t\t\t\tcase "contains":\n\t\t\t\t\tajaxRetrieve("queryContains.php");\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\trule.value = event.target.value;\n\t\t}\n\t\tthis.props.updateRule(this.props.index, rule);\n\t},\n\tupdateVisit: function updateVisit(event) {\n\t\t// Update rule to filter for specified visit\n\t\tvar rule = this.props.rule;\n\t\trule.visit = event.target.value;\n\n\t\tif (event.target.value === "all") {\n\t\t\t// If all visits, use keys of master list\n\t\t\trule.session = Object.keys(rule.candidates.allCandiates);\n\t\t} else {\n\t\t\t// Else use list of PSCIDs for given vist\n\t\t\trule.session = rule.candidates.allSessions[event.target.value];\n\t\t}\n\t\tthis.props.updateSessions(this.props.index, rule);\n\t},\n\trender: function render() {\n\t\t// Renders the html for the component\n\n\t\tvar rule,\n\t\t    fieldIndex,\n\t\t    forVisits,\n\t\t    visits,\n\t\t    that = this;\n\t\tif (this.props.rule.instrument) {\n\t\t\t// Only display field select and etc. if instrument is selected\n\t\t\tvar fields = this.props.rule.fields.map(function (field, index) {\n\t\t\t\tif (that.props.rule.field && field.key[1] === that.props.rule.field) {\n\t\t\t\t\tfieldIndex = index;\n\t\t\t\t}\n\t\t\t\treturn React.createElement(\n\t\t\t\t\t"option",\n\t\t\t\t\t{ value: index },\n\t\t\t\t\tfield.key[1]\n\t\t\t\t);\n\t\t\t}),\n\t\t\t    operators = [],\n\t\t\t    inputOptions,\n\t\t\t    input,\n\t\t\t    operatorKey,\n\t\t\t    operatorSelect,\n\t\t\t    options,\n\t\t\t    value;\n\n\t\t\tif (this.props.rule.fieldType) {\n\t\t\t\t// Only display operators if field is selected\n\t\t\t\tinputType = this.props.rule.fieldType.split("(");\n\t\t\t\toperatorKey = inputType[0];\n\t\t\t\tfor (var key in this.state.operators) {\n\t\t\t\t\toperators.push(React.createElement(\n\t\t\t\t\t\t"option",\n\t\t\t\t\t\t{ value: key, onChange: this.operatorSelect },\n\t\t\t\t\t\tthis.state.operators[key]\n\t\t\t\t\t));\n\t\t\t\t}\n\t\t\t\tvalue = this.props.rule.operator ? this.props.rule.operator : "";\n\t\t\t\toperatorSelect = React.createElement(\n\t\t\t\t\t"select",\n\t\t\t\t\t{ className: "input-sm col-xs-3 ", onChange: this.operatorSelect, value: value },\n\t\t\t\t\tReact.createElement("option", { value: "" }),\n\t\t\t\t\toperators\n\t\t\t\t);\n\t\t\t\tif (this.props.rule.operator) {\n\t\t\t\t\t// Only display value input if operator is selected, displaying specific\n\t\t\t\t\t// input type field data type\n\t\t\t\t\tswitch (operatorKey) {\n\t\t\t\t\t\tcase "enum":\n\t\t\t\t\t\t\tinputOptions = enumToArray(this.props.rule.fieldType);\n\t\t\t\t\t\t\toptions = inputOptions.map(function (option) {\n\t\t\t\t\t\t\t\treturn React.createElement(\n\t\t\t\t\t\t\t\t\t"option",\n\t\t\t\t\t\t\t\t\t{ value: option },\n\t\t\t\t\t\t\t\t\toption\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tvalue = this.props.rule.value ? this.props.rule.value : "";\n\t\t\t\t\t\t\tinput = React.createElement(\n\t\t\t\t\t\t\t\t"select",\n\t\t\t\t\t\t\t\t{ className: "input-sm col-xs-3", onChange: this.valueSet, value: value },\n\t\t\t\t\t\t\t\tReact.createElement("option", { value: "" }),\n\t\t\t\t\t\t\t\toptions\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tinput = React.createElement("input", { type: "text",\n\t\t\t\t\t\t\t\tclassName: "input-sm col-xs-3",\n\t\t\t\t\t\t\t\tonChange: this.valueSet,\n\t\t\t\t\t\t\t\tvalue: this.props.rule.value\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.props.rule.visit) {\n\t\t\t\t\t// Display dropdown for visit select. This only displays after a value\n\t\t\t\t\t// has been inputed\n\t\t\t\t\tvisits = Object.keys(this.props.Visits).map(function (visit) {\n\t\t\t\t\t\treturn React.createElement(\n\t\t\t\t\t\t\t"option",\n\t\t\t\t\t\t\t{ value: visit },\n\t\t\t\t\t\t\tvisit\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t\tforVisits = React.createElement(\n\t\t\t\t\t\t"select",\n\t\t\t\t\t\t{ className: "input-sm col-xs-3", onChange: this.updateVisit, value: this.props.rule.visit },\n\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t"option",\n\t\t\t\t\t\t\t{ value: "all" },\n\t\t\t\t\t\t\t"All Visits"\n\t\t\t\t\t\t),\n\t\t\t\t\t\tvisits\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\trule = React.createElement(\n\t\t\t\t"div",\n\t\t\t\tnull,\n\t\t\t\tReact.createElement(\n\t\t\t\t\t"div",\n\t\t\t\t\t{ className: "col-xs-12" },\n\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t"label",\n\t\t\t\t\t\t{ className: "instrumentLabel" },\n\t\t\t\t\t\tthis.props.rule.instrument\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\tReact.createElement(\n\t\t\t\t\t"div",\n\t\t\t\t\t{ className: "col-xs-10" },\n\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t"select",\n\t\t\t\t\t\t{ className: "input-sm col-xs-3", onChange: this.fieldSelect, value: fieldIndex },\n\t\t\t\t\t\tReact.createElement("option", { value: "" }),\n\t\t\t\t\t\tfields\n\t\t\t\t\t),\n\t\t\t\t\toperatorSelect,\n\t\t\t\t\tinput,\n\t\t\t\t\tforVisits\n\t\t\t\t)\n\t\t\t);\n\t\t} else {\n\t\t\t// Else display dropdown for instrument select\n\t\t\tvar options = this.props.items.map(function (item) {\n\t\t\t\treturn React.createElement(\n\t\t\t\t\t"option",\n\t\t\t\t\t{ value: item.category },\n\t\t\t\t\titem.category\n\t\t\t\t);\n\t\t\t});\n\t\t\trule = React.createElement(\n\t\t\t\t"select",\n\t\t\t\t{ onChange: this.selectInstrument, className: "input-sm col-xs-10" },\n\t\t\t\tReact.createElement("option", { value: "" }),\n\t\t\t\toptions\n\t\t\t);\n\t\t}\n\t\treturn React.createElement(\n\t\t\t"div",\n\t\t\t{ className: "panel panel-default" },\n\t\t\tReact.createElement(\n\t\t\t\t"div",\n\t\t\t\t{ className: "panel-body" },\n\t\t\t\trule,\n\t\t\t\tReact.createElement(\n\t\t\t\t\t"div",\n\t\t\t\t\t{ className: "col-xs-2" },\n\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t"button",\n\t\t\t\t\t\t{ className: "btn btn-danger btn-sm pull-right",\n\t\t\t\t\t\t\tonClick: this.props.deleteRule.bind(this, this.props.index)\n\t\t\t\t\t\t},\n\t\t\t\t\t\tReact.createElement("span", { className: "glyphicon glyphicon-remove" }),\n\t\t\t\t\t\t" Delete"\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t);\n\t}\n});\n\n/*\n *  The following component is used for displaying a filter group\n */\nFilterGroup = React.createClass({\n\tdisplayName: "FilterGroup",\n\n\tupdateChild: function updateChild(index, child) {\n\t\t// Update a specified child in the groups children\n\n\t\tvar group = this.props.group;\n\t\tgroup.children[index] = child;\n\n\t\tif (this.props.index) {\n\t\t\t// If not base filter group, recursively call update child\n\t\t\tthis.props.updateGroup(this.props.index, group);\n\t\t} else {\n\t\t\t// Else base filter group, update the filter in the data query component\n\t\t\tthis.props.updateFilter(group);\n\t\t}\n\t},\n\tupdateGroupOperator: function updateGroupOperator(operator) {\n\t\t// Update the group\'s operator\n\t\tvar group = this.props.group;\n\t\tgroup.activeOperator = operator;\n\n\t\t// Update the groups sessions by calling the arrayintersect.js functions\n\t\tgroup.session = getSessions(group);\n\n\t\tif (this.props.index) {\n\t\t\t// If not base filter group, recursively call update child\n\t\t\tthis.props.updateGroup(this.props.index, group);\n\t\t} else {\n\t\t\t// Else base filter group, update the filter in the data query component\n\t\t\tthis.props.updateFilter(group);\n\t\t}\n\t},\n\tupdateSessions: function updateSessions(index, child) {\n\t\t// Computes the desired sessions of the current group\n\t\tvar group = this.props.group,\n\t\t    sessions = [],\n\t\t    session = [];\n\t\tgroup.children[index] = child;\n\n\t\t// Update the groups sessions by calling the arrayintersect.js functions\n\t\tgroup.session = getSessions(group);\n\t\tif (this.props.index) {\n\t\t\t// If not base filter group, recursively call update parents session\n\t\t\tthis.props.updateSessions(this.props.index, group);\n\t\t} else {\n\t\t\t// Else base filter group, update the filter in the data query component\n\t\t\tthis.props.updateFilter(group);\n\t\t}\n\t},\n\taddChild: function addChild(type) {\n\t\t// Add a child to the group\n\t\tvar child,\n\t\t    group = this.props.group;\n\n\t\t// Define the child\'s base data structure depending on specifed type\n\t\tif (type === "rule") {\n\t\t\tchild = {\n\t\t\t\ttype: "rule"\n\t\t\t};\n\t\t} else {\n\t\t\tchild = {\n\t\t\t\ttype: "group",\n\t\t\t\tactiveOperator: 0,\n\t\t\t\tchildren: [{\n\t\t\t\t\ttype: "rule"\n\t\t\t\t}]\n\t\t\t};\n\t\t}\n\t\tgroup.children.push(child);\n\n\t\tif (this.props.index) {\n\t\t\t// If not base filter group, recursively call update child\n\t\t\tthis.props.updateGroup(this.props.index, group);\n\t\t} else {\n\t\t\t// Else base filter group, update the filter in the data query component\n\t\t\tthis.props.updateFilter(group);\n\t\t}\n\t},\n\tdeleteChild: function deleteChild(index) {\n\t\t// Delete a child\n\n\t\tvar group = this.props.group;\n\t\tgroup.children.splice(index, 1);\n\n\t\t// Update the groups sessions by calling the arrayintersect.js functions\n\t\tgroup.session = getSessions(group);\n\n\t\tif (this.props.index) {\n\t\t\t// If not base filter group, recursively call update child\n\t\t\tthis.props.updateGroup(this.props.index, group);\n\t\t} else {\n\t\t\t// Else base filter group, update the filter in the data query component\n\t\t\tthis.props.updateFilter(group);\n\t\t}\n\t},\n\trender: function render() {\n\t\t// Renders the html for the component\n\n\t\tvar logicOperator = React.createElement(LogicOperator, { logicOperator: this.props.group.activeOperator,\n\t\t\tupdateGroupOperator: this.updateGroupOperator\n\t\t}),\n\t\t    that = this,\n\n\n\t\t// Render the children based on their type\n\t\tchildren = this.props.group.children.map(function (child, index) {\n\t\t\tif (child.type === "rule") {\n\t\t\t\treturn React.createElement(\n\t\t\t\t\t"li",\n\t\t\t\t\tnull,\n\t\t\t\t\tReact.createElement(FilterRule, { rule: child,\n\t\t\t\t\t\titems: that.props.items,\n\t\t\t\t\t\tindex: index,\n\t\t\t\t\t\tupdateRule: that.updateChild,\n\t\t\t\t\t\tupdateSessions: that.updateSessions,\n\t\t\t\t\t\tdeleteRule: that.deleteChild,\n\t\t\t\t\t\tVisits: that.props.Visits\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t} else if (child.type === "group") {\n\t\t\t\treturn React.createElement(\n\t\t\t\t\t"li",\n\t\t\t\t\tnull,\n\t\t\t\t\tReact.createElement(FilterGroup, { group: child,\n\t\t\t\t\t\titems: that.props.items,\n\t\t\t\t\t\tindex: index,\n\t\t\t\t\t\tupdateGroup: that.updateChild,\n\t\t\t\t\t\tupdateSessions: that.updateSessions,\n\t\t\t\t\t\tdeleteGroup: that.deleteChild,\n\t\t\t\t\t\tVisits: that.props.Visits\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t}),\n\t\t    deleteButton;\n\n\t\tif (this.props.deleteGroup) {\n\t\t\t// Can only delete a group that isn\'t the base group\n\t\t\tdeleteButton = React.createElement(\n\t\t\t\t"button",\n\t\t\t\t{ className: "btn btn-danger btn-sm pull-right",\n\t\t\t\t\tonClick: this.props.deleteGroup.bind(this, this.props.index)\n\t\t\t\t},\n\t\t\t\tReact.createElement("span", { className: "glyphicon glyphicon-remove" }),\n\t\t\t\t" Delete Group"\n\t\t\t);\n\t\t}\n\t\treturn React.createElement(\n\t\t\t"div",\n\t\t\t{ className: "tree" },\n\t\t\tReact.createElement(\n\t\t\t\t"ul",\n\t\t\t\t{ className: "firstUL" },\n\t\t\t\tReact.createElement(\n\t\t\t\t\t"li",\n\t\t\t\t\tnull,\n\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t"div",\n\t\t\t\t\t\t{ className: "row" },\n\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t"div",\n\t\t\t\t\t\t\t{ className: "col-xs-2" },\n\t\t\t\t\t\t\tlogicOperator\n\t\t\t\t\t\t),\n\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t"div",\n\t\t\t\t\t\t\t{ className: "col-xs-10" },\n\t\t\t\t\t\t\tdeleteButton,\n\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t"button",\n\t\t\t\t\t\t\t\t{ className: "btn btn-primary btn-sm pull-right",\n\t\t\t\t\t\t\t\t\tonClick: this.addChild.bind(this, "group")\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tReact.createElement("span", { className: "glyphicon glyphicon-add" }),\n\t\t\t\t\t\t\t\t" Add Group"\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t"button",\n\t\t\t\t\t\t\t\t{ className: "btn btn-primary btn-sm pull-right",\n\t\t\t\t\t\t\t\t\tonClick: this.addChild.bind(this, "rule")\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tReact.createElement("span", { className: "glyphicon glyphicon-add" }),\n\t\t\t\t\t\t\t\t" Add Rule"\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t"ul",\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\tchildren\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t);\n\t}\n});\n\n/*\n *  The following component is the base componenet for the filter builder\n */\nFilterBuilder = React.createClass({\n\tdisplayName: "FilterBuilder",\n\n\trender: function render() {\n\t\treturn React.createElement(\n\t\t\t"div",\n\t\t\tnull,\n\t\t\tReact.createElement(\n\t\t\t\t"h1",\n\t\t\t\t{ className: "col-xs-12" },\n\t\t\t\t"Filter"\n\t\t\t),\n\t\t\tReact.createElement(\n\t\t\t\t"div",\n\t\t\t\t{ className: "col-xs-12" },\n\t\t\t\tReact.createElement(\n\t\t\t\t\t"div",\n\t\t\t\t\t{ className: "well well-primary" },\n\t\t\t\t\tReact.createElement(FilterGroup, { group: this.props.filter,\n\t\t\t\t\t\titems: this.props.items,\n\t\t\t\t\t\tupdateFilter: this.props.updateFilter,\n\t\t\t\t\t\tVisits: this.props.Visits\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t)\n\t\t);\n\t}\n});'}});
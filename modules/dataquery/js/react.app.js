!function(e){function n(i){if(t[i])return t[i].exports;var a=t[i]={exports:{},id:i,loaded:!1};return e[i].call(a.exports,a,a.exports,n),a.loaded=!0,a.exports}var t={};return n.m=e,n.c=t,n.p="",n(0)}({0:function(e,n,t){t(1)(t(20))},1:function(e,n){e.exports=function(e){"undefined"!=typeof execScript?execScript(e):eval.call(null,e)}},20:function(e,n){e.exports='/**\n *  The following file contains the base component for the data query react app.\n *  It also contains the component for the saved queries dropdown.\n *\n *  @author   Jordan Stirling <jstirling91@gmail.com>\n *  @author   Dave MacFarlane <david.macfarlane2@mcgill.ca>\n *  @license  http://www.gnu.org/licenses/gpl-3.0.txt GPLv3\n *  @link     https://github.com/mohadesz/Loris-Trunk\n */\n\n/*\n *  The following component is for saved queries dropdown which appears in the\n *  tab bar of the base component.\n */\nSavedQueriesList = React.createClass({\n    displayName: "SavedQueriesList",\n\n    getDefaultProps: function getDefaultProps() {\n        queriesLoaded: false;\n    },\n    componentDidMount: function componentDidMount() {},\n    loadQuery: function loadQuery(queryName) {\n        // Loads in the selected query\n\n        this.props.onSelectQuery(this.props.queryDetails[queryName].Fields, this.props.queryDetails[queryName].Conditions);\n    },\n    render: function render() {\n        // Renders the html for the component\n\n        var userSaved = [];\n        var globalSaved = [];\n        var queryName, curQuery;\n\n        if (this.props.queriesLoaded === false) {\n            return React.createElement("div", null);\n        }\n        // Build the list for the user queries\n        for (var i = 0; i < this.props.userQueries.length; i += 1) {\n            curQuery = this.props.queryDetails[this.props.userQueries[i]];\n            console.log(curQuery.Meta);\n            if (curQuery.Meta && curQuery.Meta.name) {\n                queryName = curQuery.Meta.name;\n            } else {\n                queryName = this.props.userQueries[i];\n            }\n            userSaved.push(React.createElement(\n                "li",\n                { key: this.props.userQueries[i] },\n                React.createElement(\n                    "a",\n                    { href: "#", onClick: this.loadQuery.bind(this, this.props.userQueries[i]) },\n                    queryName\n                )\n            ));\n        }\n        // Build the list for the global queries\n        for (var i = 0; i < this.props.globalQueries.length; i += 1) {\n            curQuery = this.props.queryDetails[this.props.globalQueries[i]];\n            console.log(curQuery.Meta);\n            if (curQuery.Meta && curQuery.Meta.name) {\n                queryName = curQuery.Meta.name;\n            } else {\n                queryName = this.props.globalQueries[i];\n            }\n            globalSaved.push(React.createElement(\n                "li",\n                { key: this.props.globalQueries[i] },\n                React.createElement(\n                    "a",\n                    { href: "#", onClick: this.loadQuery.bind(this, this.props.globalQueries[i]) },\n                    queryName\n                )\n            ));\n        }\n        return React.createElement(\n            "ul",\n            { className: "nav nav-tabs navbar-right" },\n            React.createElement(\n                "li",\n                { className: "dropdown" },\n                React.createElement(\n                    "a",\n                    { href: "#", className: "dropdown-toggle", "data-toggle": "dropdown", role: "button", "aria-expanded": "false" },\n                    "Load Saved Query ",\n                    React.createElement("span", { className: "caret" })\n                ),\n                React.createElement(\n                    "ul",\n                    { className: "dropdown-menu", role: "menu" },\n                    React.createElement(\n                        "li",\n                        { role: "presentation", className: "dropdown-header" },\n                        "User Saved Queries"\n                    ),\n                    userSaved,\n                    React.createElement(\n                        "li",\n                        { role: "presentation", className: "dropdown-header" },\n                        "Shared Saved Queries"\n                    ),\n                    globalSaved\n                )\n            ),\n            React.createElement(\n                "li",\n                { role: "presentation" },\n                React.createElement(\n                    "a",\n                    { href: "#SavedQueriesTab", "data-toggle": "tab" },\n                    "Manage Saved Queries"\n                )\n            )\n        );\n    }\n});\n\n/*\n *  The following component is the data queries base element. It controls which tab is currently\n *  shown, along with keeping the state of the current query being built and running the query.\n */\nDataQueryApp = React.createClass({\n    displayName: "DataQueryApp",\n\n    componentDidMount: function componentDidMount() {\n        // Before the dataquery is loaded into the window, this function is called to gather\n        // any data that was not passed in the initial load.\n\n        // The left and right menu items are part of the same menu, but bootstrap considers\n        // them two separate ones, so we need to make sure that only one is selected by removing\n        // "active" from all the tab classes and only adding it to the really active one\n        var domNode = this;\n        $(domNode).find(\'a[data-toggle="tab"]\').on(\'shown.bs.tab\', function (e) {\n            $(domNode).find(\'li\').removeClass("active");\n            if (e.target) {\n                e.target.classList.add("active");\n                // Both the <li> tag and the <a> tag should be active\n                if (e.target.parentNode) {\n                    e.target.parentNode.classList.add("active");\n                }\n            }\n        });\n\n        // Load the save queries\' details\n        var promises = [];\n        var that = this;\n        for (var key in this.state.queryIDs) {\n            console.log(this.state.queryIDs[key][0]);\n            for (var i = 0; i < this.state.queryIDs[key].length; i += 1) {\n                var curRequest;\n                curRequest = Promise.resolve($.ajax(loris.BaseURL + "/AjaxHelper.php?Module=dataquery&script=GetDoc.php&DocID=" + that.state.queryIDs[key][i]), {\n                    data: {\n                        DocID: that.state.queryIDs[key][i]\n                    },\n                    dataType: \'json\'\n                }).then(function (value) {\n                    var queries = that.state.savedQueries;\n\n                    queries[value._id] = value;\n                    that.setState({ \'savedQueries\': queries });\n                });\n                promises.push(curRequest);\n            }\n        }\n\n        var allDone = Promise.all(promises).then(function (value) {\n            that.setState({ \'queriesLoaded\': true });\n        });\n        var component = this;\n        $(\'a[data-toggle="tab"]\').on(\'shown.bs.tab\', function (e) {\n            component.setState({\n                ActiveTab: e.target.getAttribute("href").substr(1)\n            });\n        });\n    },\n    saveFilterRule: function saveFilterRule(rule) {\n        // Used to build a filter rule for saving query\n\n        var savedRule = {\n            "field": rule.field,\n            "operator": rule.operator,\n            "value": rule.value,\n            "instrument": rule.instrument,\n            "visit": rule.visit\n        };\n        return savedRule;\n    },\n    saveFilterGroup: function saveFilterGroup(group) {\n        // Used to build a filter group for saving query\n\n        var savedFilter = {\n            "activeOperator": group.activeOperator,\n            "children": []\n        };\n        // Recursively build the filter groups children\n        for (var i = 0; i < group.children.length; i++) {\n            if (group.children[i].type === "rule") {\n                savedFilter.children.push(this.saveFilterRule(group.children[i]));\n            } else if (group.children[i].type === "group") {\n                savedFilter.children.push(this.saveFilterGroup(group.children[i]));\n            }\n        }\n        return savedFilter;\n    },\n    saveCurrentQuery: function saveCurrentQuery(name, shared) {\n        // Used to save the current query\n\n        var that = this,\n            filter = this.saveFilterGroup(this.state.filter);\n\n        $.post(loris.BaseURL + "/AjaxHelper.php?Module=dataquery&script=saveQuery.php", {\n            Fields: this.state.selectedFields,\n            Filters: filter,\n            QueryName: name,\n            SharedQuery: shared\n        }, function (data) {\n            // Once saved, add the query to the list of saved queries\n            var id = JSON.parse(data).id,\n                queryIDs = that.state.queryIDs;\n            if (shared === true) {\n                queryIDs.Shared.push(id);\n            } else {\n                queryIDs.User.push(id);\n            }\n            $.get(loris.BaseURL + "/AjaxHelper.php?Module=dataquery&script=GetDoc.php&DocID=" + id, function (value) {\n                var queries = that.state.savedQueries;\n\n                queries[value._id] = value;\n                that.setState({\n                    \'savedQueries\': queries,\n                    \'queryIDs\': queryIDs,\n                    alertLoaded: false,\n                    alertSaved: true\n                });\n            });\n        });\n    },\n    getInitialState: function getInitialState() {\n        // Initialize the base state of the dataquery app\n\n        return {\n            displayType: \'Cross-sectional\',\n            fields: [],\n            criteria: {},\n            sessiondata: {},\n            grouplevel: 0,\n            queryIDs: this.props.SavedQueries,\n            savedQueries: {},\n            queriesLoaded: false,\n            alertLoaded: false,\n            alertSaved: false,\n            ActiveTab: \'Info\',\n            rowData: {},\n            filter: {\n                type: "group",\n                activeOperator: 0,\n                children: [{\n                    type: "rule"\n                }],\n                session: this.props.AllSessions\n            },\n            selectedFields: {},\n            downloadableFields: {},\n            loading: false\n        };\n    },\n    loadFilterRule: function loadFilterRule(rule) {\n        // Used to load in a filter rule\n\n        var script;\n        if (!rule.type) {\n            rule.type = "rule";\n        }\n\n        // Get given fields of the instrument for the rule.\n        // This call is made synchronously\n        $.ajax({\n            url: loris.BaseURL + "/AjaxHelper.php?Module=dataquery&script=datadictionary.php",\n            success: function success(data) {\n                rule.fields = data;\n            },\n            async: false,\n            data: { category: rule.instrument },\n            dataType: \'json\'\n        });\n\n        // Find the rules selected field\'s data type\n        for (var i = 0; i < rule.fields.length; i++) {\n            if (rule.fields[i].key[1] === rule.field) {\n                rule.fieldType = rule.fields[i].value.Type;\n                break;\n            }\n        }\n\n        // Get the sessions which meet the rules criterias.\n        // TODO:    Build the sessions in the new format\n        switch (rule.operator) {\n            case "equal":\n                script = "queryEqual.php";\n                break;\n            case "notEqual":\n                script = "queryNotEqual.php";\n                break;\n            case "lessThanEqual":\n                script = "queryLessThanEqual.php";\n                break;\n            case "greaterThanEqual":\n                script = "queryGreaterThanEqual.php";\n                break;\n            case "startsWith":\n                script = "queryStartsWith.php";\n                break;\n            case "contains":\n                script = "queryContains.php";\n                break;\n            default:\n                break;\n        }\n        $.ajax({\n            url: loris.BaseURL + "/AjaxHelper.php?Module=dataquery&script=" + script,\n            success: function success(data) {\n                var i,\n                    allSessions = {},\n                    allCandiates = {};\n                // Loop through data and divide into individual visits with unique PSCIDs\n                // storing a master list of unique PSCIDs\n                for (i = 0; i < data.length; i++) {\n                    if (!allSessions[data[i][1]]) {\n                        allSessions[data[i][1]] = [];\n                    }\n                    allSessions[data[i][1]].push(data[i][0]);\n                    if (!allCandiates[data[i][0]]) {\n                        allCandiates[data[i][0]] = [];\n                    }\n                    allCandiates[data[i][0]].push(data[i][1]);\n                }\n                rule.candidates = {\n                    "allCandiates": allCandiates,\n                    "allSessions": allSessions\n                };\n                if (rule.visit == "All") {\n                    rule.session = Object.keys(allCandiates);\n                } else {\n                    if (allSessions[rule.visit]) {\n                        rule.session = allSessions[rule.visit];\n                    } else {\n                        rule.session = [];\n                    }\n                }\n            },\n            async: false,\n            data: {\n                category: rule.instrument,\n                field: rule.field,\n                value: rule.value\n            },\n            dataType: \'json\'\n        });\n\n        return rule;\n    },\n    loadFilterGroup: function loadFilterGroup(group) {\n        // Used to load in a filter group\n\n        // Recursively load the children on the group\n        for (var i = 0; i < group.children.length; i++) {\n            if (group.children[i].activeOperator) {\n                if (!group.children[i].type) {\n                    group.children[i].type = "group";\n                }\n                group.children[i] = this.loadFilterGroup(group.children[i]);\n            } else {\n                group.children[i] = this.loadFilterRule(group.children[i]);\n            }\n        }\n        group.session = getSessions(group);\n        return group;\n    },\n    loadSavedQuery: function loadSavedQuery(fields, criteria) {\n        // Used to load a saved query\n\n        var filterState = {},\n            selectedFields = {},\n            fieldsList = [];\n        this.setState({ "loading": true });\n        if (Array.isArray(criteria)) {\n            // This is used to load a query that is saved in the old format\n            // so translate it into the new format, grouping the given critiras\n            // into a filter group\n\n            filterState = {\n                type: "group",\n                activeOperator: 0,\n                children: []\n            };\n            filterState.children = criteria.map(function (item) {\n                var fieldInfo = item.Field.split(",");\n                rule = {\n                    "instrument": fieldInfo[0],\n                    "field": fieldInfo[1],\n                    "value": item.Value,\n                    "type": "rule",\n                    "visit": "All"\n                };\n                switch (item.Operator) {\n                    case "=":\n                        rule.operator = "equal";\n                        break;\n                    case "!=":\n                        rule.operator = "notEqual";\n                        break;\n                    case "<=":\n                        rule.operator = "lessThanEqual";\n                        break;\n                    case ">=":\n                        rule.operator = "greaterThanEqual";\n                        break;\n                    default:\n                        rule.operator = item.Operator;\n                        break;\n                }\n                return rule;\n            });\n\n            var fieldSplit;\n            fieldsList = fields;\n            for (var i = 0; i < fields.length; i++) {\n                fieldSplit = fields[i].split(",");\n                if (!selectedFields[fieldSplit[0]]) {\n                    selectedFields[fieldSplit[0]] = {};\n                    selectedFields[fieldSplit[0]][fieldSplit[1]] = {};\n                    selectedFields[fieldSplit[0]].allVisits = {};\n                    for (var key in this.props.Visits) {\n                        selectedFields[fieldSplit[0]].allVisits[key] = 1;\n                        selectedFields[fieldSplit[0]][fieldSplit[1]][key] = [key];\n                    }\n                } else {\n                    selectedFields[fieldSplit[0]][fieldSplit[1]] = {};\n                    for (var key in this.props.Visits) {\n                        selectedFields[fieldSplit[0]].allVisits[key]++;\n                        selectedFields[fieldSplit[0]][fieldSplit[1]][key] = [key];\n                    }\n                }\n            }\n        } else {\n            // Query was saved in the new format\n            filterState = criteria;\n            selectedFields = fields;\n            for (var instrument in fields) {\n                for (var field in fields[instrument]) {\n                    if (field === "allVisits") {\n                        continue;\n                    } else {\n                        fieldsList.push(instrument + "," + field);\n                    }\n                }\n            }\n        }\n        if (filterState.children && filterState.children.length > 0) {\n            filterState = this.loadFilterGroup(filterState);\n        } else {\n            filterState.children = [{\n                type: "rule"\n            }];\n            filterState.session = this.props.AllSessions;\n        }\n        this.setState(function (state) {\n            return {\n                fields: fieldsList,\n                selectedFields: selectedFields,\n                filter: filterState,\n                alertLoaded: true,\n                alertSaved: false,\n                loading: false\n            };\n        });\n    },\n    fieldVisitSelect: function fieldVisitSelect(action, visit, field) {\n        // Used to select visits for a given field\n\n        this.setState(function (state) {\n            var temp = state.selectedFields[field.instrument];\n            if (action === "check") {\n                // Adding a new visit for field, add visit to field and\n                // increase count of visit in allVisits\n                temp[field.field][visit] = visit;\n                if (temp.allVisits[visit]) {\n                    temp.allVisits[visit]++;\n                } else {\n                    temp.allVisits[visit] = 1;\n                }\n            } else {\n                // Removing visit, delete visit from field\n                delete temp[field.field][visit];\n                if (temp.allVisits[visit] === 1) {\n                    // If visit count in allVisits is 1 delete visit from\n                    // allVisits\n                    delete temp.allVisits[visit];\n                } else {\n                    // Else decrement count of visit in allVisists\n                    temp.allVisits[visit]--;\n                }\n            }\n            return temp;\n        });\n    },\n    fieldChange: function fieldChange(fieldName, category, downloadable) {\n        // Used to add and remove fields from the current query being built\n\n        var that = this;\n        this.setState(function (state) {\n            var selectedFields = state.selectedFields,\n                fields = state.fields.slice(0);\n            if (!selectedFields[category]) {\n                // The given category has no selected fields, add the category to the selectedFields\n                selectedFields[category] = {};\n                // Add all visits to the givin field for the given category\n                selectedFields[category][fieldName] = JSON.parse(JSON.stringify(that.props.Visits));\n                // Add all visits to the given category, initalizing their counts to 1\n                selectedFields[category].allVisits = {};\n                for (var key in that.props.Visits) {\n                    selectedFields[category].allVisits[key] = 1;\n                }\n\n                // Add field to the field list\n                fields.push(category + "," + fieldName);\n\n                if (downloadable) {\n                    // If the field is downloadable add to the list of downloadable fields\n                    state.downloadableFields[category + "," + fieldName] = true;\n                }\n            } else if (selectedFields[category][fieldName]) {\n                // Remove the field from the selectedFields\n                for (var key in selectedFields[category][fieldName]) {\n                    // Decrement the count of field\'s visits, delete visit if count is 1\n                    if (selectedFields[category].allVisits[key] === 1) {\n                        delete selectedFields[category].allVisits[key];\n                    } else {\n                        selectedFields[category].allVisits[key]--;\n                    }\n                }\n                delete selectedFields[category][fieldName];\n\n                // Find the given field in the fields list and remove it\n                var idx = fields.indexOf(category + "," + fieldName);\n                fields.splice(idx, 1);\n\n                if (Object.keys(selectedFields[category]).length === 1) {\n                    // If no more fields left for category, delete category from\n                    // selectedFields\n                    delete selectedFields[category];\n                }\n\n                if (downloadable) {\n                    // If the field was downloadable, delete it from the downloadable list\n                    delete state.downloadableFields[category + "," + fieldName];\n                }\n            } else {\n                // The category already has fields but not the desired one, add it\n                if (!selectedFields[category][fieldName]) {\n                    selectedFields[category][fieldName] = {};\n                }\n\n                // Increment the visit count for the visit, setting it to 1 if doesn\'t exist\n                for (var key in selectedFields[category].allVisits) {\n                    if (key == "allVisits") {\n                        continue;\n                    }\n                    selectedFields[category].allVisits[key]++;\n                    selectedFields[category][fieldName][key] = key;\n                }\n                fields.push(category + "," + fieldName);\n                if (downloadable) {\n                    // If the field is downloadable add to the list of downloadable fields\n                    state.downloadableFields[category + "," + fieldName] = true;\n                }\n            }\n            return {\n                selectedFields: selectedFields,\n                fields: fields\n            };\n        });\n    },\n    getSessions: function getSessions() {\n        // Get the sessions to be selected\n\n        if (this.state.filter.children.length > 0) {\n            // If filter exists return filter sessions\n            return this.state.filter.session;\n        } else {\n            // Else return all sessions\n            return this.props.AllSessions;\n        }\n    },\n    runQuery: function runQuery(fields, sessions) {\n        // Run the current query\n\n        var DocTypes = [],\n            that = this,\n            semaphore = 0,\n            sectionedSessions,\n            ajaxComplete = function ajaxComplete() {\n            // Wait until all ajax calls have completed before computing the rowdata\n            if (semaphore == 0) {\n                var rowdata = that.getRowData(that.state.grouplevel);\n                that.setState({\n                    \'rowData\': rowdata,\n                    "loading": false\n                });\n            }\n        };\n\n        // Reset the rowData and sessiondata\n        this.setState({\n            "rowData": {},\n            "sessiondata": {},\n            "loading": true\n        });\n\n        // Get list of DocTypes to be retrieved\n        for (var i = 0; i < fields.length; i += 1) {\n            var field_split = fields[i].split(",");\n            var category = field_split[0];\n\n            // Check if the current category has already been queried, if so skip\n            if (DocTypes.indexOf(category) === -1) {\n                var sessionInfo = [];\n\n                // Build the session data to be queried for the given category\n                for (var j = 0; j < this.state.filter.session.length; j++) {\n                    for (var key in this.state.selectedFields[category].allVisits) {\n                        var temp = [];\n                        if (Array.isArray(this.state.filter.session[j])) {\n                            // Using allSessions, only use the PSCID\n                            temp.push(this.state.filter.session[j][0]);\n                        } else {\n                            temp.push(this.state.filter.session[j]);\n                        }\n                        // Add the visit to the temp variable then add to the sessions to be queried\n                        temp.push(key);\n                        sessionInfo.push(temp);\n                    }\n                }\n\n                DocTypes.push(category);\n                // Split the sessions to be queried into subqueries so that they don\'t exceed the defualt\n                // php defualt setting for maximum variables allowed in a single request\n                for (var j = 0; j < sessionInfo.length; j += 400) {\n                    // keep track of the number of requests waiting for a response\n                    semaphore++;\n                    sectionedSessions = sessionInfo.slice(j, j + 400);\n                    $.ajax({\n                        type: "POST",\n                        url: loris.BaseURL + "/AjaxHelper.php?Module=dataquery&script=retrieveCategoryDocs.php",\n                        data: {\n                            DocType: category,\n                            Sessions: sectionedSessions\n                        },\n                        dataType: \'text\',\n                        success: function success(data) {\n                            if (data) {\n                                var i,\n                                    row,\n                                    rows,\n                                    identifier,\n                                    sessiondata = that.state.sessiondata;\n                                data = JSON.parse(data);\n                                rows = data.rows;\n                                for (i = 0; i < rows.length; i += 1) {\n                                    /*\n                                     * each row is a JSON object of the\n                                     * form:\n                                     * {\n                                     *  "key" : [category, pscid, vl],\n                                     *  "value" : [pscid, vl],\n                                     *  "doc": {\n                                     *      Meta: { stuff }\n                                     *      data: { "FieldName" : "Value", .. }\n                                     * }\n                                     */\n                                    row = rows[i];\n                                    identifier = row.value;\n                                    if (!sessiondata.hasOwnProperty(identifier)) {\n                                        sessiondata[identifier] = {};\n                                    }\n\n                                    sessiondata[identifier][row.key[0]] = row.doc;\n                                }\n                                that.setState({ \'sessiondata\': sessiondata });\n                            }\n                            console.log("Received data");\n                            semaphore--;\n                            ajaxComplete();\n                        }\n                    });\n                }\n            }\n        }\n    },\n    getRowData: function getRowData(displayID) {\n        // Build the queried data to be displayed in the data table\n\n        var sessiondata = this.state.sessiondata;\n        var sessions = this.getSessions();\n        var fields = this.state.fields.sort();\n        var downloadableFields = this.state.downloadableFields;\n        var i, j;\n        var rowdata = [];\n        var currow = [];\n        var Identifiers = [];\n        var RowHeaders = [];\n        var fileData = [];\n        var href;\n\n        if (displayID === 0) {\n            // Displaying the data in the cross-sectional way\n\n            // Add the fields as the tables headers\n            for (i = 0; fields && i < fields.length; i += 1) {\n                RowHeaders.push(fields[i]);\n            }\n\n            // Build the table rows, using the session data as the row identifier\n            for (var session in sessiondata) {\n                currow = [];\n                for (i = 0; fields && i < fields.length; i += 1) {\n                    var fieldSplit = fields[i].split(",");\n                    currow[i] = \'.\';\n                    var sd = sessiondata[session];\n                    if (sd[fieldSplit[0]] && sd[fieldSplit[0]].data[fieldSplit[1]] && downloadableFields[fields[i]]) {\n                        // If the current field has data and is downloadable, create a download link\n                        href = loris.BaseURL + "/mri/jiv/get_file.php?file=" + sd[fieldSplit[0]].data[fieldSplit[1]];\n                        currow[i] = React.createElement(\n                            "a",\n                            { href: href },\n                            sd[fieldSplit[0]].data[fieldSplit[1]]\n                        );\n                        fileData.push("file/" + sd[fieldSplit[0]]._id + "/" + encodeURIComponent(sd[fieldSplit[0]].data[fieldSplit[1]]));\n                    } else if (sd[fieldSplit[0]]) {\n                        // else if field is not null add data and string\n                        currow[i] = sd[fieldSplit[0]].data[fieldSplit[1]];\n                    }\n                }\n                rowdata.push(currow);\n                Identifiers.push(session);\n            }\n        } else {\n            // Displaying the data in the longitudinal way\n\n            var Visits = {},\n                visit,\n                identifier,\n                temp,\n                colHeader,\n                index,\n                instrument,\n                fieldSplit;\n\n            // Loop trough session data building the row identifiers and desired visits\n            for (var session in sessiondata) {\n                sessiondata[session.toUpperCase()] = sessiondata[session];\n                delete session[session];\n                temp = session.split(\',\');\n                visit = temp[1].toUpperCase();\n                if (!Visits[visit]) {\n                    Visits[visit] = true;\n                }\n                identifier = temp[0].toUpperCase();\n                if (Identifiers.indexOf(identifier) === -1) {\n                    Identifiers.push(identifier);\n                }\n            }\n\n            // Loop through the desired fields, adding a row header for each visit if it\n            // has been selected in the build phase\n            for (i = 0; fields && i < fields.length; i += 1) {\n                for (visit in Visits) {\n                    temp = fields[i].split(",");\n                    instrument = this.state.selectedFields[temp[0]];\n                    if (instrument && instrument[temp[1]] && instrument[temp[1]][visit]) {\n                        RowHeaders.push(visit + \' \' + fields[i]);\n                    }\n                }\n            }\n\n            // Build the row data for the giving identifiers and headers\n            for (identifier in Identifiers) {\n                currow = [];\n                for (colHeader in RowHeaders) {\n                    temp = Identifiers[identifier] + \',\' + RowHeaders[colHeader].split(\' \')[0];\n                    index = sessiondata[temp];\n                    if (!index) {\n                        currow.push(".");\n                    } else {\n                        temp = index[RowHeaders[colHeader].split(\',\')[0].split(\' \')[1]];\n                        fieldSplit = RowHeaders[colHeader].split(\' \')[1].split(",");\n                        if (temp) {\n                            if (temp.data[RowHeaders[colHeader].split(\',\')[1]] && downloadableFields[fieldSplit[0] + \',\' + fieldSplit[1]]) {\n                                // Add a downloadable link if the field is set and downloadable\n                                href = loris.BaseURL + "/mri/jiv/get_file.php?file=" + temp.data[RowHeaders[colHeader].split(\',\')[1]];\n                                temp = React.createElement(\n                                    "a",\n                                    { href: href },\n                                    temp.data[RowHeaders[colHeader].split(\',\')[1]]\n                                );\n                            } else {\n                                temp = temp.data[RowHeaders[colHeader].split(\',\')[1]];\n                            }\n                        } else {\n                            temp = \'.\';\n                        }\n                        currow.push(temp);\n                    }\n                }\n                rowdata.push(currow);\n            }\n        }\n        return { \'rowdata\': rowdata, \'Identifiers\': Identifiers, \'RowHeaders\': RowHeaders, \'fileData\': fileData };\n    },\n    dismissAlert: function dismissAlert() {\n        // Used to dismiss alerts\n        this.setState({\n            alertLoaded: false,\n            alertSaved: false\n        });\n    },\n    resetQuery: function resetQuery() {\n        // Used to reset the current query\n        this.setState({\n            fields: [],\n            criteria: {},\n            selectedFields: {}\n        });\n    },\n    changeDataDisplay: function changeDataDisplay(displayID) {\n        // Change the display format of the data table\n        var rowdata = this.getRowData(displayID);\n        this.setState({\n            grouplevel: displayID,\n            rowData: rowdata\n        });\n    },\n    updateFilter: function updateFilter(filter) {\n        // Update the filter\n        var that = this;\n        this.setState(function (state) {\n            if (filter.children.length === 0) {\n                filter.session = that.props.AllSessions;\n            }\n            return { \'filter\': filter };\n        });\n    },\n    render: function render() {\n        // Renders the html for the component\n\n        var tabs = [],\n            tabsNav = [],\n            alert = React.createElement("div", null);\n\n        // Add the info tab\n        tabs.push(React.createElement(InfoTabPane, {\n            TabId: "Info",\n            UpdatedTime: this.props.UpdatedTime,\n            Loading: this.state.loading\n        }));\n\n        // Add the field select tab\n        tabs.push(React.createElement(FieldSelectTabPane, {\n            TabId: "DefineFields",\n            categories: this.props.categories,\n            onFieldChange: this.fieldChange,\n            selectedFields: this.state.selectedFields,\n            Visits: this.props.Visits,\n            fieldVisitSelect: this.fieldVisitSelect,\n            Loading: this.state.loading\n        }));\n\n        // Add the filter builder tab\n        tabs.push(React.createElement(FilterSelectTabPane, {\n            TabId: "DefineFilters",\n            categories: this.props.categories,\n            filter: this.state.filter,\n            updateFilter: this.updateFilter,\n            Visits: this.props.Visits,\n            Loading: this.state.loading\n        }));\n\n        // Define the data displayed type and add the view data tab\n        var displayType = this.state.grouplevel === 0 ? "Cross-sectional" : "Longitudinal";\n        tabs.push(React.createElement(ViewDataTabPane, {\n            TabId: "ViewData",\n            Fields: this.state.fields,\n            Criteria: this.state.criteria,\n            Sessions: this.getSessions(),\n            Data: this.state.rowData.rowdata,\n            RowInfo: this.state.rowData.Identifiers,\n            RowHeaders: this.state.rowData.RowHeaders,\n            FileData: this.state.rowData.fileData,\n            onRunQueryClicked: this.runQuery,\n            displayType: displayType,\n            changeDataDisplay: this.changeDataDisplay,\n            Loading: this.state.loading\n        }));\n\n        // Add the stats tab\n        tabs.push(React.createElement(StatsVisualizationTabPane, {\n            TabId: "Statistics",\n            Fields: this.state.rowData.RowHeaders,\n            Data: this.state.rowData.rowdata,\n            Loading: this.state.loading\n        }));\n\n        // Add the manage saved queries tab\n        tabs.push(React.createElement(ManageSavedQueriesTabPane, { TabId: "SavedQueriesTab",\n            userQueries: this.state.queryIDs.User,\n            globalQueries: this.state.queryIDs.Shared,\n            onSaveQuery: this.saveCurrentQuery,\n            queryDetails: this.state.savedQueries,\n            queriesLoaded: this.state.queriesLoaded,\n            Loading: this.state.loading\n        }));\n\n        // Display load alert if alert is present\n        if (this.state.alertLoaded) {\n            alert = React.createElement(\n                "div",\n                { className: "alert alert-success", role: "alert" },\n                React.createElement(\n                    "button",\n                    { type: "button", className: "close", "aria-label": "Close", onClick: this.dismissAlert },\n                    React.createElement(\n                        "span",\n                        { "aria-hidden": "true" },\n                        "\\xD7"\n                    )\n                ),\n                React.createElement(\n                    "strong",\n                    null,\n                    "Success"\n                ),\n                " Query Loaded."\n            );\n        }\n\n        // Display save alert if alert is present\n        if (this.state.alertSaved) {\n            alert = React.createElement(\n                "div",\n                { className: "alert alert-success", role: "alert" },\n                React.createElement(\n                    "button",\n                    { type: "button", className: "close", "aria-label": "Close", onClick: this.dismissAlert },\n                    React.createElement(\n                        "span",\n                        { "aria-hidden": "true" },\n                        "\\xD7"\n                    )\n                ),\n                React.createElement(\n                    "strong",\n                    null,\n                    "Success"\n                ),\n                " Query Saved."\n            );\n        }\n        var widthClass = "col-md-12";\n        var sideBar = React.createElement("div", null);\n\n        // Display the field sidebar for certain tabs\n        if (this.state.fields.length > 0 && this.state.ActiveTab !== \'ViewData\' && this.state.ActiveTab !== \'Statistics\' && this.state.ActiveTab !== \'Info\') {\n            widthClass = "col-md-10";\n            sideBar = React.createElement(\n                "div",\n                { className: "col-md-2" },\n                React.createElement(FieldsSidebar, {\n                    Fields: this.state.fields,\n                    Criteria: this.state.criteria,\n                    resetQuery: this.resetQuery\n                })\n            );\n        }\n        return React.createElement(\n            "div",\n            null,\n            alert,\n            React.createElement(\n                "div",\n                { className: widthClass },\n                React.createElement(\n                    "nav",\n                    { className: "nav nav-tabs" },\n                    React.createElement(\n                        "ul",\n                        { className: "nav nav-tabs navbar-left", "data-tabs": "tabs" },\n                        React.createElement(\n                            "li",\n                            { role: "presentation", className: "active" },\n                            React.createElement(\n                                "a",\n                                { href: "#Info", "data-toggle": "tab" },\n                                "Info"\n                            )\n                        ),\n                        React.createElement(\n                            "li",\n                            { role: "presentation" },\n                            React.createElement(\n                                "a",\n                                { href: "#DefineFields", "data-toggle": "tab" },\n                                "Define Fields"\n                            )\n                        ),\n                        React.createElement(\n                            "li",\n                            { role: "presentation" },\n                            React.createElement(\n                                "a",\n                                { href: "#DefineFilters", "data-toggle": "tab" },\n                                "Define Filters"\n                            )\n                        ),\n                        React.createElement(\n                            "li",\n                            { role: "presentation" },\n                            React.createElement(\n                                "a",\n                                { href: "#ViewData", "data-toggle": "tab" },\n                                "View Data"\n                            )\n                        ),\n                        React.createElement(\n                            "li",\n                            { role: "presentation" },\n                            React.createElement(\n                                "a",\n                                { href: "#Statistics", "data-toggle": "tab" },\n                                "Statistical Analysis"\n                            )\n                        )\n                    ),\n                    React.createElement(SavedQueriesList, {\n                        userQueries: this.state.queryIDs.User,\n                        globalQueries: this.state.queryIDs.Shared,\n                        queryDetails: this.state.savedQueries,\n                        queriesLoaded: this.state.queriesLoaded,\n                        onSelectQuery: this.loadSavedQuery,\n                        loadedQuery: this.state.loadedQuery\n                    })\n                ),\n                React.createElement(\n                    "div",\n                    { className: "tab-content" },\n                    tabs\n                )\n            ),\n            sideBar\n        );\n    }\n});\n\nRDataQueryApp = React.createFactory(DataQueryApp);';
}});
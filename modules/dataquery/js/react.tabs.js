!function(e){function n(a){if(t[a])return t[a].exports;var r=t[a]={exports:{},id:a,loaded:!1};return e[a].call(r.exports,r,r.exports,n),r.loaded=!0,r.exports}var t={};return n.m=e,n.c=t,n.p="",n(0)}({0:function(e,n,t){t(1)(t(25))},1:function(e,n){e.exports=function(e){"undefined"!=typeof execScript?execScript(e):eval.call(null,e)}},25:function(e,n){e.exports='/**\n *  The following file contains the components used for displaying the tab content\n *\n *  @author   Dave MacFarlane <david.macfarlane2@mcgill.ca>\n *  @author   Jordan Stirling <jstirling91@gmail.com>\n *  @license  http://www.gnu.org/licenses/gpl-3.0.txt GPLv3\n *  @link     https://github.com/mohadesz/Loris-Trunk\n */\n\n/*\n *  The following componet is used to indicate to users that their data is currently\n *  loading\n */\nLoading = React.createClass({\n    displayName: "Loading",\n\n    render: function render() {\n        return React.createElement(\n            "div",\n            { className: "row" },\n            React.createElement(\n                "h3",\n                { className: "text-center loading-header" },\n                "We are currently working hard to load your data. Please be patient."\n            ),\n            React.createElement(\n                "div",\n                { className: "spinner" },\n                React.createElement("div", { className: "bounce1" }),\n                React.createElement("div", { className: "bounce2" }),\n                React.createElement("div", { className: "bounce3" })\n            )\n        );\n    }\n});\n\n/*\n *  The following component is the base component for displaying the tab\'s contnet\n */\nTabPane = React.createClass({\n    displayName: "TabPane",\n\n    mixins: [React.addons.PureRenderMixin],\n    render: function render() {\n        var classList = "tab-pane";\n        if (this.props.Active) {\n            classList += " active";\n        }\n        if (this.props.Loading) {\n            return React.createElement(\n                "div",\n                { className: classList, id: this.props.TabId },\n                React.createElement(Loading, null)\n            );\n        }\n        return React.createElement(\n            "div",\n            { className: classList, id: this.props.TabId },\n            React.createElement(\n                "h1",\n                null,\n                this.props.Title\n            ),\n            this.props.children\n        );\n    }\n});\n\n/*\n *  The following component is used for displaying the info tab content\n */\nInfoTabPane = React.createClass({\n    displayName: "InfoTabPane",\n\n    mixins: [React.addons.PureRenderMixin],\n    render: function render() {\n        return React.createElement(\n            TabPane,\n            { Title: "Welcome to the Data Query Tool",\n                TabId: this.props.TabId, Active: true, Loading: this.props.Loading },\n            React.createElement(\n                "p",\n                null,\n                "Data was last updated on ",\n                this.props.UpdatedTime,\n                "."\n            ),\n            React.createElement(\n                "p",\n                null,\n                "Please define or use your query by using the following tabs."\n            ),\n            React.createElement(\n                "dl",\n                null,\n                React.createElement(\n                    "dt",\n                    null,\n                    "Define Fields"\n                ),\n                React.createElement(\n                    "dd",\n                    null,\n                    "Define the fields to be added to your query here."\n                ),\n                React.createElement(\n                    "dt",\n                    null,\n                    "Define Filters"\n                ),\n                React.createElement(\n                    "dd",\n                    null,\n                    "Define the criteria to filter the data for your query here."\n                ),\n                React.createElement(\n                    "dt",\n                    null,\n                    "View Data"\n                ),\n                React.createElement(\n                    "dd",\n                    null,\n                    "See the results of your query."\n                ),\n                React.createElement(\n                    "dt",\n                    null,\n                    "Statistical Analysis"\n                ),\n                React.createElement(\n                    "dd",\n                    null,\n                    "Visualize or see basic statistical measures from your query here."\n                ),\n                React.createElement(\n                    "dt",\n                    null,\n                    "Load Saved Query"\n                ),\n                React.createElement(\n                    "dd",\n                    null,\n                    "Load a previously saved query (by name) by selecting from this menu."\n                ),\n                React.createElement(\n                    "dt",\n                    null,\n                    "Manage Saved Queries"\n                ),\n                React.createElement(\n                    "dd",\n                    null,\n                    "Either save your current query or see the criteria of previously saved quer  ies here."\n                )\n            )\n        );\n    }\n});\n\n/*\n *  The following component is used for displaying the field select tab content\n */\nFieldSelectTabPane = React.createClass({\n    displayName: "FieldSelectTabPane",\n\n    render: function render() {\n        return React.createElement(\n            TabPane,\n            { TabId: this.props.TabId, Loading: this.props.Loading },\n            React.createElement(FieldSelector, { title: "Fields",\n                items: this.props.categories,\n                onFieldChange: this.props.onFieldChange,\n                selectedFields: this.props.selectedFields,\n                Visits: this.props.Visits,\n                fieldVisitSelect: this.props.fieldVisitSelect\n            })\n        );\n    }\n\n});\n\n/*\n *  The following component is used for displaying the filter builder tab content\n */\nFilterSelectTabPane = React.createClass({\n    displayName: "FilterSelectTabPane",\n\n    render: function render() {\n        return React.createElement(\n            TabPane,\n            { TabId: this.props.TabId, Loading: this.props.Loading },\n            React.createElement(FilterBuilder, { items: this.props.categories,\n                updateFilter: this.props.updateFilter,\n                filter: this.props.filter,\n                Visits: this.props.Visits\n            })\n        );\n    }\n});\n\n/*\n *  The following component is used for displaying the view data tab content\n */\nViewDataTabPane = React.createClass({\n    displayName: "ViewDataTabPane",\n\n    getInitialState: function getInitialState() {\n        return { \'sessions\': [] };\n    },\n    runQuery: function runQuery() {\n        // Wrapper function to run the current query\n        if (this.props.onRunQueryClicked) {\n            this.props.onRunQueryClicked(this.props.Fields, this.props.Sessions);\n        }\n    },\n    changeDataDisplay: function changeDataDisplay(displayID) {\n        // Wrapper function to change the data display type\n        this.props.changeDataDisplay(displayID);\n    },\n    getOrCreateProgressElement: function getOrCreateProgressElement(id) {\n        // Helper function to display the progress of downloading the downloadable\n        // fields into a ZIP folder\n        var element = document.getElementById(id),\n            progress;\n\n        if (element) {\n            return element;\n        }\n\n        progress = document.getElementById("progress");\n\n        element = document.createElement("div");\n        element.setAttribute("id", id);\n        progress.appendChild(element);\n        return element;\n    },\n    getOrCreateDownloadLink: function getOrCreateDownloadLink(fileName, type) {\n        // Helper function to create and click a downloadable link to download the\n        // downloadable fields into a ZIP folder\n        var element = document.getElementById("DownloadLink" + fileName),\n            parentEl,\n            el2;\n\n        if (element) {\n            return element;\n        }\n\n        parentEl = document.getElementById("downloadlinksUL");\n\n        element = document.createElement("a");\n        element.download = fileName;\n        element.type = type;\n        element.textContent = "Zip file: " + fileName;\n        element.setAttribute("id", "DownloadLink" + fileName);\n        el2 = document.createElement("li");\n        el2.appendChild(element);\n        parentEl.appendChild(el2);\n        return element;\n    },\n    downloadData: function downloadData() {\n        // Download the downloadable fields into a ZIP folder\n        // Makes use of a web worker to format and download the data\n        var zip = new JSZip(),\n            i = 0,\n            FileList = this.props.FileData,\n            CompleteMask = new Array(FileList.length),\n            saveworker,\n            dataURLs = [],\n            that = this,\n            multiLinkHandler = function multiLinkHandler(buffer) {\n            return function (ce) {\n                var downloadLink = document.getElementById("DownloadLink"),\n                    dv = new DataView(buffer),\n                    blb;\n\n                ce.preventDefault();\n                blb = new Blob([dv], { type: "application/zip" });\n\n                downloadLink.href = window.URL.createObjectURL(blb);\n                downloadLink.download = this.download;\n                downloadLink.type = "application/zip";\n                downloadLink.click();\n\n                window.URL.revokeObjectURL(downloadLink.href);\n            };\n        };\n\n        // Does this work if we hold a global reference instead of a closure\n        // to the object URL?\n        window.dataBlobs = [];\n\n        if (FileList.length < 100 || confirm("You are trying to download more than 100 files. This may be slow or crash your web browser.\\n\\nYou may want to consider splitting your query into more, smaller queries by defining more restrictive filters.\\n\\nPress OK to continue with attempting to download current files or cancel to abort.")) {\n            saveworker = new Worker(loris.BaseURL + \'/GetJS.php?Module=dataquery&file=workers/savezip.js\');\n            saveworker.addEventListener(\'message\', function (e) {\n                var link, progress, FileName, NewFileName, downloadLinks, i;\n                if (e.data.cmd === \'SaveFile\') {\n                    progress = that.getOrCreateProgressElement("download_progress");\n                    //progress.textContent = "Downloaded files";\n                    //hold a reference to the blob so that chrome doesn\'t release it. This shouldn\'t\n                    //be required.\n                    window.dataBlobs[e.data.FileNo - 1] = new Blob([e.data.buffer], { type: "application/zip" });;\n                    dataURLs[e.data.FileNo - 1] = window.URL.createObjectURL(window.dataBlobs[e.data.FileNo - 1]);\n\n                    link = that.getOrCreateDownloadLink(e.data.Filename, "application/zip");\n                    link.href = dataURLs[e.data.FileNo - 1];\n                    //link.onclick = multiLinkHandler(e.data.buffer);\n                    //link.href = "#";\n                    progress = that.getOrCreateProgressElement("zip_progress");\n                    progress.textContent = "";\n                } else if (e.data.cmd === \'Progress\') {\n                    progress = that.getOrCreateProgressElement("download_progress");\n                    progress.innerHTML = "Downloading files: <progress value=\\"" + e.data.Complete + "\\" max=\\"" + e.data.Total + "\\">" + e.data.Complete + " out of " + e.data.Total + "</progress>";\n                } else if (e.data.cmd === \'Finished\') {\n                    if (dataURLs.length === 1) {\n                        $("#downloadlinksUL li a")[0].click();\n                    }\n\n                    if (dataURLs.length > 1) {\n                        progress = document.getElementById("downloadlinks");\n                        progress.style.display = "initial";\n\n                        downloadLinks = $("#downloadlinksUL li a");\n                        for (i = 0; i < dataURLs.length; i += 1) {\n                            FileName = downloadLinks[i].id.slice("DownloadLinkFiles-".length, -4);\n                            NewFileName = "files-" + FileName + "of" + e.data.NumFiles + ".zip";\n                            downloadLinks[i].download = NewFileName;\n                            downloadLinks[i].href = dataURLs[i];\n                            downloadLinks[i].textContent = "Zip file: " + NewFileName;\n                        }\n                    }\n                    progress = that.getOrCreateProgressElement("download_progress");\n                    progress.textContent = "Finished generating zip files";\n                    //this.terminate();\n                } else if (e.data.cmd === \'CreatingZip\') {\n                    progress = that.getOrCreateProgressElement("zip_progress");\n                    progress.textContent = "Creating a zip file with current batch of downloaded files. Process may be slow before proceeding.";\n                }\n            });\n\n            saveworker.postMessage({ Files: FileList, BaseURL: loris.BaseURL });\n        }\n    },\n    render: function render() {\n        var downloadData;\n        var buttons = React.createElement(\n            "div",\n            { className: "row" },\n            React.createElement(\n                "div",\n                { className: "commands col-xs-12 form-group" },\n                React.createElement(\n                    "button",\n                    { className: "btn btn-primary", onClick: this.runQuery },\n                    "Run Query"\n                ),\n                React.createElement(\n                    "button",\n                    { className: "btn btn-primary", onClick: this.downloadData },\n                    "Download Data as ZIP"\n                )\n            ),\n            React.createElement("div", { id: "progress", className: "col-xs-12" }),\n            React.createElement(\n                "div",\n                { id: "downloadlinks", className: "col-xs-12" },\n                React.createElement("ul", { id: "downloadlinksUL" })\n            )\n        );\n        var criteria = [];\n        for (var el in this.props.Criteria) {\n            if (!this.props.Criteria.hasOwnProperty(el)) {\n                continue;\n            }\n            var item = this.props.Criteria[el];\n            if (item === undefined) {\n                criteria.push(React.createElement(\n                    "div",\n                    { className: "alert alert-warning", role: "alert" },\n                    el,\n                    " has been added as a filter but not had criteria defined."\n                ));\n            } else {\n                criteria.push(React.createElement(\n                    "div",\n                    { className: "row" },\n                    React.createElement(\n                        "span",\n                        { className: "col-sm-3" },\n                        el\n                    ),\n                    React.createElement(\n                        "span",\n                        { className: "col-sm-3" },\n                        item.operator\n                    ),\n                    React.createElement(\n                        "span",\n                        { className: "col-sm-3" },\n                        item.value\n                    )\n                ));\n            }\n        }\n        return React.createElement(\n            TabPane,\n            { TabId: this.props.TabId, Loading: this.props.Loading },\n            React.createElement(\n                "h2",\n                null,\n                "Query Criteria"\n            ),\n            criteria,\n            " ",\n            buttons,\n            React.createElement(\n                "div",\n                { className: "form-group form-horizontal row" },\n                React.createElement(\n                    "label",\n                    { "for": "selected-input", className: "col-sm-1 control-label" },\n                    "Data"\n                ),\n                React.createElement(\n                    "div",\n                    { className: "col-sm-4" },\n                    React.createElement(\n                        "div",\n                        { className: "btn-group" },\n                        React.createElement(\n                            "button",\n                            { id: "selected-input", type: "button", className: "btn btn-default dropdown-toggle", "data-toggle": "dropdown" },\n                            React.createElement(\n                                "span",\n                                { id: "search_concept" },\n                                this.props.displayType\n                            ),\n                            React.createElement("span", { className: "caret" })\n                        ),\n                        React.createElement(\n                            "ul",\n                            { className: "dropdown-menu", role: "menu" },\n                            React.createElement(\n                                "li",\n                                { onClick: this.changeDataDisplay.bind(this, 0) },\n                                React.createElement(\n                                    "div",\n                                    { className: "col-sm-12" },\n                                    React.createElement(\n                                        "h5",\n                                        { className: "" },\n                                        "Cross-sectional"\n                                    )\n                                )\n                            ),\n                            React.createElement(\n                                "li",\n                                { onClick: this.changeDataDisplay.bind(this, 1) },\n                                React.createElement(\n                                    "div",\n                                    { className: "col-sm-12" },\n                                    React.createElement(\n                                        "h5",\n                                        { className: "" },\n                                        "Longitudinal"\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            ),\n            React.createElement(StaticDataTable, {\n                Headers: this.props.RowHeaders,\n                RowNumLabel: "Identifiers",\n                Data: this.props.Data,\n                RowNameMap: this.props.RowInfo\n            })\n        );\n    }\n});\n\n/*\n *  The following component is used for displaying the scatterplot graph\n *  in the stats tab using flot. The following code is a modification of\n *  code used in the couchApp implementation of the DQT\n */\nScatterplotGraph = React.createClass({\n    displayName: "ScatterplotGraph",\n\n    lsFit: function lsFit(data) {\n        var i = 0,\n            means = jStat(data).mean(),\n            xmean = means[0],\n            ymean = means[1],\n            interim = 0,\n            numerator = 0,\n            denominator = 0,\n            slope,\n            xi,\n            yi;\n\n        for (i = 0; i < data.length; i += 1) {\n            xi = data[i][0];\n            yi = data[i][1];\n            numerator += (xi - xmean) * (yi - ymean);\n            denominator += (xi - xmean) * (xi - xmean);\n        }\n\n        slope = numerator / denominator;\n\n        return [ymean - slope * xmean, slope];\n    },\n    minmaxx: function minmaxx(arr) {\n        var i, min, max;\n\n        for (i = 0; i < arr.length; i += 1) {\n            if (arr[i][0] < min || min === undefined) {\n                if (arr[i][0] !== undefined && arr[i][0] !== null) {\n                    min = arr[i][0];\n                }\n            }\n            if (arr[i][0] > max || max === undefined) {\n                if (arr[i][0] !== undefined && arr[i][0] !== null) {\n                    max = arr[i][0];\n                }\n            }\n        }\n        return [min, max];\n    },\n    updateScatterplot: function updateScatterplot() {\n        var xaxis = document.getElementById("scatter-xaxis").value,\n            yaxis = document.getElementById("scatter-yaxis").value,\n            grouping = document.getElementById("scatter-group").value,\n            data = this.props.Data,\n            points = [],\n            min,\n            max,\n            field1 = [],\n            field2 = [],\n            grouped_points = {},\n            i = 0,\n            group_label,\n            minmax,\n            LS,\n            slope,\n            start,\n            plots = [],\n            label,\n            plotY = function plotY(x) {\n            return [x, start + slope * x];\n        },\n            dataset;\n\n        for (i = 0; i < data.length; i += 1) {\n            points.push([data[i][xaxis], data[i][yaxis]]);\n            field1.push(data[i][xaxis]);\n            field2.push(data[i][yaxis]);\n            if (grouping) {\n                group_label = data[i][grouping];\n                if (!(grouped_points[group_label] instanceof Array)) {\n                    grouped_points[group_label] = [];\n                }\n                grouped_points[group_label].push([data[i][xaxis], data[i][yaxis]]);\n            }\n        }\n\n        if (grouping === \'ungrouped\') {\n            minmax = this.minmaxx(points);\n            min = minmax[0];\n            max = minmax[1];\n            LS = this.lsFit(points);\n            slope = LS[1];\n            start = LS[0];\n\n            $.plot("#scatterplotdiv", [{\n\n                label: \'Data Points\',\n                data: points,\n                points: { show: true }\n            }, // Least Squares Fit\n            {\n                label: \'Least Squares Fit\',\n                data: jStat.seq(min, max, 3, plotY),\n                lines: { show: true }\n            }], {});\n        } else {\n            minmax = this.minmaxx(points);\n            min = minmax[0];\n            max = minmax[1];\n            i = 0;\n\n            for (dataset in grouped_points) {\n                if (grouped_points.hasOwnProperty(dataset)) {\n                    label = document.getElementById("scatter-group").selectedOptions.item(0).textContent + " = " + dataset;\n                    plots.push({\n                        color: i,\n                        label: dataset,\n                        data: grouped_points[dataset],\n                        points: { show: true }\n                    });\n                    LS = this.lsFit(grouped_points[dataset]);\n                    //LS = lsFit(grouped_points[dataset].convertNumbers());\n                    slope = LS[1];\n                    start = LS[0];\n                    plots.push({\n                        color: i,\n                        // label: "LS Fit for " + dataset,\n                        data: jStat.seq(min, max, 3, plotY),\n                        lines: { show: true }\n                    });\n                    i += 1;\n                }\n            }\n            $.plot("#scatterplotdiv", plots, {});\n        }\n\n        $("#correlationtbl tbody").children().remove();\n        $("#correlationtbl tbody").append("<tr><td>" + jStat.covariance(field1, field2) + "</td><td>" + jStat.corrcoeff(field1, field2) + "</td></tr>");\n    },\n    render: function render() {\n        var options = this.props.Fields.map(function (element, key) {\n            console.log(element);\n            return React.createElement(\n                "option",\n                { value: key },\n                element\n            );\n        });\n        scatterStyle = {\n            width: "500px",\n            height: "500px"\n        };\n        return React.createElement(\n            "div",\n            null,\n            React.createElement(\n                "h2",\n                null,\n                "Scatterplot"\n            ),\n            React.createElement(\n                "div",\n                { className: "col-xs-4 col-md-3" },\n                "Column for X Axis"\n            ),\n            React.createElement(\n                "div",\n                { className: "col-xs-8 col-md-3" },\n                React.createElement(\n                    "select",\n                    { id: "scatter-xaxis", onChange: this.updateScatterplot },\n                    React.createElement(\n                        "option",\n                        null,\n                        "None"\n                    ),\n                    options\n                )\n            ),\n            React.createElement(\n                "div",\n                { className: "col-xs-4 col-md-3" },\n                "Column for Y Axis"\n            ),\n            React.createElement(\n                "div",\n                { className: "col-xs-8 col-md-3" },\n                React.createElement(\n                    "select",\n                    { id: "scatter-yaxis", onChange: this.updateScatterplot },\n                    React.createElement(\n                        "option",\n                        null,\n                        "None"\n                    ),\n                    options\n                )\n            ),\n            React.createElement(\n                "div",\n                { className: "col-xs-4 col-md-3" },\n                "Group by column"\n            ),\n            React.createElement(\n                "div",\n                { className: "col-xs-8 col-md-3" },\n                React.createElement(\n                    "select",\n                    { id: "scatter-group", onChange: this.updateScatterplot },\n                    React.createElement(\n                        "option",\n                        null,\n                        "None"\n                    ),\n                    options\n                )\n            ),\n            React.createElement(\n                "h3",\n                null,\n                "Scatterplot"\n            ),\n            React.createElement("div", { id: "scatterplotdiv", style: scatterStyle }),\n            React.createElement(\n                "h3",\n                null,\n                "Statistics"\n            ),\n            React.createElement(\n                "table",\n                { id: "correlationtbl" },\n                React.createElement(\n                    "thead",\n                    null,\n                    React.createElement(\n                        "tr",\n                        null,\n                        React.createElement(\n                            "th",\n                            null,\n                            "Covariance"\n                        ),\n                        React.createElement(\n                            "th",\n                            null,\n                            "Correlation Coefficient"\n                        )\n                    )\n                ),\n                React.createElement("tbody", null)\n            )\n        );\n    }\n});\n\n/*\n *  The following component is used for displaying the stats tab content\n */\nStatsVisualizationTabPane = React.createClass({\n    displayName: "StatsVisualizationTabPane",\n\n    getDefaultProps: function getDefaultProps() {\n        return {\n            \'Data\': []\n        };\n    },\n    getInitialState: function getInitialState() {\n        return {\n            \'displayed\': false\n        };\n    },\n    render: function render() {\n        // if(this.state.displayed === false) {\n        //     var content = <div>Statistics not yet calculated.</div>;\n        //     // return <TabPane content={content} TabId={this.props.TabId} />;\n        // } else \n        if (this.props.Data.length === 0) {\n            var content = React.createElement(\n                "div",\n                null,\n                "Could not calculate stats, query not run"\n            );\n            // return <TabPane content={content} TabId={this.props.TabId} />;\n        } else {\n            var stats = jStat(this.props.Data),\n                min = stats.min(),\n                max = stats.max(),\n                stddev = stats.stdev(),\n                mean = stats.mean(),\n                meandev = stats.meandev(),\n                meansqerr = stats.meansqerr(),\n                quartiles = stats.quartiles(),\n                rows = [];\n\n            for (var i = 0; i < this.props.Fields.length; i += 1) {\n                rows.push(React.createElement(\n                    "tr",\n                    null,\n                    React.createElement(\n                        "td",\n                        null,\n                        this.props.Fields[i]\n                    ),\n                    React.createElement(\n                        "td",\n                        null,\n                        min[i]\n                    ),\n                    React.createElement(\n                        "td",\n                        null,\n                        max[i]\n                    ),\n                    React.createElement(\n                        "td",\n                        null,\n                        stddev[i]\n                    ),\n                    React.createElement(\n                        "td",\n                        null,\n                        mean[i]\n                    ),\n                    React.createElement(\n                        "td",\n                        null,\n                        meandev[i]\n                    ),\n                    React.createElement(\n                        "td",\n                        null,\n                        meansqerr[i]\n                    ),\n                    React.createElement(\n                        "td",\n                        null,\n                        quartiles[i][0]\n                    ),\n                    React.createElement(\n                        "td",\n                        null,\n                        quartiles[i][1]\n                    ),\n                    React.createElement(\n                        "td",\n                        null,\n                        quartiles[i][2]\n                    )\n                ));\n            }\n\n            var statsTable = React.createElement(\n                "table",\n                { className: "table table-hover table-primary table-bordered colm-freeze" },\n                React.createElement(\n                    "thead",\n                    null,\n                    React.createElement(\n                        "tr",\n                        { className: "info" },\n                        React.createElement(\n                            "th",\n                            null,\n                            "Measure"\n                        ),\n                        React.createElement(\n                            "th",\n                            null,\n                            "Min"\n                        ),\n                        React.createElement(\n                            "th",\n                            null,\n                            "Max"\n                        ),\n                        React.createElement(\n                            "th",\n                            null,\n                            "Standard Deviation"\n                        ),\n                        React.createElement(\n                            "th",\n                            null,\n                            "Mean"\n                        ),\n                        React.createElement(\n                            "th",\n                            null,\n                            "Mean Deviation"\n                        ),\n                        React.createElement(\n                            "th",\n                            null,\n                            "Mean Squared Error"\n                        ),\n                        React.createElement(\n                            "th",\n                            null,\n                            "First Quartile"\n                        ),\n                        React.createElement(\n                            "th",\n                            null,\n                            "Second Quartile"\n                        ),\n                        React.createElement(\n                            "th",\n                            null,\n                            "Third Quartile"\n                        )\n                    )\n                ),\n                React.createElement(\n                    "tbody",\n                    null,\n                    rows\n                )\n            );\n\n            var content = React.createElement(\n                "div",\n                null,\n                React.createElement(\n                    "h2",\n                    null,\n                    "Basic Statistics"\n                ),\n                statsTable,\n                React.createElement(ScatterplotGraph, {\n                    Fields: this.props.Fields,\n                    Data: this.props.Data\n                })\n            );\n        }\n        return React.createElement(\n            TabPane,\n            { TabId: this.props.TabId, Loading: this.props.Loading },\n            content\n        );\n    }\n});\n\n/*\n *  The following component is used for displaying a popout dialog for saving the current\n *  query\n */\nSaveQueryDialog = React.createClass({\n    displayName: "SaveQueryDialog",\n\n    getInitialState: function getInitialState() {\n        return {\n            \'queryName\': \'\',\n            \'shared\': false\n        };\n    },\n    editName: function editName(e) {\n        this.setState({ queryName: e.target.value });\n    },\n    editPublic: function editPublic(e) {\n        this.setState({ shared: e.target.checked });\n    },\n    onSaveClicked: function onSaveClicked() {\n        // Should do validation before doing anything here.. ie query name is entered, doesn\'t already\n        // exist, there are fields selected..\n        if (this.props.onSaveClicked) {\n            this.props.onSaveClicked(this.state.queryName, this.state.shared);\n        }\n    },\n    onDismissClicked: function onDismissClicked() {\n        if (this.props.onDismissClicked) {\n            this.props.onDismissClicked();\n        }\n    },\n    render: function render() {\n        return React.createElement(\n            "div",\n            { className: "modal show" },\n            React.createElement(\n                "div",\n                { className: "modal-dialog" },\n                React.createElement(\n                    "div",\n                    { className: "modal-content" },\n                    React.createElement(\n                        "div",\n                        { className: "modal-header" },\n                        React.createElement(\n                            "button",\n                            { type: "button", className: "close", "aria-label": "Close", onClick: this.onDismissClicked },\n                            React.createElement(\n                                "span",\n                                { "aria-hidden": "true" },\n                                "\\xD7"\n                            )\n                        ),\n                        React.createElement(\n                            "h4",\n                            { className: "modal-title", id: "myModalLabel" },\n                            "Save Current Query"\n                        )\n                    ),\n                    React.createElement(\n                        "div",\n                        { className: "modal-body" },\n                        React.createElement(\n                            "p",\n                            null,\n                            "Enter the name you would like to save your query under here:"\n                        ),\n                        React.createElement(\n                            "div",\n                            { className: "input-group" },\n                            "Query Name: ",\n                            React.createElement("input", { type: "text", className: "form-control", placeholder: "My Query", value: this.state.queryName, onChange: this.editName })\n                        ),\n                        React.createElement(\n                            "p",\n                            null,\n                            "Make query a publicly shared query? ",\n                            React.createElement("input", { type: "checkbox", checked: this.state.shared ? \'checked\' : \'\', onChange: this.editPublic, "aria-label": "Shared Query" })\n                        )\n                    ),\n                    React.createElement(\n                        "div",\n                        { className: "modal-footer" },\n                        React.createElement(\n                            "button",\n                            { type: "button", className: "btn btn-default", onClick: this.onDismissClicked },\n                            "Close"\n                        ),\n                        React.createElement(\n                            "button",\n                            { type: "button", className: "btn btn-primary", onClick: this.onSaveClicked },\n                            "Save changes"\n                        )\n                    )\n                )\n            )\n        );\n    }\n});\n\n/*\n *  The following component is used for displaying the filter of a individual query in a tree\n *  like structure\n */\nManageSavedQueryFilter = React.createClass({\n    displayName: "ManageSavedQueryFilter",\n\n    render: function render() {\n        var filterItem,\n            filter = this.props.filterItem;\n        if (filter.activeOperator) {\n            var logicOp = "AND",\n                children = filter.children.map(function (element, key) {\n                return React.createElement(ManageSavedQueryFilter, {\n                    filterItem: element\n                });\n            });\n            if (filter.activeOperator === 1) {\n                logicOp = "OR";\n            }\n            return React.createElement(\n                "li",\n                null,\n                React.createElement(\n                    "span",\n                    null,\n                    logicOp\n                ),\n                React.createElement(\n                    "ul",\n                    { className: "savedQueryTree" },\n                    children\n                )\n            );\n        } else {\n            filter = this.props.filterItem;\n            if (filter.instrument) {\n                var operator;\n                switch (filter.operator) {\n                    case "equal":\n                        operator = "=";\n                        break;\n                    case "notEqual":\n                        operator = "!=";\n                        break;\n                    case "lessThanEqual":\n                        operator = "<=";\n                        break;\n                    case "greaterThanEqual":\n                        operator = ">=";\n                        break;\n                    default:\n                        operator = filter.operator;\n                        break;\n                }\n                filterItem = React.createElement(\n                    "span",\n                    null,\n                    filter.instrument,\n                    ",",\n                    filter.field,\n                    " ",\n                    operator,\n                    " ",\n                    filter.value\n                );\n            } else {\n                filterItem = React.createElement(\n                    "span",\n                    null,\n                    filter.Field,\n                    " ",\n                    filter.Operator,\n                    " ",\n                    filter.Value\n                );\n            }\n        }\n        return React.createElement(\n            "li",\n            null,\n            filterItem\n        );\n    }\n});\n\n/*\n *  The following component is used for displaying the individual saved queries in the\n *  manage saved queries tab\n */\nManageSavedQueryRow = React.createClass({\n    displayName: "ManageSavedQueryRow",\n\n    getDefaultProps: function getDefaultProps() {\n        return {\n            \'Name\': \'Unknown\',\n            \'Query\': {\n                \'Fields\': []\n            }\n        };\n    },\n    render: function render() {\n        var fields = [];\n        var filters;\n        if (this.props.Query.Fields && Array.isArray(this.props.Query.Fields)) {\n            for (var i = 0; i < this.props.Query.Fields.length; i += 1) {\n                fields.push(React.createElement(\n                    "li",\n                    null,\n                    this.props.Query.Fields[i]\n                ));\n            }\n        } else if (this.props.Query.Fields) {\n            for (var instrument in this.props.Query.Fields) {\n                for (var field in this.props.Query.Fields[instrument]) {\n                    if (field === "allVisits") {\n                        continue;\n                    } else {\n                        fields.push(React.createElement(\n                            "li",\n                            null,\n                            instrument,\n                            ",",\n                            field\n                        ));\n                    }\n                }\n            }\n        }\n\n        if (fields.length === 0) {\n            fields.push(React.createElement(\n                "li",\n                null,\n                "No fields defined"\n            ));\n        }\n\n        if (this.props.Query.Conditions) {\n            var operator, filter;\n            if (this.props.Query.Conditions.activeOperator) {\n                if (this.props.Query.Conditions.children) {\n                    if (this.props.Query.Conditions.activeOperator === 0) {\n                        operator = React.createElement(\n                            "span",\n                            null,\n                            "AND"\n                        );\n                    } else {\n                        operator = React.createElement(\n                            "span",\n                            null,\n                            "OR"\n                        );\n                    }\n                    filter = this.props.Query.Conditions.children.map(function (element, key) {\n                        return React.createElement(ManageSavedQueryFilter, {\n                            filterItem: element\n                        });\n                    });\n                } else {\n                    operator = React.createElement(\n                        "span",\n                        null,\n                        "No filters defined"\n                    );\n                }\n            } else {\n                if (this.props.Query.Conditions.length === 0) {\n                    operator = React.createElement(\n                        "span",\n                        null,\n                        "No filters defined"\n                    );\n                } else {\n                    operator = React.createElement(\n                        "span",\n                        null,\n                        "AND"\n                    );\n                    filter = this.props.Query.Conditions.map(function (element, key) {\n                        return React.createElement(ManageSavedQueryFilter, {\n                            filterItem: element\n                        });\n                    });\n                }\n            }\n            filters = React.createElement(\n                "div",\n                { className: "tree" },\n                React.createElement(\n                    "ul",\n                    { className: "firstUL savedQueryTree" },\n                    React.createElement(\n                        "li",\n                        null,\n                        operator,\n                        React.createElement(\n                            "ul",\n                            { className: "savedQueryTree" },\n                            filter\n                        )\n                    )\n                )\n            );\n        }\n        if (!filters) {\n            filters = React.createElement(\n                "strong",\n                null,\n                "No filters defined"\n            );\n        }\n        return React.createElement(\n            "tr",\n            null,\n            React.createElement(\n                "td",\n                null,\n                this.props.Name\n            ),\n            React.createElement(\n                "td",\n                null,\n                React.createElement(\n                    "ul",\n                    null,\n                    fields\n                )\n            ),\n            React.createElement(\n                "td",\n                null,\n                filters\n            )\n        );\n    }\n});\n\n/*\n *  The following component is used for displaying the manage saved queries tab content\n */\nManageSavedQueriesTabPane = React.createClass({\n    displayName: "ManageSavedQueriesTabPane",\n\n    dismissDialog: function dismissDialog() {\n        this.setState({ \'savePrompt\': false });\n    },\n    getInitialState: function getInitialState() {\n        return {\n            \'savePrompt\': false,\n            \'queriesLoaded\': false,\n            \'queries\': {}\n        };\n    },\n    saveQuery: function saveQuery() {\n        this.setState({ \'savePrompt\': true });\n    },\n    savedQuery: function savedQuery(name, shared) {\n        if (this.props.onSaveQuery) {\n            this.props.onSaveQuery(name, shared);\n        }\n        this.setState({ \'savePrompt\': false });\n    },\n    getDefaultProps: function getDefaultProps() {\n        return {\n            userQueries: [],\n            globalQueries: [],\n            queriesLoaded: false,\n            queryDetails: {}\n        };\n    },\n    render: function render() {\n        var queryRows = [];\n        if (this.props.queriesLoaded) {\n            for (var i = 0; i < this.props.userQueries.length; i += 1) {\n                var query = this.props.queryDetails[this.props.userQueries[i]];\n                var name = "Unnamed Query: " + this.props.userQueries[i];\n                if (query.Meta.name) {\n                    name = query.Meta.name;\n                }\n\n                queryRows.push(React.createElement(ManageSavedQueryRow, { Name: name, Query: query }));\n            }\n        } else {\n            queryRows.push(React.createElement(\n                "tr",\n                null,\n                React.createElement(\n                    "td",\n                    { colSpan: "3" },\n                    "Loading saved query details"\n                )\n            ));\n        }\n\n        var savePrompt = \'\';\n        if (this.state.savePrompt) {\n            savePrompt = React.createElement(SaveQueryDialog, { onDismissClicked: this.dismissDialog, onSaveClicked: this.savedQuery });\n        }\n        var content = React.createElement(\n            "div",\n            null,\n            React.createElement(\n                "h2",\n                null,\n                "Your currently saved queries"\n            ),\n            React.createElement(\n                "button",\n                { onClick: this.saveQuery },\n                "Save Current Query"\n            ),\n            React.createElement(\n                "table",\n                { className: "table table-hover table-primary table-bordered colm-freeze" },\n                React.createElement(\n                    "thead",\n                    null,\n                    React.createElement(\n                        "tr",\n                        { className: "info" },\n                        React.createElement(\n                            "th",\n                            null,\n                            "Query Name"\n                        ),\n                        React.createElement(\n                            "th",\n                            null,\n                            "Fields"\n                        ),\n                        React.createElement(\n                            "th",\n                            null,\n                            "Filters"\n                        )\n                    )\n                ),\n                React.createElement(\n                    "tbody",\n                    null,\n                    queryRows\n                )\n            ),\n            savePrompt\n        );\n        return React.createElement(\n            TabPane,\n            { TabId: this.props.TabId, Loading: this.props.Loading },\n            content\n        );\n    }\n});';
}});
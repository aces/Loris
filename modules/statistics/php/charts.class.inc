<?php declare(strict_types=1);
/**
 * The module to display study statistics
 *
 * PHP Version 7
 *
 * @category Loris
 * @package  Main
 * @author   Dave MacFarlane <driusan@bic.mni.mcgill.ca>
 * @license  http://www.gnu.org/licenses/gpl-3.0.txt GPLv3
 * @link     https://github.com/aces/Loris
 */
namespace LORIS\statistics;
use \Psr\Http\Message\ServerRequestInterface;
use \Psr\Http\Message\ResponseInterface;
use \Psr\Http\Server\RequestHandlerInterface;


/**
 * The module to display study statistics
 *
 * PHP Version 7
 *
 * @category Loris
 * @package  Main
 * @author   Dave MacFarlane <driusan@bic.mni.mcgill.ca>
 * @license  http://www.gnu.org/licenses/gpl-3.0.txt GPLv3
 * @link     https://github.com/aces/Loris
 */
class Charts extends \NDB_Page
{
    public $skipTemplate = true;
    /**
     * Checking user's permission
     *
     * @param \User $user The user whose access is being checked
     *
     * @return bool
     */
    function _hasAccess(\User $user) : bool
    {
        return $user->hasPermission('data_entry');
    }

    /**
     * Overrides the parent process function to re-add the application/json header
     * which otherwise sometimes gets removed if the middleware shortcircuits out
     * before calling handle.
     *
     * @param ServerRequestInterface  $request The PSR7 request
     * @param RequestHandlerInterface $handler The handler function
     *
     * @return ResponseInterface the PSR15 response that was generated by the
     * middleware
     */
    public function process(
        ServerRequestInterface $request,
        RequestHandlerInterface $handler
    ) : ResponseInterface {
        return parent::process($request, $handler)->withHeader(
            'Content-Type',
            'application/json'
        );
    }

    /**
     * Handle the incoming request.
     *
     * @param ServerRequestInterface $request The incoming PSR7 request
     *
     * @return ResponseInterface
     */
    public function handle(ServerRequestInterface $request) : ResponseInterface
    {
        if ($request->getMethod() !== 'GET') {
            return new \LORIS\Http\Response\JSON\MethodNotAllowed(['GET']);
        }

        // Strip any prefix of '/' to ensure that we don't have an empty string
        // when splitting the path, then there should be exactly 2 parts left,
        // "charts", and the endpoint requested.
        $url       = ltrim($request->getURI()->getPath(), '/');
        $pathparts = explode('/', $url);
        if (count($pathparts) != 2) {
            return new \LORIS\Http\Response\JSON\NotFound();
        }
        switch ($pathparts[1]) {
        case 'siterecruitment_pie':
            return $this->_handleSitePieData();
        case 'siterecruitment_bysex':
            return $this->_handleSiteSexBreakdown();
        case 'scans_bymonth':
            return $this->_handleScansByMonth();
        case 'siterecruitment_line':
            return $this->_handleSiteLineData();
        default:
            return new \LORIS\Http\Response\JSON\NotFound();
        }
    }

    /**
     * Handle an incoming request for pie data.
     *
     * @return ResponseInterface
     */
    private function _handleSitePieData()
    {
        $DB = \NDB_Factory::singleton()->database();

        $recruitmentBySiteData = [];
        $user          = \NDB_Factory::singleton()->user();
        $list_of_sites = $user->getStudySites();

        $data = $DB->pselectColWithIndexKey(
            "
            SELECT COUNT(c.CandID), c.RegistrationCenterID as CenterID
                FROM candidate c
                WHERE c.Active='Y' AND c.Entity_type='Human'
                GROUP BY c.RegistrationCenterID
        ",
            [],
            "CenterID"
        );

        foreach ($list_of_sites as $siteID => $siteName) {

            $recruitmentBySiteData[] = [
                "label" => $siteName,
                "total" => intval($data[$siteID]) ?? 0,
            ];
        }
        return new \LORIS\Http\Response\JsonResponse($recruitmentBySiteData);
    }

    /**
     * Handle an incoming request for site sex breakdown.
     *
     * @return ResponseInterface
     */
    private function _handleSiteSexBreakdown()
    {
        $DB            = \NDB_Factory::singleton()->database();
        $sexData       = [];
        $user          = \NDB_Factory::singleton()->user();
        $list_of_sites = $user->getStudySites();

        $data           = $DB->pselect(
            "
                SELECT COUNT(c.CandID) as Count,
                    c.RegistrationCenterID as SiteID,
                    c.Sex as Sex
                FROM candidate c
                WHERE c.Active='Y' AND c.Entity_type='Human'
                GROUP BY c.RegistrationCenterID, c.Sex",
            []
        );
        $processed_data = [];
        foreach ($data as $row) {
            $siteid = $row['SiteID'];
            $count  = intval($row['Count']);
            $sex    = strtolower($row['Sex']);
            if (!isset($processed_data[$siteid])) {
                $processed_data[$siteid] = [
                    strtolower($sex) => $count
                ];
            } else {
                assert(!isset($processed_data[$siteid][$sex]));
                $processed_data[$siteid][$sex] = $count;
            }
        }
        foreach ($list_of_sites as $siteID => $siteName) {
            $sexData['labels'][] = $siteName;

            $sexData['datasets']['female'][]
                = $processed_data[$siteID]['female'] ?? 0;

            $sexData['datasets']['male'][]
                = $processed_data[$siteID]['male'] ?? 0;
        }
        return (new \LORIS\Http\Response\JsonResponse($sexData));
    }

    /**
     * Handle an incoming request for monthly progression
     *
     * @return ResponseInterface
     */
    private function _handleScansByMonth()
    {
        $DB = \NDB_Factory::singleton()->database();

        $scanData = [];
        // Run a query to get all the data. Order matters to ensure that the
        // labels are calculated in the correct order.
        $data = $DB->pselect(
            "SELECT s.CenterID,
                CONCAT(MONTH(pf.Value), '-', YEAR(pf.Value)) as datelabel,
                COUNT(distinct s.ID) as count
            FROM files f
            LEFT JOIN parameter_file pf USING (FileID)
            LEFT JOIN session s ON (s.ID=f.SessionID)
            JOIN parameter_type pt USING (ParameterTypeID)
            WHERE pt.Name='acquisition_date'
            GROUP BY MONTH(pf.Value), YEAR(pf.Value), s.CenterID, datelabel
            ORDER BY YEAR(pf.Value), MONTH(pf.Value), s.CenterID",
            []
        );

        // Create the labels.
        //
        // We want to ensure that every month label appear exactly once and
        // in order, but the same label may appear multiple times across different
        // sites. Since the query was ordered, we use a new associative array
        // of labels and set the keys to to an arbitrary value (true) in order to
        // strip out duplicates, then take the keys of the resulting array once
        // done. The result should be an ordered numeric array with each label
        // for the chart in it exactly once.
        $labels = [];
        foreach ($data as $row) {
            $labels[$row['datelabel']] = true;
        }
        $scanData['labels'] = array_keys($labels);

        // Massage the data into the appropriate format per site.
        $user          = \NDB_Factory::singleton()->user();
        $list_of_sites = $user->getStudySites();
        foreach ($list_of_sites as $siteID => $siteName) {
            $scanData['datasets'][] = [
                "name" => $siteName,
                "data" => $this->_getScansPerMonthData(
                    $data,
                    $siteID,
                    $scanData['labels']
                )
            ];
        }
        return (new \LORIS\Http\Response\JsonResponse($scanData));
    }

    /**
     * Helper to get the scans per month data in the correct format for a
     * given site
     *
     * @param array $data   The data for all sites.
     * @param int   $siteID The site to get the monthly data for.
     * @param array $labels An array of all valid labels. (Note that not
     *                      all labels may have data in $data, in which
     *                      case this function must include a "0" to maintain
     *                      order.)
     *
     * @return array An indexed array of data for site in the order of $labels
     */
    private function _getScansPerMonthData(
        array $data,
        int $siteID,
        array $labels
    ) : array {
        $sitedata   = array_filter(
            $data,
            function ($row) use ($siteID) {
                return $row['CenterID'] == $siteID;
            }
        );
        $mappeddata = [];
        foreach ($sitedata as $row) {
            $mappeddata[$row['datelabel']] = $row['count'];
        }

        $data = [];
        foreach ($labels as $i => $label) {
            $data[$i] = $mappeddata[$label] ?? 0;
        }
        return $data;
    }

    /**
     * Helper to handle the siterecruitment_line endpoint.
     *
     * @return ResponseInterface
     */
    private function _handleSiteLineData()
    {
        $DB = \NDB_Factory::singleton()->database();

        $recruitmentData      = [];
        $recruitmentStartDate = $DB->pselectOne(
            "SELECT MIN(Date_registered) FROM candidate",
            []
        );
        $recruitmentEndDate   = $DB->pselectOne(
            "SELECT MAX(Date_registered) FROM candidate",
            []
        );

        if ($recruitmentStartDate !== null
            && $recruitmentEndDate !== null
        ) {
            $recruitmentData['labels'] = $this->_createSiteLineChartLabels(
                new \DateTimeImmutable($recruitmentStartDate),
                new \DateTimeImmutable($recruitmentEndDate)
            );
        }

        $user          = \NDB_Factory::singleton()->user();
        $list_of_sites = $user->getStudySites();

        $recruitment_summary = $DB->pselect(
            "SELECT COUNT(c.CandID) as Count,
            MONTH(c.Date_registered) as Month,
            YEAR(c.Date_registered) as Year,
            c.RegistrationCenterID as SiteID
                FROM candidate c
                    WHERE c.Entity_type='Human'
                GROUP BY MONTH(c.Date_registered),
                    YEAR(c.Date_registered),
                    c.RegistrationCenterID",
            []
        );

        $recruitmentdata = [];
        foreach ($recruitment_summary as $row) {
            $siteId = $row['SiteID'];
            $year   = $row['Year'];
            $month  = $row['Month'];
            if (!isset($recruitmentdata[$siteId])) {
                $recruitmentdata[$siteId] = [
                    $year => [$month => $row['Count']]
                ];
            } else if (!isset($recruitmentdata[$siteId][$year])) {
                $recruitmentdata[$siteId][$year] = [$month => $row['Count']];
            } else {
                assert(!isset($recruitmentdata[$siteId][$year][$month]));
                $recruitmentdata[$siteId][$year][$month] = $row['Count'];
            }

        }
        foreach ($list_of_sites as $siteID => $siteName) {
            if (!isset($recruitmentData['labels'])) {
                continue;
            }
            $recruitmentData['datasets'][] = [
                "name" => $siteName,
                "data" => $this->_getSiteLineRecruitmentData(
                    $siteID,
                    $recruitmentData['labels'],
                    $recruitmentdata,
                ),
            ];
        }
        return new \LORIS\Http\Response\JsonResponse($recruitmentData);
    }

    /**
     * Helper to generate labels for every month between startDate and endDate.
     *
     * @param \DateTimeImmutable $startDate The start date for the labels.
     * @param \DateTimeImmutable $endDate   The end date for the labels.
     *
     * @return array
     */
    private function _createSiteLineChartLabels(
        \DateTimeImmutable $startDate,
        \DateTimeImmutable $endDate
    ) : array {
        $month = date_interval_create_from_date_string('1 month');

        // Since we're only concerned with months, act as if $startDate
        // is always the first of the month so that the last month doesn't
        // get truncated.
        $betweenDate = new \DateTimeImmutable($startDate->format('Y-m-01'));

        $labels = [];

        while ($betweenDate <= $endDate) {
            $labels[]    = $betweenDate->format('n-Y');
            $betweenDate = $betweenDate->add($month);
        }
        return $labels;
    }

    /**
     * Helper to generate the data for the site recruitment line for $siteID.
     *
     * @param int   $siteID          The centerID to get data for.
     * @param array $labels          The list of labels on the chart to fill
     *                               the data for.
     * @param array $recruitmentdata The raw recruitment data to split according to
                                     the labels
     *
     * @return array
     */
    private function _getSiteLineRecruitmentData($siteID, $labels, $recruitmentdata)
    {
        $data = [];
        foreach ($labels as $label) {
            $month  = (strlen($label) == 6)
                ? substr($label, 0, 1) : substr($label, 0, 2);
            $year   = substr($label, -4, 4);
            $data[] = intval($recruitmentdata[$siteID][$year][$month] ?? "0");
        }
        return $data;
    }
}

<?php declare(strict_types=1);
/**
 * The module to display study statistics
 *
 * PHP Version 7
 *
 * @category Loris
 * @package  Main
 * @author   Dave MacFarlane <driusan@bic.mni.mcgill.ca>
 * @license  http://www.gnu.org/licenses/gpl-3.0.txt GPLv3
 * @link     https://github.com/aces/Loris
 */
namespace LORIS\statistics;
use \Psr\Http\Message\ServerRequestInterface;
use \Psr\Http\Message\ResponseInterface;
use \Psr\Http\Server\RequestHandlerInterface;


/**
 * The module to display study statistics
 *
 * PHP Version 7
 *
 * @category Loris
 * @package  Main
 * @author   Dave MacFarlane <driusan@bic.mni.mcgill.ca>
 * @license  http://www.gnu.org/licenses/gpl-3.0.txt GPLv3
 * @link     https://github.com/aces/Loris
 */
class Charts extends \NDB_Page
{
    public $skipTemplate = true;
    /**
     * Checking user's permission
     *
     * @param \User $user The user whose access is being checked
     *
     * @return bool
     */
    function _hasAccess(\User $user) : bool
    {
        return $user->hasPermission('data_entry');
    }

    /**
     * Overrides the parent process function to re-add the application/json header
     * which otherwise sometimes gets removed if the middleware shortcircuits out
     * before calling handle.
     *
     * @param ServerRequestInterface  $request The PSR7 request
     * @param RequestHandlerInterface $handler The handler function
     *
     * @return ResponseInterface the PSR15 response that was generated by the
     * middleware
     */
    public function process(
        ServerRequestInterface $request,
        RequestHandlerInterface $handler
    ) : ResponseInterface {
        return parent::process($request, $handler)->withHeader(
            'Content-Type',
            'application/json'
        );
    }

    /**
     * Handle the incoming request.
     *
     * @param ServerRequestInterface $request The incoming PSR7 request
     *
     * @return ResponseInterface
     */
    public function handle(ServerRequestInterface $request) : ResponseInterface
    {
        if ($request->getMethod() !== 'GET') {
            return new \LORIS\Http\Response\JSON\MethodNotAllowed(['GET']);
        }

        // Strip any prefix of '/' to ensure that we don't have an empty string
        // when splitting the path, then there should be exactly 2 parts left,
        // "charts", and the endpoint requested.
        $url       = ltrim($request->getURI()->getPath(), '/');
        $pathparts = explode('/', $url);
        if (count($pathparts) != 2) {
            return new \LORIS\Http\Response\JSON\NotFound();
        }
        switch($pathparts[1]){
        case 'siterecruitment_pie':
            return $this->_handleSitePieData();
        case 'siterecruitment_bysex':
            return $this->_handleSiteSexBreakdown();
        case 'scans_bymonth':
            return $this->_handleScansByMonth();
        case 'siterecruitment_line':
            return $this->_handleSiteLineData();
        default:
            return new \LORIS\Http\Response\JSON\NotFound();
        }
    }

    /**
     * Handle an incoming request for pie data.
     *
     * @return ResponseInterface
     */
    private function _handleSitePieData()
    {
        $DB = \NDB_Factory::singleton()->database();

        $recruitmentBySiteData = array();
        $list_of_sites         = \Utility::getSiteList(true, false);

        foreach ($list_of_sites as $siteID => $siteName) {
            $totalRecruitment = $DB->pselectOne(
                "SELECT COUNT(c.CandID)
                FROM candidate c
                WHERE
                c.RegistrationCenterID=:Site AND
                c.Active='Y' AND
                c.Entity_type='Human'",
                array('Site' => $siteID)
            );

            $recruitmentBySiteData[] = array(
                "label" => $siteName,
                "total" => $totalRecruitment,
            );
        }
        return new \LORIS\Http\Response\JsonResponse($recruitmentBySiteData);
    }

    /**
     * Handle an incoming request for site sex breakdown.
     *
     * @return ResponseInterface
     */
    private function _handleSiteSexBreakdown()
    {
        $DB            = \NDB_Factory::singleton()->database();
        $sexData       = array();
        $list_of_sites = \Utility::getSiteList(true, false);

        foreach ($list_of_sites as $siteID => $siteName) {
            $sexData['labels'][] = $siteName;
            $sexData['datasets']['female'][] = $DB->pselectOne(
                "SELECT COUNT(c.CandID)
                FROM candidate c
                WHERE c.RegistrationCenterID=:Site
                    AND c.Sex='female' AND c.Active='Y'
                    AND c.Entity_type='Human'",
                array('Site' => $siteID)
            );
            $sexData['datasets']['male'][]   = $DB->pselectOne(
                "SELECT COUNT(c.CandID)
                FROM candidate c
                WHERE c.RegistrationCenterID=:Site AND c.Sex='male' AND c.Active='Y'
                AND c.Entity_type='Human'",
                array('Site' => $siteID)
            );
        }
        return (new \LORIS\Http\Response\JsonResponse($sexData));
    }

    /**
     * Handle an incoming request for monthly progression
     *
     * @return ResponseInterface
     */
    private function _handleScansByMonth()
    {
        $DB = \NDB_Factory::singleton()->database();

        $scanData = array();
        // Run a query to get all the data. Order matters to ensure that the
        // labels are calculated in the correct order.
        $data = $DB->pselect(
            "SELECT s.CenterID,
                CONCAT(MONTH(pf.Value), '-', YEAR(pf.Value)) as datelabel,
                COUNT(distinct s.ID) as count
            FROM files f
            LEFT JOIN parameter_file pf USING (FileID)
            LEFT JOIN session s ON (s.ID=f.SessionID)
            JOIN parameter_type pt USING (ParameterTypeID)
            WHERE pt.Name='acquisition_date'
            GROUP BY MONTH(pf.Value), YEAR(pf.Value), s.CenterID
            ORDER BY YEAR(pf.Value), MONTH(pf.Value), s.CenterID",
            array()
        );

        // Create the labels
        $labels = [];
        foreach ($data as $row) {
            $labels[$row['datelabel']] = true;
        }
        $scanData['labels'] = array_keys($labels);

        // Massage the data into the appropriate format per site.
        $list_of_sites = \Utility::getSiteList(true, false);
        foreach ($list_of_sites as $siteID => $siteName) {
            $scanData['datasets'][] = array(
                "name" => $siteName,
                "data" => $this->_getScansPerMonthData(
                    $data,
                    $siteID,
                    $scanData['labels']
                )
            );
        }
        return (new \LORIS\Http\Response\JsonResponse($scanData));
    }

    /**
     * Helper to get the scans per month data in the correct format for a
     * given site
     *
     * @param array $data   The data for all sites.
     * @param int   $siteID The site to get the monthly data for.
     * @param array $labels An array of all valid labels. (Note that not
     *                      all labels may have data in $data, in which
     *                      case this function must include a "0" to maintain
     *                      order.)
     *
     * @return int An indexed array of data for site in the order of $labels
     */
    private function _getScansPerMonthData(array $data, int $siteID, array $labels)
    {
        $sitedata   = array_filter(
            $data,
            function ($row) use ($siteID) {
                return $row['CenterID'] == $siteID;
            }
        );
        $mappeddata = [];
        foreach ($sitedata as $row) {
            $mappeddata[$row['datelabel']] = $row['count'];
        }

        $data = [];
        foreach ($labels as $i => $label) {
            $data[$i] = $mappeddata[$label] ?? 0;
        }
        return $data;
    }

    /**
     * Helper to handle the siterecruitment_line endpoint.
     *
     * @return ResponseInterface
     */
    private function _handleSiteLineData()
    {
        $DB = \NDB_Factory::singleton()->database();

        $recruitmentData      = array();
        $recruitmentStartDate = $DB->pselectOne(
            "SELECT MIN(Date_registered) FROM candidate",
            array()
        );
        $recruitmentEndDate   = $DB->pselectOne(
            "SELECT MAX(Date_registered) FROM candidate",
            array()
        );

        $recruitmentData['labels'] = $this->_createSiteLineChartLabels(
            $recruitmentStartDate,
            $recruitmentEndDate
        );

        $list_of_sites = \Utility::getSiteList(true, false);

        foreach ($list_of_sites as $siteID => $siteName) {
            $recruitmentData['datasets'][] = array(
                "name" => $siteName,
                "data" => $this->_getSiteLineRecruitmentData(
                    $siteID,
                    $recruitmentData['labels']
                ),
            );
        }
        return new \LORIS\Http\Response\JsonResponse($recruitmentData);
    }

    /**
     * Helper to generate labels for every month between startDate and endDate.
     *
     * @param string $startDate The start date for the labels in YYYY-MM-DD format.
     * @param string $endDate   The end date for the labels in YYYY-MM-DD format.
     *
     * @return array
     */
    private function _createSiteLineChartLabels(string $startDate, string $endDate)
    {
        $startDateYear  = substr($startDate, 0, 4);
        $endDateYear    = substr($endDate, 0, 4);
        $startDateMonth = substr($startDate, 5, 2);
        $endDateMonth   = substr($endDate, 5, 2);
        $labels         = array();

        for ($year = (int)$startDateYear; $year <= (int)$endDateYear; $year++) {
            $startMonth = ($year == (int)$startDateYear) ? (int)$startDateMonth : 1;
            $endMonth   = ($year == (int)$endDateYear) ? (int)$endDateMonth : 12;

            for ($month = $startMonth; $month <= $endMonth; $month++) {
                $labels[] = $month . "-" . $year;
            }
        }
        return $labels;
    }

    /**
     * Helper to generate the data for the site recruitment line for $siteID.
     *
     * @param int   $siteID The centerID to get data for.
     * @param array $labels The list of labels on the chart to fill the data for.
     *
     * @return array
     */
    private function _getSiteLineRecruitmentData($siteID, $labels)
    {
        $DB   = \NDB_Factory::singleton()->database();
        $data = array();

        foreach ($labels as $label) {
            $month  = (strlen($label) == 6)
                ? substr($label, 0, 1) : substr($label, 0, 2);
            $year   = substr($label, -4, 4);
            $data[] = $DB->pselectOne(
                "SELECT COUNT(c.CandID)
                FROM candidate c
                WHERE c.RegistrationCenterID=:Site
                AND MONTH(c.Date_registered)=:Month
                AND YEAR(c.Date_registered)=:Year
                AND c.Entity_type='Human'",
                array(
                    'Site'  => $siteID,
                    'Month' => $month,
                    'Year'  => $year,
                )
            );
        }
        return $data;
    }
}

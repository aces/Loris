<?php declare(strict_types=1);
/**
 * The module to display study statistics
 *
 * PHP Version 7
 *
 * @category Loris
 * @package  Main
 * @author   Dave MacFarlane <driusan@bic.mni.mcgill.ca>
 * @license  http://www.gnu.org/licenses/gpl-3.0.txt GPLv3
 * @link     https://github.com/aces/Loris
 */
namespace LORIS\statistics;
use \Psr\Http\Message\ServerRequestInterface;
use \Psr\Http\Message\ResponseInterface;
use \Psr\Http\Server\RequestHandlerInterface;


/**
 * The module to display study statistics
 *
 * PHP Version 7
 *
 * @category Loris
 * @package  Main
 * @author   Dave MacFarlane <driusan@bic.mni.mcgill.ca>
 * @license  http://www.gnu.org/licenses/gpl-3.0.txt GPLv3
 * @link     https://github.com/aces/Loris
 */
class Charts extends \NDB_Page
{
    public $skipTemplate = true;
    /**
     * Checking user's permission
     *
     * @param \User $user The user whose access is being checked
     *
     * @return bool
     */
    function _hasAccess(\User $user) : bool
    {
        return $user->hasPermission('data_entry');
    }

    /**
     * Overrides the parent process function to re-add the application/json header
     * which otherwise sometimes gets removed if the middleware shortcircuits out
     * before calling handle.
     *
     * @param ServerRequestInterface  $request The PSR7 request
     * @param RequestHandlerInterface $handler The handler function
     *
     * @return ResponseInterface the PSR15 response that was generated by the
     * middleware
     */
    public function process(
        ServerRequestInterface $request,
        RequestHandlerInterface $handler
    ) : ResponseInterface {
        return parent::process($request, $handler)->withHeader(
            'Content-Type',
            'application/json'
        );
    }

    /**
     * Handle the incoming request.
     *
     * @param ServerRequestInterface $request The incoming PSR7 request
     *
     * @return ResponseInterface
     */
    public function handle(ServerRequestInterface $request) : ResponseInterface
    {
        if ($request->getMethod() !== 'GET') {
            return new \LORIS\Http\Response\JSON\MethodNotAllowed(['GET']);
        }

        // Strip any prefix of '/' to ensure that we don't have an empty string
        // when splitting the path, then there should be exactly 2 parts left,
        // "charts", and the endpoint requested.
        $url       = ltrim($request->getURI()->getPath(), '/');
        $pathparts = explode('/', $url);
        if (count($pathparts) != 2) {
            return new \LORIS\Http\Response\JSON\NotFound();
        }
        switch($pathparts[1]){
            case 'siterecruitment_pie':
                return $this->_handleSitePieData();
            case 'siterecruitment_bysex':
                return $this->_handleSiteSexBreakdown();
            case 'scans_bymonth':
                return $this->_handleScansByMonth();
            case 'siterecruitment_line':
                return $this->_handleSiteLineData();
            default:
                return new \LORIS\Http\Response\JSON\NotFound();
        }
    }

    /**
     * Handle an incoming request for pie data.
     *
     * @return ResponseInterface
     */
    private function _handleSitePieData()
    {
        $params = $this->parseGetParameters();
        $user = \NDB_Factory::singleton()->user();
        $list_of_sites = $user->getStudySites();

        $conditions = $this->buildQueryConditions($params, $list_of_sites);
    
        $DB = \NDB_Factory::singleton()->database();
        $recruitmentBySiteData = array();
    
        foreach ($list_of_sites as $siteID => $siteName) {
            $totalRecruitment = $DB->pselectOne(
                "SELECT COUNT(c.CandID)
                FROM candidate c
                {$conditions['cohortJoin']}
                {$conditions['participantStatusJoin']}
                WHERE c.RegistrationCenterID=:Site
                AND c.Active='Y'
                AND c.Entity_type='Human'
                {$conditions['projectQuery']}
                {$conditions['cohortQuery']}
                {$conditions['visitQuery']}
                {$conditions['siteQuery']}
                {$conditions['participantStatusQuery']}",
                array('Site' => $siteID)
            );
    
            $recruitmentBySiteData[] = array(
                "label" => $siteName,
                "total" => $totalRecruitment,
            );
        }
        return new \LORIS\Http\Response\JsonResponse($recruitmentBySiteData);
    }

    /**
     * Handle an incoming request for site sex breakdown.
     *
     * @return ResponseInterface
     */
    private function _handleSiteSexBreakdown()
    {
        $params = $this->parseGetParameters();
        $user = \NDB_Factory::singleton()->user();
        $list_of_sites = $user->getStudySites();

        $conditions = $this->buildQueryConditions($params, $list_of_sites);
        
        $DB = \NDB_Factory::singleton()->database();
        $sexData = array();
        
        foreach ($list_of_sites as $siteID => $siteName) {
            $female_data = $DB->pselectOne(
                "SELECT COUNT(c.CandID)
                FROM candidate c
                {$conditions['cohortJoin']}
                {$conditions['participantStatusJoin']}
                WHERE c.RegistrationCenterID=:Site
                AND c.Sex='female' AND c.Active='Y'
                AND c.Entity_type='Human'
                {$conditions['projectQuery']}
                {$conditions['cohortQuery']}
                {$conditions['visitQuery']}
                {$conditions['siteQuery']}
                {$conditions['participantStatusQuery']}",
                array('Site' => $siteID)
            );
            $male_data = $DB->pselectOne(
                "SELECT COUNT(c.CandID)
                FROM candidate c
                {$conditions['cohortJoin']}
                {$conditions['participantStatusJoin']}
                WHERE c.RegistrationCenterID=:Site
                AND c.Sex='male' AND c.Active='Y'
                AND c.Entity_type='Human'
                {$conditions['projectQuery']}
                {$conditions['cohortQuery']}
                {$conditions['visitQuery']}
                {$conditions['siteQuery']}
                {$conditions['participantStatusQuery']}",
                array('Site' => $siteID)
            );
            if ($male_data !== '0' && $female_data !== '0') {
                $sexData['labels'][] = $siteName;
                $sexData['datasets']['male'][] = $male_data;
                $sexData['datasets']['female'][] = $female_data;
            }
        }
        
        return (new \LORIS\Http\Response\JsonResponse($sexData));
    }

    /**
     * Handle an incoming request for monthly progression
     *
     * @return ResponseInterface
     */
    private function _handleScansByMonth()
    {
        $params = $this->parseGetParameters();
        $user = \NDB_Factory::singleton()->user();
        $list_of_sites = $user->getStudySites();

        $conditions = $this->buildQueryConditions($params, $list_of_sites, true);
        
        $DB = \NDB_Factory::singleton()->database();
        $scanData = array();
        // Run a query to get all the data. Order matters to ensure that the
        // labels are calculated in the correct order.
        $data = $DB->pselect(
            "SELECT s.CenterID,
                CONCAT(MONTH(pf.Value), '-', YEAR(pf.Value)) as datelabel,
                COUNT(distinct s.ID) as count
            FROM files f
            LEFT JOIN parameter_file pf USING (FileID)
            LEFT JOIN session s ON (s.ID=f.SessionID)
            {$conditions['participantStatusJoin']}
            JOIN parameter_type pt USING (ParameterTypeID)
            WHERE pt.Name='acquisition_date'
            {$conditions['projectQuery']}
            {$conditions['cohortQuery']}
            {$conditions['visitQuery']}
            {$conditions['siteQuery']}
            {$conditions['participantStatusQuery']}
            GROUP BY MONTH(pf.Value), YEAR(pf.Value), s.CenterID, datelabel
            ORDER BY YEAR(pf.Value), MONTH(pf.Value), s.CenterID",
            array()
        );

        // TODO: make this work as bar data
        // Create the labels.
        //
        // We want to ensure that every month label appear exactly once and
        // in order, but the same label may appear multiple times across different
        // sites. Since the query was ordered, we use a new associative array
        // of labels and set the keys to to an arbitrary value (true) in order to
        // strip out duplicates, then take the keys of the resulting array once
        // done. The result should be an ordered numeric array with each label
        // for the chart in it exactly once.
        $labels = [];
        foreach ($data as $row) {
            $labels[$row['datelabel']] = true;
        }
        $scanData['labels'] = array_keys($labels);

        // Massage the data into the appropriate format per site.
        foreach ($list_of_sites as $siteID => $siteName) {
            $scanData['datasets'][] = array(
                "name" => $siteName,
                "data" => $this->_getScansPerMonthData(
                    $data,
                    $siteID,
                    $scanData['labels']
                )
            );
        }
        return (new \LORIS\Http\Response\JsonResponse($scanData));
    }

    /**
     * Helper to get the scans per month data in the correct format for a
     * given site
     *
     * @param array $data   The data for all sites.
     * @param int   $siteID The site to get the monthly data for.
     * @param array $labels An array of all valid labels. (Note that not
     *                      all labels may have data in $data, in which
     *                      case this function must include a "0" to maintain
     *                      order.)
     *
     * @return array An indexed array of data for site in the order of $labels
     */
    private function _getScansPerMonthData(
        array $data,
        int $siteID,
        array $labels
    ) : array {
        $sitedata   = array_filter(
            $data,
            function ($row) use ($siteID) {
                return $row['CenterID'] == $siteID;
            }
        );
        $mappeddata = [];
        foreach ($sitedata as $row) {
            $mappeddata[$row['datelabel']] = $row['count'];
        }

        $data = [];
        foreach ($labels as $i => $label) {
            $data[$i] = $mappeddata[$label] ?? 0;
        }
        return $data;
    }

    /**
     * Helper to handle the siterecruitment_line endpoint.
     *
     * @return ResponseInterface
     */
    private function _handleSiteLineData()
    {
        $params = $this->parseGetParameters();
        $user = \NDB_Factory::singleton()->user();
        $list_of_sites = $user->getStudySites();

        $conditions = $this->buildQueryConditions($params, $list_of_sites);

        $DB = \NDB_Factory::singleton()->database();

        $recruitmentData      = array();
        $recruitmentBound = $DB->pselect(
            "SELECT MIN(c.Date_registered), MAX(c.Date_registered)
            FROM candidate c
            {$conditions['cohortJoin']}
            WHERE c.Entity_type='Human'
            {$conditions['projectQuery']}
            {$conditions['cohortQuery']}
            {$conditions['siteQuery']}
            {$conditions['visitQuery']}",
            array()
        );

        $recruitmentStartDate = $recruitmentBound[0]['MIN(c.Date_registered)'];
        $recruitmentEndDate   = $recruitmentBound[0]['MAX(c.Date_registered)'];

        if ($recruitmentStartDate !== null
            && $recruitmentEndDate !== null
        ) {
            $recruitmentData['labels'] = $this->_createSiteLineChartLabels(
                new \DateTimeImmutable($recruitmentStartDate),
                new \DateTimeImmutable($recruitmentEndDate)
            );
        }

        foreach ($list_of_sites as $siteID => $siteName) {
            $recruitmentData['datasets'][] = array(
                "name" => $siteName,
                "data" => $this->_getSiteLineRecruitmentData(
                    $siteID,
                    $recruitmentData['labels'],
                    $conditions['cohortJoin'],
                    $conditions['participantStatusJoin'],
                    $conditions['cohortQuery'],
                    $conditions['projectQuery'],
                    $conditions['participantStatusQuery']
                ),
            );
        }
        return new \LORIS\Http\Response\JsonResponse($recruitmentData);
    }

    /**
     * Helper to parse the GET parameters from the incoming request.
     *
     * @return array
     */
    private function parseGetParameters() {
        $selectedProjects = empty($_GET['selectedProjects']) || $_GET['selectedProjects'] === 'null' || $_GET['selectedProjects'] === 'undefined' ? null : explode(",", $_GET['selectedProjects']);
        $selectedCohorts = empty($_GET['selectedCohorts']) || $_GET['selectedCohorts'] === 'null' || $_GET['selectedCohorts'] === 'undefined' ? null : explode(",", $_GET['selectedCohorts']);
        $selectedSites = empty($_GET['selectedSites']) || $_GET['selectedSites'] === 'null' || $_GET['selectedSites'] === 'undefined' ? null : explode(",", $_GET['selectedSites']);
        $selectedVisits = empty($_GET['selectedVisits']) || $_GET['selectedVisits'] === 'null' || $_GET['selectedVisits'] === 'undefined' ? null : explode(",", $_GET['selectedVisits']);
        $selectedParticipantStatus = empty($_GET['selectedParticipantStatus']) || $_GET['selectedParticipantStatus'] === 'null' || $_GET['selectedParticipantStatus'] === 'undefined' ? null : explode(",", $_GET['selectedParticipantStatus']);
    
        return [
            'selectedProjects' => $selectedProjects,
            'selectedCohorts' => $selectedCohorts,
            'selectedSites' => $selectedSites,
            'selectedVisits' => $selectedVisits,
            'selectedParticipantStatus' => $selectedParticipantStatus,
        ];
    }
    
    /**
     * Helper to generate query conditions for for incoming requests.
     *
     * @param array $params The parameters from the incoming request.
     *
     * @return array
     */
    private function buildQueryConditions($params, $list_of_sites, $scansbymonth = false) {
        $DB = \NDB_Factory::singleton()->database();
        $user = \NDB_Factory::singleton()->user();

        $projectQuery = '';
        $cohortQuery = '';
        $cohortJoin = '';
        $visitQuery = '';
        $siteQuery = '';
        $participantStatusJoin = '';
        $participantStatusQuery = '';
    
        if (!is_null($params['selectedProjects'])) {
            $projectString = "'" . implode("','", $params['selectedProjects']) . "'";
            $projectQuery = " AND c.RegistrationProjectID IN ({$projectString}) ";
            $projectSites = $DB->pselectCol(
                "SELECT RegistrationCenterID FROM candidate WHERE RegistrationProjectID IN ({$projectString})",
                []
            );
            $list_of_sites = array_intersect_key($list_of_sites, array_flip($projectSites));
        }
        
        if (!is_null($params['selectedCohorts'])) {
            $cohortString = "'" . implode("','", $params['selectedCohorts']) . "'";
            $cohortQuery = " AND s.CohortID IN ({$cohortString}) ";
            $cohortJoin = "JOIN session s ON s.CandID=c.CandID";
        }
        if (!is_null($params['selectedSites'])) {
            // Set site query if selected
            $siteString = "'" . implode("','", $params['selectedSites']) . "'";
            $siteQuery = " AND c.RegistrationCenterID IN ({$siteString}) ";
            if ($scansbymonth === true) {
                $siteQuery = " AND s.CenterID IN ({$siteString}) ";
            }
            // Alter site list if selected
            $list_of_sites = array_intersect_key($list_of_sites, array_flip($params['selectedSites']));
        } else {
            // If not selected, only take user sites
            $centerIDs = $user->getCenterIDs();
            $centerList = "'" . implode("','", $centerIDs) . "'";
            $siteQuery = " AND c.RegistrationCenterID IN ({$centerList}) ";
            if ($scansbymonth === true) {
                $siteQuery = " AND s.CenterID IN ({$centerList}) ";
            }
        }
        if (!is_null($params['selectedVisits'])) {
            // Set visit query if visits selected
            $visitString = "'" . implode("','", $params['selectedVisits']) . "'";
            $visitQuery = " AND s.Visit_label IN ({$visitString}) ";
            // since they are the same, if visits are selected, then the cohort string is overwritten
            $cohortJoin = "JOIN session s ON s.CandID=c.CandID";
        }
        if (!is_null($params['selectedParticipantStatus'])) {
            $participantStatusJoin = 'LEFT JOIN participant_status ps ON c.CandID=ps.CandID';
            $participantStatusString = "'" . implode("','", $params['selectedParticipantStatus']) . "'";
            // Null participant status counts as Active because 
            // sometimes users do not update the participant_status tab
            if (in_array('1', $params['selectedParticipantStatus'])) {
                $participantStatusQuery = " AND (
                    ps.participant_status IN ({$participantStatusString}) 
                    OR ps.participant_status IS NULL
                )";
            } else {
                $participantStatusQuery = " AND ps.participant_status IN ({$participantStatusString}) ";
            }
        }
    
        return [
            'projectQuery' => $projectQuery,
            'cohortQuery' => $cohortQuery,
            'cohortJoin' => $cohortJoin,
            'visitQuery' => $visitQuery,
            'siteQuery' => $siteQuery,
            'participantStatusJoin' => $participantStatusJoin,
            'participantStatusQuery' => $participantStatusQuery,
        ];
    }

    /**
     * Helper to generate labels for every month between startDate and endDate.
     *
     * @param \DateTimeImmutable $startDate The start date for the labels.
     * @param \DateTimeImmutable $endDate   The end date for the labels.
     *
     * @return array
     */
    private function _createSiteLineChartLabels(
        \DateTimeImmutable $startDate,
        \DateTimeImmutable $endDate
    ) : array {
        $month = date_interval_create_from_date_string('1 month');

        // Since we're only concerned with months, act as if $startDate
        // is always the first of the month so that the last month doesn't
        // get truncated.
        $betweenDate = new \DateTimeImmutable($startDate->format('Y-m-01'));

        $labels = [];

        while ($betweenDate <= $endDate) {
            $labels[]    = $betweenDate->format('n-Y');
            $betweenDate = $betweenDate->add($month);
        }
        return $labels;
    }

    /**
     * Helper to generate the data for the site recruitment line for $siteID.
     *
     * @param int   $siteID The centerID to get data for.
     * @param array $labels The list of labels on the chart to fill the data for.
     * @param String $cohortJoin The join statement for cohort if needed
     * @param String $cohortQuery The where statement for cohort if needed
     * @param String $projectQuery The where statement for project if needed
     *
     * @return array
     */
    private function _getSiteLineRecruitmentData(
        $siteID,
        $labels,
        $cohortJoin,
        $participantStatusJoin,
        $cohortQuery,
        $projectQuery,
        $participantStatusQuery
    ) {
        $DB   = \NDB_Factory::singleton()->database();
        $data = [];

        foreach ($labels as $label) {
            $month  = (strlen($label) == 6)
                ? substr($label, 0, 1) : substr($label, 0, 2);
            $year   = substr($label, -4, 4);

            $data[] = $DB->pselectOne(
                "SELECT COUNT(c.CandID)
                FROM candidate c
                {$cohortJoin}
                {$participantStatusJoin}
                WHERE c.RegistrationCenterID=:Site
                AND MONTH(c.Date_registered)=:Month
                AND YEAR(c.Date_registered)=:Year
                AND c.Entity_type='Human'
                {$cohortQuery}
                {$projectQuery}
                {$participantStatusQuery}",
                array(
                    'Site'  => $siteID,
                    'Month' => $month,
                    'Year'  => $year,
                )
            );
        }
        return $data;
    }
}

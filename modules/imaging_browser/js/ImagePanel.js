!function(e){function n(a){if(t[a])return t[a].exports;var s=t[a]={exports:{},id:a,loaded:!1};return e[a].call(s.exports,s,s.exports,n),s.loaded=!0,s.exports}var t={};return n.m=e,n.c=t,n.p="",n(0)}({0:function(e,n,t){t(1)(t(29))},1:function(e,n){e.exports=function(e){"undefined"!=typeof execScript?execScript(e):eval.call(null,e)}},29:function(e,n){e.exports="/* exported ImagePanelHeader, ImagePanelHeadersTable, ImageQCDropdown, ImageQCStatic,\n ImagePanelQCStatusSelector, ImagePanelQCSelectedSelector, ImagePanelQCCaveatSelector,\n ImagePanelQCSNRValue, ImagePanelQCPanel, DownloadButton, ImageQCCommentsButton.\n LongitudinalViewButton, ImageDownloadButtons, ImagePanelBody, RImagePanel\n* */\n\nvar ImagePanelHeader = React.createClass({\n    displayName: 'ImagePanelHeader',\n\n    mixins: [React.addons.PureRenderMixin],\n    render: function render() {\n        var QCStatusLabel;\n        if (this.props.QCStatus === 'Pass') {\n            QCStatusLabel = React.createElement(\n                'span',\n                { className: 'label label-success' },\n                this.props.QCStatus\n            );\n        } else if (this.props.QCStatus === 'Fail') {\n            QCStatusLabel = React.createElement(\n                'span',\n                { className: 'label label-danger' },\n                this.props.QCStatus\n            );\n        }\n\n        var arrow;\n        if (this.props.Expanded) {\n            arrow = React.createElement('span', { onClick: this.props.onToggleBody,\n                className: 'pull-right clickable glyphicon arrow glyphicon-chevron-up' });\n        } else {\n            arrow = React.createElement('span', { onClick: this.props.onToggleBody,\n                className: 'pull-right clickable glyphicon arrow glyphicon-chevron-down' });\n        }\n        var headerButton = React.createElement(\n            'div',\n            { className: 'pull-right' },\n            React.createElement(\n                'div',\n                { className: 'btn-group views' },\n                React.createElement(\n                    'button',\n                    {\n                        type: 'button',\n                        className: 'btn btn-default btn-xs dropdown-toggle',\n                        onClick: this.props.onToggleHeaders,\n                        'aria-expanded': this.props.HeadersExpanded },\n                    'Header Info'\n                ),\n                React.createElement('span', { className: 'caret' })\n            )\n        );\n        return React.createElement(\n            'div',\n            { className: 'panel-heading' },\n            React.createElement('input', { type: 'checkbox', 'data-file-id': this.props.FileID,\n                className: 'mripanel user-success' }),\n            React.createElement(\n                'h3',\n                { className: 'panel-title' },\n                this.props.Filename,\n                ' '\n            ),\n            QCStatusLabel,\n            arrow,\n            headerButton\n        );\n    }\n\n});\n\nvar ImagePanelHeadersTable = React.createClass({\n    displayName: 'ImagePanelHeadersTable',\n\n    componentDidMount: function componentDidMount() {\n        $(this).DynamicTable();\n    },\n    render: function render() {\n        return React.createElement(\n            'table',\n            { className: 'table table-hover table-bordered header-info col-xs-12 dynamictable' },\n            React.createElement(\n                'tr',\n                null,\n                React.createElement(\n                    'th',\n                    { className: 'info col-xs-2' },\n                    'Voxel Size'\n                ),\n                React.createElement(\n                    'td',\n                    { className: 'col-xs-6', colSpan: '3' },\n                    this.props.HeaderInfo.XStep === '' ? ' ' : 'X: ' + this.props.HeaderInfo.XStep + \" mm \",\n                    this.props.HeaderInfo.YStep === '' ? ' ' : 'Y: ' + this.props.HeaderInfo.YStep + \" mm \",\n                    this.props.HeaderInfo.ZStep === '' ? ' ' : 'Z: ' + this.props.HeaderInfo.ZStep + \" mm \"\n                ),\n                React.createElement(\n                    'th',\n                    { className: 'col-xs-2 info' },\n                    'Output Type'\n                ),\n                React.createElement(\n                    'td',\n                    { className: 'col-xs-2' },\n                    this.props.HeaderInfo.OutputType\n                )\n            ),\n            React.createElement(\n                'tr',\n                null,\n                React.createElement(\n                    'th',\n                    { className: 'col-xs-2 info' },\n                    'Acquisition Date'\n                ),\n                React.createElement(\n                    'td',\n                    { className: 'col-xs-2' },\n                    this.props.HeaderInfo.AcquisitionDate\n                ),\n                React.createElement(\n                    'th',\n                    { className: 'col-xs-2 info' },\n                    'Space'\n                ),\n                React.createElement(\n                    'td',\n                    { className: 'col-xs-2' },\n                    this.props.HeaderInfo.CoordinateSpace\n                ),\n                React.createElement(\n                    'th',\n                    { className: 'col-xs-2 info' },\n                    'Inserted Date'\n                ),\n                React.createElement(\n                    'td',\n                    { className: 'col-xs-2' },\n                    this.props.HeaderInfo.InsertedDate\n                )\n            ),\n            React.createElement(\n                'tr',\n                null,\n                React.createElement(\n                    'th',\n                    { className: 'col-xs-2 info' },\n                    'Protocol'\n                ),\n                React.createElement(\n                    'td',\n                    { className: 'col-xs-2' },\n                    this.props.HeaderInfo.AcquisitionProtocol\n                ),\n                React.createElement(\n                    'th',\n                    { className: 'col-xs-2 info' },\n                    'Series Description'\n                ),\n                React.createElement(\n                    'td',\n                    { className: 'col-xs-2' },\n                    this.props.HeaderInfo.SeriesDescription\n                ),\n                React.createElement(\n                    'th',\n                    { className: 'col-xs-2 info' },\n                    'Series Number'\n                ),\n                React.createElement(\n                    'td',\n                    { className: 'col-xs-2' },\n                    this.props.HeaderInfo.SeriesNumber\n                )\n            ),\n            React.createElement(\n                'tr',\n                null,\n                React.createElement(\n                    'th',\n                    { className: 'col-xs-2 info' },\n                    'Echo Time'\n                ),\n                React.createElement(\n                    'td',\n                    { className: 'col-xs-2' },\n                    this.props.HeaderInfo.EchoTime,\n                    ' ms'\n                ),\n                React.createElement(\n                    'th',\n                    { className: 'col-xs-2 info' },\n                    'Rep Time'\n                ),\n                React.createElement(\n                    'td',\n                    { className: 'col-xs-2' },\n                    this.props.HeaderInfo.RepetitionTime,\n                    ' ms'\n                ),\n                React.createElement(\n                    'th',\n                    { className: 'col-xs-2 info' },\n                    'Slice Thick'\n                ),\n                React.createElement(\n                    'td',\n                    { className: 'col-xs-2' },\n                    this.props.HeaderInfo.SliceThickness,\n                    ' mm'\n                )\n            ),\n            React.createElement(\n                'tr',\n                null,\n                React.createElement(\n                    'th',\n                    { className: 'col-xs-2 info' },\n                    'Number of volumes'\n                ),\n                React.createElement(\n                    'td',\n                    { className: 'col-xs-2' },\n                    this.props.HeaderInfo.NumVolumes,\n                    ' volumes'\n                ),\n                React.createElement(\n                    'th',\n                    { className: 'col-xs-2 info' },\n                    'Pipeline'\n                ),\n                React.createElement(\n                    'td',\n                    { className: 'col-xs-2' },\n                    this.props.HeaderInfo.Pipeline\n                ),\n                React.createElement(\n                    'th',\n                    { className: 'col-xs-2 info' },\n                    'Algorithm'\n                ),\n                React.createElement(\n                    'td',\n                    { className: 'col-xs-2' },\n                    this.props.HeaderInfo.Algorithm\n                )\n            ),\n            React.createElement(\n                'tr',\n                null,\n                React.createElement(\n                    'th',\n                    { className: 'col-xs-2 info' },\n                    'Number of rejected directions'\n                ),\n                React.createElement(\n                    'td',\n                    { className: 'col-xs-2' },\n                    this.props.HeaderInfo.TotalRejected\n                ),\n                React.createElement(\n                    'th',\n                    { className: 'col-xs-2 info' },\n                    'Number of Interlace correlations'\n                ),\n                React.createElement(\n                    'td',\n                    { className: 'col-xs-2' },\n                    this.props.HeaderInfo.InterlaceRejected\n                ),\n                React.createElement(\n                    'th',\n                    { className: 'col-xs-2 info' },\n                    'Number of Gradient-wise correlations'\n                ),\n                React.createElement(\n                    'td',\n                    { className: 'col-xs-2' },\n                    this.props.HeaderInfo.IntergradientRejected\n                )\n            ),\n            React.createElement(\n                'tr',\n                null,\n                React.createElement(\n                    'th',\n                    { className: 'col-xs-2 info' },\n                    'Number of Slicewise correlations'\n                ),\n                React.createElement(\n                    'td',\n                    { className: 'col-xs-2' },\n                    this.props.HeaderInfo.SlicewiseRejected\n                ),\n                React.createElement(\n                    'td',\n                    { className: 'col-xs-4', colSpan: '4' },\n                    '\\xA0'\n                )\n            )\n        );\n    }\n});\nvar ImageQCDropdown = React.createClass({\n    displayName: 'ImageQCDropdown',\n\n\n    render: function render() {\n        var label = React.createElement(\n            'label',\n            null,\n            this.props.Label\n        );\n        if (this.props.url) {\n            label = React.createElement(\n                'label',\n                null,\n                React.createElement(\n                    'a',\n                    { href: this.props.url },\n                    this.props.Label\n                )\n            );\n        }\n        var dropdown;\n        if (this.props.editable) {\n            var options = [];\n            for (var key in this.props.options) {\n                if (this.props.options.hasOwnProperty(key)) {\n                    options.push(React.createElement(\n                        'option',\n                        { key: this.props.FormName + this.props.FileID + key,\n                            className: 'form-control input-sm option',\n                            value: key },\n                        this.props.options[key]\n                    ));\n                }\n            }\n            dropdown = React.createElement(\n                'select',\n                { name: this.props.FormName + \"[\" + this.props.FileID + \"]\",\n                    defaultValue: this.props.defaultValue,\n                    className: 'form-control input-sm'\n                },\n                options\n            );\n        } else {\n            dropdown = React.createElement(\n                'div',\n                { className: 'col-xs-12' },\n                this.props.defaultValue\n            );\n        }\n        return React.createElement(\n            'div',\n            { className: 'row' },\n            label,\n            dropdown\n        );\n    }\n});\nvar ImageQCStatic = React.createClass({\n    displayName: 'ImageQCStatic',\n\n    render: function render() {\n        var staticInfo;\n        staticInfo = React.createElement(\n            'div',\n            { className: 'col-xs-12' },\n            this.props.defaultValue\n        );\n        return React.createElement(\n            'div',\n            { className: 'row' },\n            React.createElement(\n                'label',\n                null,\n                this.props.Label\n            ),\n            staticInfo\n        );\n    }\n});\n\nvar ImagePanelQCStatusSelector = React.createClass({\n    displayName: 'ImagePanelQCStatusSelector',\n\n    render: function render() {\n        var qcStatusLabel;\n        if (this.props.HasQCPerm && this.props.FileNew) {\n            qcStatusLabel = React.createElement(\n                'span',\n                null,\n                'QC Status ',\n                React.createElement(\n                    'span',\n                    { className: 'text-info' },\n                    '( ',\n                    React.createElement('span', { className: 'glyphicon glyphicon-star' }),\n                    ' New )'\n                )\n            );\n        } else {\n            qcStatusLabel = \"QC Status\";\n        }\n\n        return React.createElement(ImageQCDropdown, {\n            Label: qcStatusLabel,\n            FormName: 'status',\n            FileID: this.props.FileID,\n            editable: this.props.HasQCPerm,\n            defaultValue: this.props.QCStatus,\n            options: { \"\": \"\", \"Pass\": \"Pass\", \"Fail\": \"Fail\" }\n        });\n    }\n});\nvar ImagePanelQCSelectedSelector = React.createClass({\n    displayName: 'ImagePanelQCSelectedSelector',\n\n    render: function render() {\n        return React.createElement(ImageQCDropdown, {\n            Label: 'Selected',\n            FormName: 'selectedvol',\n            FileID: this.props.FileID,\n            editable: this.props.HasQCPerm,\n            options: { \"\": \"\", \"true\": \"True\", \"false\": \"False\" },\n            defaultValue: this.props.Selected\n        });\n    }\n});\nvar ImagePanelQCCaveatSelector = React.createClass({\n    displayName: 'ImagePanelQCCaveatSelector',\n\n    render: function render() {\n        // Link caveat to MRI Violations if set true\n        var mriViolationsLink = null;\n        if (this.props.SeriesUID && this.props.Caveat === \"1\") {\n            mriViolationsLink = '/mri_violations/?' + 'submenu=mri_protocol_check_violations&SeriesUID=' + this.props.SeriesUID + '&filter=true';\n        }\n\n        return React.createElement(ImageQCDropdown, {\n            Label: 'Caveat',\n            FormName: 'caveat',\n            FileID: this.props.FileID,\n            editable: this.props.HasQCPerm,\n            options: {\n                \"\": \"\",\n                \"1\": \"True\",\n                \"0\": \"False\"\n            },\n            defaultValue: this.props.Caveat,\n            url: mriViolationsLink\n        });\n    }\n});\nvar ImagePanelQCSNRValue = React.createClass({\n    displayName: 'ImagePanelQCSNRValue',\n\n    render: function render() {\n        return React.createElement(ImageQCStatic, {\n            Label: 'SNR',\n            FormName: 'snr',\n            FileID: this.props.FileID,\n            defaultValue: this.props.SNR\n        });\n    }\n});\nvar ImagePanelQCPanel = React.createClass({\n    displayName: 'ImagePanelQCPanel',\n\n    mixins: [React.addons.PureRenderMixin],\n    render: function render() {\n        return React.createElement(\n            'div',\n            { className: 'form-group' },\n            React.createElement(ImagePanelQCStatusSelector, {\n                FileID: this.props.FileID,\n                HasQCPerm: this.props.HasQCPerm,\n                QCStatus: this.props.QCStatus,\n                FileNew: this.props.FileNew\n            }),\n            React.createElement(ImagePanelQCSelectedSelector, {\n                FileID: this.props.FileID,\n                HasQCPerm: this.props.HasQCPerm,\n                Selected: this.props.Selected\n            }),\n            React.createElement(ImagePanelQCCaveatSelector, {\n                FileID: this.props.FileID,\n                HasQCPerm: this.props.HasQCPerm,\n                Caveat: this.props.Caveat,\n                SeriesUID: this.props.SeriesUID\n            }),\n            React.createElement(ImagePanelQCSNRValue, {\n                FileID: this.props.FileID,\n                SNR: this.props.SNR\n            })\n        );\n    }\n});\n\nvar DownloadButton = React.createClass({\n    displayName: 'DownloadButton',\n\n    render: function render() {\n        if (!this.props.FileName || this.props.FileName === '') {\n            return React.createElement('span', null);\n        }\n        var style = {\n            margin: 6\n        };\n        return React.createElement(\n            'a',\n            { href: this.props.BaseURL + \"/mri/jiv/get_file.php?file=\" + this.props.FileName,\n                className: 'btn btn-default', style: style },\n            React.createElement('span', { className: 'glyphicon glyphicon-download-alt' }),\n            React.createElement(\n                'span',\n                { className: 'hidden-xs' },\n                this.props.Label\n            )\n        );\n    }\n});\n\nvar ImageQCCommentsButton = React.createClass({\n    displayName: 'ImageQCCommentsButton',\n\n    openWindowHandler: function openWindowHandler(e) {\n        e.preventDefault();\n        window.open(this.props.BaseURL + \"/feedback_mri_popup.php?fileID=\" + this.props.FileID, \"feedback_mri\", \"width=500,height=800,toolbar=no,location=no,\" + \"status=yes,scrollbars=yes,resizable=yes\");\n    },\n    render: function render() {\n        if (!this.props.FileID || this.props.FileID === '') {\n            return React.createElement('span', null);\n        }\n        return React.createElement(\n            'a',\n            { className: 'btn btn-default',\n                href: '#noID',\n                onClick: this.openWindowHandler\n            },\n            React.createElement(\n                'span',\n                { className: 'text-default' },\n                React.createElement('span', { className: 'glyphicon glyphicon-pencil' }),\n                React.createElement(\n                    'span',\n                    { className: 'hidden-xs' },\n                    'QC Comments'\n                )\n            )\n        );\n    }\n});\n\nvar LongitudinalViewButton = React.createClass({\n    displayName: 'LongitudinalViewButton',\n\n    openWindowHandler: function openWindowHandler(e) {\n        e.preventDefault();\n        window.open(this.props.BaseURL + \"/brainbrowser/?minc_id=[\" + this.props.OtherTimepoints + \"]\", \"BrainBrowser Volume Viewer\", \"location = 0,width = auto, height = auto, scrollbars=yes\");\n    },\n    render: function render() {\n        if (!this.props.FileID || this.props.FileID === '') {\n            return React.createElement('span', null);\n        }\n        return React.createElement(\n            'a',\n            { className: 'btn btn-default',\n                href: '#noID',\n                onClick: this.openWindowHandler\n            },\n            React.createElement(\n                'span',\n                { className: 'text-default' },\n                React.createElement('span', { className: 'glyphicon glyphicon-eye-open' }),\n                React.createElement(\n                    'span',\n                    { className: 'hidden-xs' },\n                    'Longitudinal View'\n                )\n            )\n        );\n    }\n});\n\nvar ImageDownloadButtons = React.createClass({\n    displayName: 'ImageDownloadButtons',\n\n    render: function render() {\n        return React.createElement(\n            'div',\n            { className: 'row mri-second-row-panel col-xs-12' },\n            React.createElement(ImageQCCommentsButton, { FileID: this.props.FileID,\n                BaseURL: this.props.BaseURL\n            }),\n            React.createElement(DownloadButton, { FileName: this.props.Fullname,\n                Label: 'Download Minc',\n                BaseURL: this.props.BaseURL\n            }),\n            React.createElement(DownloadButton, { FileName: this.props.XMLProtocol,\n                BaseURL: this.props.BaseURL,\n                Label: 'Download XML Protocol'\n            }),\n            React.createElement(DownloadButton, { FileName: this.props.XMLReport,\n                BaseURL: this.props.BaseURL,\n                Label: 'Download XML Report'\n            }),\n            React.createElement(DownloadButton, { FileName: this.props.NrrdFile,\n                BaseURL: this.props.BaseURL,\n                Label: 'Download NRRD'\n            }),\n            React.createElement(LongitudinalViewButton, { FileID: this.props.FileID,\n                BaseURL: this.props.BaseURL,\n                OtherTimepoints: this.props.OtherTimepoints\n            })\n        );\n    }\n});\nvar ImagePanelBody = React.createClass({\n    displayName: 'ImagePanelBody',\n\n    mixins: [React.addons.PureRenderMixin],\n    openWindowHandler: function openWindowHandler(e) {\n        e.preventDefault();\n        window.open(this.props.BaseURL + \"/brainbrowser/?minc_id=[\" + this.props.FileID + \"]\", \"BrainBrowser Volume Viewer\", \"location = 0,width = auto, height = auto, scrollbars=yes\");\n    },\n    render: function render() {\n        return React.createElement(\n            'div',\n            { className: 'panel-body' },\n            React.createElement(\n                'div',\n                { className: 'row' },\n                React.createElement(\n                    'div',\n                    { className: 'col-xs-9 imaging_browser_pic' },\n                    React.createElement(\n                        'a',\n                        { href: '#noID', onClick: this.openWindowHandler },\n                        React.createElement('img', { className: 'img-checkpic img-responsive',\n                            src: this.props.Checkpic })\n                    )\n                ),\n                React.createElement(\n                    'div',\n                    { className: 'col-xs-3 mri-right-panel' },\n                    React.createElement(ImagePanelQCPanel, {\n                        FileID: this.props.FileID,\n                        FileNew: this.props.FileNew,\n                        HasQCPerm: this.props.HasQCPerm,\n                        QCStatus: this.props.QCStatus,\n                        Caveat: this.props.Caveat,\n                        Selected: this.props.Selected,\n                        SNR: this.props.SNR,\n                        SeriesUID: this.props.SeriesUID\n                    })\n                )\n            ),\n            React.createElement(ImageDownloadButtons, {\n                BaseURL: this.props.BaseURL,\n                FileID: this.props.FileID,\n                Fullname: this.props.Fullname,\n                XMLProtocol: this.props.XMLProtocol,\n                XMLReport: this.props.XMLReport,\n                NrrdFile: this.props.NrrdFile,\n                OtherTimepoints: this.props.OtherTimepoints\n            }),\n            this.props.HeadersExpanded ? React.createElement(ImagePanelHeadersTable, {\n                HeaderInfo: this.props.HeaderInfo }) : ''\n        );\n    }\n});\n\nvar ImagePanel = React.createClass({\n    displayName: 'ImagePanel',\n\n    getInitialState: function getInitialState() {\n        return {\n            BodyCollapsed: false,\n            HeadersCollapsed: true\n        };\n    },\n    toggleBody: function toggleBody(e) {\n        this.setState({\n            BodyCollapsed: !this.state.BodyCollapsed\n        });\n    },\n    toggleHeaders: function toggleHeaders(e) {\n        this.setState({\n            HeadersCollapsed: !this.state.HeadersCollapsed\n        });\n    },\n    render: function render() {\n        return React.createElement(\n            'div',\n            { className: 'col-xs-12 col-md-6' },\n            React.createElement(\n                'div',\n                { className: 'panel panel-default' },\n                React.createElement(ImagePanelHeader, {\n                    FileID: this.props.FileID,\n                    Filename: this.props.Filename,\n                    QCStatus: this.props.QCStatus,\n                    onToggleBody: this.toggleBody,\n                    onToggleHeaders: this.toggleHeaders,\n                    Expanded: !this.state.BodyCollapsed,\n                    HeadersExpanded: !this.state.HeadersCollapsed\n                }),\n                this.state.BodyCollapsed ? '' : React.createElement(ImagePanelBody, {\n                    BaseURL: this.props.BaseURL,\n\n                    FileID: this.props.FileID,\n                    Filename: this.props.Filename,\n                    Checkpic: this.props.Checkpic,\n                    HeadersExpanded: !this.state.HeadersCollapsed,\n\n                    HeaderInfo: this.props.HeaderInfo,\n\n                    FileNew: this.props.FileNew,\n                    HasQCPerm: this.props.HasQCPerm,\n                    QCStatus: this.props.QCStatus,\n                    Caveat: this.props.Caveat,\n                    Selected: this.props.Selected,\n                    SNR: this.props.SNR,\n\n                    Fullname: this.props.Fullname,\n                    XMLProtocol: this.props.XMLProtocol,\n                    XMLReport: this.props.XMLReport,\n                    NrrdFile: this.props.NrrdFile,\n                    OtherTimepoints: this.props.OtherTimepoints,\n                    SeriesUID: this.props.SeriesUID\n                })\n            )\n        );\n    }\n});\nvar RImagePanel = React.createFactory(ImagePanel);"}});
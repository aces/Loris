!function(e){function n(a){if(t[a])return t[a].exports;var r=t[a]={exports:{},id:a,loaded:!1};return e[a].call(r.exports,r,r.exports,n),r.loaded=!0,r.exports}var t={};return n.m=e,n.c=t,n.p="",n(0)}({0:function(e,n,t){t(1)(t(36))},1:function(e,n){e.exports=function(e){"undefined"!=typeof execScript?execScript(e):eval.call(null,e)}},36:function(e,n){e.exports="var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/* exported RMediaEditForm */\n\n/**\n * Media Edit Form\n *\n * Fetches data corresponding to a given file from Loris backend and\n * displays a form allowing meta information of the media file\n *\n * @author Alex Ilea\n * @version 1.0.0\n *\n * */\nvar MediaEditForm = function (_React$Component) {\n  _inherits(MediaEditForm, _React$Component);\n\n  function MediaEditForm(props) {\n    _classCallCheck(this, MediaEditForm);\n\n    var _this = _possibleConstructorReturn(this, (MediaEditForm.__proto__ || Object.getPrototypeOf(MediaEditForm)).call(this, props));\n\n    _this.state = {\n      Data: {},\n      formData: {},\n      uploadResult: null,\n      isLoaded: false,\n      loadedData: 0\n    };\n\n    _this.handleSubmit = _this.handleSubmit.bind(_this);\n    _this.setFormData = _this.setFormData.bind(_this);\n    _this.showAlertMessage = _this.showAlertMessage.bind(_this);\n    return _this;\n  }\n\n  _createClass(MediaEditForm, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var self = this;\n      $.ajax(this.props.DataURL, {\n        dataType: 'json',\n        success: function success(data) {\n          var formData = {\n            idMediaFile: data.mediaData.id,\n            forSite: data.mediaData.forSite,\n            dateTaken: data.mediaData.dateTaken,\n            comments: data.mediaData.comments,\n            hideFile: data.mediaData.hideFile\n          };\n\n          self.setState({\n            Data: data,\n            isLoaded: true,\n            mediaData: data.mediaData,\n            formData: formData\n          });\n        },\n        error: function error(_error, errorCode, errorMsg) {\n          console.error(_error, errorCode, errorMsg);\n          self.setState({\n            error: 'An error occurred when loading the form!'\n          });\n        }\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      // Data loading error\n      if (this.state.error !== undefined) {\n        return React.createElement(\n          'div',\n          { className: 'alert alert-danger text-center' },\n          React.createElement(\n            'strong',\n            null,\n            this.state.error\n          )\n        );\n      }\n\n      // Waiting for data to load\n      if (!this.state.isLoaded) {\n        return React.createElement(\n          'button',\n          { className: 'btn-info has-spinner' },\n          'Loading',\n          React.createElement('span', {\n            className: 'glyphicon glyphicon-refresh glyphicon-refresh-animate' })\n        );\n      }\n\n      var alertMessage = \"\";\n      var alertClass = \"alert text-center hide\";\n      var backURL = loris.BaseURL.concat('/media/');\n\n      if (this.state.uploadResult) {\n        if (this.state.uploadResult === \"success\") {\n          alertClass = \"alert alert-success text-center\";\n          alertMessage = \"Update Successful!\";\n        } else if (this.state.uploadResult === \"error\") {\n          alertClass = \"alert alert-danger text-center\";\n          alertMessage = \"Failed to update the file\";\n        }\n      }\n\n      return React.createElement(\n        'div',\n        null,\n        React.createElement(\n          'div',\n          { className: alertClass, role: 'alert', ref: 'alert-message' },\n          alertMessage\n        ),\n        this.state.uploadResult === \"success\" ? React.createElement(\n          'a',\n          { className: 'btn btn-primary', href: backURL },\n          'Back to media'\n        ) : null,\n        React.createElement(\n          FormElement,\n          {\n            name: 'mediaEdit',\n            onSubmit: this.handleSubmit,\n            ref: 'form'\n          },\n          React.createElement(\n            'h3',\n            null,\n            'Edit Media File'\n          ),\n          React.createElement('br', null),\n          React.createElement(SelectElement, {\n            name: 'pscid',\n            label: 'PSCID',\n            options: this.state.Data.candidates,\n            onUserInput: this.setFormData,\n            ref: 'pscid',\n            required: true,\n            disabled: true,\n            value: this.state.mediaData.pscid\n          }),\n          React.createElement(SelectElement, {\n            name: 'visitLabel',\n            label: 'Visit Label',\n            options: this.state.Data.visits,\n            onUserInput: this.setFormData,\n            ref: 'visitLabel',\n            required: true,\n            disabled: true,\n            value: this.state.mediaData.visitLabel\n          }),\n          React.createElement(SelectElement, {\n            name: 'forSite',\n            label: 'Site',\n            options: this.state.Data.sites,\n            onUserInput: this.setFormData,\n            ref: 'forSite',\n            disabled: true,\n            value: this.state.mediaData.forSite\n          }),\n          React.createElement(SelectElement, {\n            name: 'instrument',\n            label: 'Instrument',\n            options: this.state.Data.instruments,\n            onUserInput: this.setFormData,\n            ref: 'instrument',\n            disabled: true,\n            value: this.state.mediaData.instrument\n          }),\n          React.createElement(DateElement, {\n            name: 'dateTaken',\n            label: 'Date of Administration',\n            minYear: '2000',\n            maxYear: '2017',\n            onUserInput: this.setFormData,\n            ref: 'dateTaken',\n            value: this.state.formData.dateTaken\n          }),\n          React.createElement(TextareaElement, {\n            name: 'comments',\n            label: 'Comments',\n            onUserInput: this.setFormData,\n            ref: 'comments',\n            value: this.state.formData.comments\n          }),\n          React.createElement(FileElement, {\n            name: 'file',\n            id: 'mediaEditEl',\n            onUserInput: this.setFormData,\n            required: true,\n            disabled: true,\n            ref: 'file',\n            label: 'Uploaded file',\n            value: this.state.formData.fileName\n          }),\n          React.createElement(SelectElement, {\n            name: 'hideFile',\n            label: 'Hide File',\n            emptyOption: false,\n            options: [\"No\", \"Yes\"],\n            onUserInput: this.setFormData,\n            ref: 'hideFile',\n            value: this.state.formData.hideFile\n          }),\n          React.createElement(ButtonElement, { label: 'Update File' })\n        )\n      );\n    }\n\n    /**\n     * Handles form submission\n     * @param {event} e - Form submition event\n     */\n\n  }, {\n    key: 'handleSubmit',\n    value: function handleSubmit(e) {\n      e.preventDefault();\n\n      var self = this;\n      var myFormData = this.state.formData;\n\n      $('#mediaEditEl').hide();\n      $(\"#file-progress\").removeClass('hide');\n\n      $.ajax({\n        type: 'POST',\n        url: self.props.action,\n        data: JSON.stringify(myFormData),\n        cache: false,\n        contentType: false,\n        processData: false,\n        xhr: function xhr() {\n          var xhr = new window.XMLHttpRequest();\n          xhr.upload.addEventListener(\"progress\", function (evt) {\n            if (evt.lengthComputable) {\n              var progressbar = $(\"#progressbar\");\n              var progresslabel = $(\"#progresslabel\");\n              var percent = Math.round(evt.loaded / evt.total * 100);\n              $(progressbar).width(percent + \"%\");\n              $(progresslabel).html(percent + \"%\");\n              progressbar.attr('aria-valuenow', percent);\n            }\n          }, false);\n          return xhr;\n        },\n        success: function success(data) {\n          $(\"#file-progress\").addClass('hide');\n          self.setState({\n            uploadResult: \"success\"\n          });\n          self.showAlertMessage();\n        },\n        error: function error(err) {\n          console.error(err);\n          self.setState({\n            uploadResult: \"error\"\n          });\n          self.showAlertMessage();\n        }\n\n      });\n    }\n\n    /**\n     * Set the form data based on state values of child elements/componenets\n     *\n     * @param {string} formElement - name of the selected element\n     * @param {string} value - selected value for corresponding form element\n     */\n\n  }, {\n    key: 'setFormData',\n    value: function setFormData(formElement, value) {\n      var formData = this.state.formData;\n\n      if (value === \"\") {\n        formData[formElement] = null;\n      } else {\n        formData[formElement] = value;\n      }\n\n      this.setState({\n        formData: formData\n      });\n    }\n\n    /**\n     * Display a success/error alert message after form submission\n     */\n\n  }, {\n    key: 'showAlertMessage',\n    value: function showAlertMessage() {\n      var self = this;\n\n      if (this.refs[\"alert-message\"] === null) {\n        return;\n      }\n\n      var alertMsg = this.refs[\"alert-message\"];\n      $(alertMsg).fadeTo(2000, 500).delay(3000).slideUp(500, function () {\n        self.setState({\n          uploadResult: null\n        });\n      });\n    }\n  }]);\n\n  return MediaEditForm;\n}(React.Component);\n\nMediaEditForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  action: React.PropTypes.string.isRequired\n};\n\nvar RMediaEditForm = React.createFactory(MediaEditForm);"}});
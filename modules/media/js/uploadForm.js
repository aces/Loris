!function(e){function n(a){if(t[a])return t[a].exports;var r=t[a]={exports:{},id:a,loaded:!1};return e[a].call(r.exports,r,r.exports,n),r.loaded=!0,r.exports}var t={};return n.m=e,n.c=t,n.p="",n(0)}({0:function(e,n,t){t(1)(t(37))},1:function(e,n){e.exports=function(e){"undefined"!=typeof execScript?execScript(e):eval.call(null,e)}},37:function(e,n){e.exports="var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/* exported RMediaUploadForm */\n\n/**\n * Media Upload Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to upload a media file attached to a specific instrument\n *\n * @author Alex Ilea\n * @version 1.0.0\n *\n * */\nvar MediaUploadForm = function (_React$Component) {\n  _inherits(MediaUploadForm, _React$Component);\n\n  function MediaUploadForm(props) {\n    _classCallCheck(this, MediaUploadForm);\n\n    var _this = _possibleConstructorReturn(this, (MediaUploadForm.__proto__ || Object.getPrototypeOf(MediaUploadForm)).call(this, props));\n\n    _this.state = {\n      Data: {},\n      formData: {},\n      uploadResult: null,\n      errorMessage: null,\n      isLoaded: false,\n      loadedData: 0\n    };\n\n    _this.getValidFileName = _this.getValidFileName.bind(_this);\n    _this.handleSubmit = _this.handleSubmit.bind(_this);\n    _this.isValidFileName = _this.isValidFileName.bind(_this);\n    _this.isValidForm = _this.isValidForm.bind(_this);\n    _this.setFormData = _this.setFormData.bind(_this);\n    _this.showAlertMessage = _this.showAlertMessage.bind(_this);\n    return _this;\n  }\n\n  _createClass(MediaUploadForm, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var self = this;\n      $.ajax(this.props.DataURL, {\n        dataType: 'json',\n        success: function success(data) {\n          self.setState({\n            Data: data,\n            isLoaded: true\n          });\n        },\n        error: function error(data, errorCode, errorMsg) {\n          console.error(data, errorCode, errorMsg);\n          self.setState({\n            error: 'An error occurred when loading the form!'\n          });\n        }\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      // Data loading error\n      if (this.state.error !== undefined) {\n        return React.createElement(\n          'div',\n          { className: 'alert alert-danger text-center' },\n          React.createElement(\n            'strong',\n            null,\n            this.state.error\n          )\n        );\n      }\n\n      // Waiting for data to load\n      if (!this.state.isLoaded) {\n        return React.createElement(\n          'button',\n          { className: 'btn-info has-spinner' },\n          'Loading',\n          React.createElement('span', {\n            className: 'glyphicon glyphicon-refresh glyphicon-refresh-animate' })\n        );\n      }\n\n      var helpText = [\"File name should begin with \", React.createElement(\n        'b',\n        null,\n        '[PSCID]_[Visit Label]_[Instrument]'\n      ), React.createElement('br', null), \" For example, for candidate \", React.createElement(\n        'i',\n        null,\n        'ABC123'\n      ), \", visit \", React.createElement(\n        'i',\n        null,\n        'V1'\n      ), \" for \", React.createElement(\n        'i',\n        null,\n        'Body Mass Index'\n      ), \" the file name should be prefixed by: \", React.createElement(\n        'b',\n        null,\n        'ABC123_V1_Body_Mass_Index'\n      )];\n      var alertMessage = \"\";\n      var alertClass = \"alert text-center hide\";\n\n      if (this.state.uploadResult) {\n        if (this.state.uploadResult === \"success\") {\n          alertClass = \"alert alert-success text-center\";\n          alertMessage = \"Upload Successful!\";\n        } else if (this.state.uploadResult === \"error\") {\n          var errorMessage = this.state.errorMessage;\n          alertClass = \"alert alert-danger text-center\";\n          alertMessage = errorMessage ? errorMessage : \"Failed to upload!\";\n        }\n      }\n\n      return React.createElement(\n        'div',\n        null,\n        React.createElement(\n          'div',\n          { className: alertClass, role: 'alert', ref: 'alert-message' },\n          alertMessage\n        ),\n        React.createElement(\n          FormElement,\n          {\n            name: 'mediaUpload',\n            fileUpload: true,\n            onSubmit: this.handleSubmit,\n            ref: 'form'\n          },\n          React.createElement(\n            'h3',\n            null,\n            'Upload a media file'\n          ),\n          React.createElement('br', null),\n          React.createElement(StaticElement, {\n            label: 'Note',\n            text: helpText\n          }),\n          React.createElement(SelectElement, {\n            name: 'pscid',\n            label: 'PSCID',\n            options: this.state.Data.candidates,\n            onUserInput: this.setFormData,\n            ref: 'pscid',\n            hasError: false,\n            required: true,\n            value: this.state.formData.pscid\n          }),\n          React.createElement(SelectElement, {\n            name: 'visitLabel',\n            label: 'Visit Label',\n            options: this.state.Data.visits,\n            onUserInput: this.setFormData,\n            ref: 'visitLabel',\n            required: true,\n            value: this.state.formData.visitLabel\n          }),\n          React.createElement(SelectElement, {\n            name: 'forSite',\n            label: 'Site',\n            options: this.state.Data.sites,\n            onUserInput: this.setFormData,\n            ref: 'forSite',\n            required: true,\n            value: this.state.formData.forSite\n          }),\n          React.createElement(SelectElement, {\n            name: 'instrument',\n            label: 'Instrument',\n            options: this.state.Data.instruments,\n            onUserInput: this.setFormData,\n            ref: 'instrument',\n            value: this.state.formData.instrument\n          }),\n          React.createElement(DateElement, {\n            name: 'dateTaken',\n            label: 'Date of Administration',\n            minYear: '2000',\n            maxYear: '2017',\n            onUserInput: this.setFormData,\n            ref: 'dateTaken',\n            value: this.state.formData.dateTaken\n          }),\n          React.createElement(TextareaElement, {\n            name: 'comments',\n            label: 'Comments',\n            onUserInput: this.setFormData,\n            ref: 'comments',\n            value: this.state.formData.comments\n          }),\n          React.createElement(FileElement, {\n            name: 'file',\n            id: 'mediaUploadEl',\n            onUserInput: this.setFormData,\n            ref: 'file',\n            label: 'File to upload',\n            required: true\n          }),\n          React.createElement(ButtonElement, { label: 'Upload File' })\n        )\n      );\n    }\n\n    /** *******************************************************************************\n    *                      ******     Helper methods     *******\n    *********************************************************************************/\n\n    /**\n     * Returns a valid name for the file to be uploaded\n     *\n     * @param {string} pscid - PSCID selected from the dropdown\n     * @param {string} visitLabel - Visit label selected from the dropdown\n     * @param {string} instrument - Instrument selected from the dropdown\n     * @return {string} - Generated valid filename for the current selection\n     */\n\n  }, {\n    key: 'getValidFileName',\n    value: function getValidFileName(pscid, visitLabel, instrument) {\n      var fileName = pscid + \"_\" + visitLabel;\n      if (instrument) fileName += \"_\" + instrument;\n\n      return fileName;\n    }\n\n    /**\n     * Handle form submission\n     * @param {object} e - Form submission event\n     */\n\n  }, {\n    key: 'handleSubmit',\n    value: function handleSubmit(e) {\n      e.preventDefault();\n\n      var myFormData = this.state.formData;\n      var formRefs = this.refs;\n      var mediaFiles = this.state.Data.mediaFiles ? this.state.Data.mediaFiles : [];\n\n      // Validate the form\n      if (!this.isValidForm(formRefs, myFormData)) {\n        return;\n      }\n\n      // Validate uploaded file name\n      var instrument = myFormData.instrument ? myFormData.instrument : null;\n      var fileName = myFormData.file ? myFormData.file.name : null;\n      var requiredFileName = this.getValidFileName(myFormData.pscid, myFormData.visitLabel, instrument);\n      if (!this.isValidFileName(requiredFileName, fileName)) {\n        alert(\"File name should begin with: \" + requiredFileName);\n        return;\n      }\n\n      // Check for duplicate file names\n      var isDuplicate = mediaFiles.indexOf(myFormData.file.name);\n      if (isDuplicate >= 0) {\n        var confirmed = confirm(\"A file with this name already exists!\\n\" + \"Would you like to override existing file?\");\n        if (!confirmed) return;\n      }\n\n      // Set form data and upload the media file\n      var self = this;\n      var formData = new FormData();\n      for (var key in myFormData) {\n        if (myFormData[key] !== \"\") {\n          formData.append(key, myFormData[key]);\n        }\n      }\n\n      $('#mediaUploadEl').hide();\n      $(\"#file-progress\").removeClass('hide');\n\n      $.ajax({\n        type: 'POST',\n        url: self.props.action,\n        data: formData,\n        cache: false,\n        contentType: false,\n        processData: false,\n        xhr: function xhr() {\n          var xhr = new window.XMLHttpRequest();\n          xhr.upload.addEventListener(\"progress\", function (evt) {\n            if (evt.lengthComputable) {\n              var progressbar = $(\"#progressbar\");\n              var progresslabel = $(\"#progresslabel\");\n              var percent = Math.round(evt.loaded / evt.total * 100);\n              $(progressbar).width(percent + \"%\");\n              $(progresslabel).html(percent + \"%\");\n              progressbar.attr('aria-valuenow', percent);\n            }\n          }, false);\n          return xhr;\n        },\n        success: function success(data) {\n          $(\"#file-progress\").addClass('hide');\n\n          // Add file to the list of exiting files\n          var mediaFiles = self.state.Data.mediaFiles;\n          mediaFiles.push(myFormData.file.name);\n\n          self.setState({\n            mediaFiles: mediaFiles,\n            uploadResult: \"success\",\n            formData: {} // reset form data after successful file upload\n          });\n\n          // Trigger an update event to update all observers (i.e DataTable)\n          var event = new CustomEvent('update-datatable');\n          window.dispatchEvent(event);\n\n          self.showAlertMessage();\n\n          // Iterates through child components and resets state\n          // to initial state in order to clear the form\n          Object.keys(formRefs).map(function (ref) {\n            if (formRefs[ref].state && formRefs[ref].state.value) {\n              formRefs[ref].state.value = \"\";\n            }\n          });\n          // rerender components\n          self.forceUpdate();\n        },\n        error: function error(err) {\n          console.error(err);\n          var msg = err.responseJSON ? err.responseJSON.message : \"Upload error!\";\n          self.setState({\n            uploadResult: \"error\",\n            errorMessage: msg\n          });\n          self.showAlertMessage();\n        }\n\n      });\n    }\n\n    /**\n     * Checks if the inputted file name is valid\n     *\n     * @param {string} requiredFileName - Required file name\n     * @param {string} fileName - Provided file name\n     * @return {boolean} - true if fileName starts with requiredFileName, false otherwise\n     */\n\n  }, {\n    key: 'isValidFileName',\n    value: function isValidFileName(requiredFileName, fileName) {\n      if (fileName === null || requiredFileName === null) {\n        return false;\n      }\n\n      return fileName.indexOf(requiredFileName) === 0;\n    }\n\n    /**\n     * Validate the form\n     *\n     * @param {object} formRefs - Object containing references to React form elements\n     * @param {object} formData - Object containing form data inputed by user\n     * @return {boolean} - true if all required fields are filled, false otherwise\n     */\n\n  }, {\n    key: 'isValidForm',\n    value: function isValidForm(formRefs, formData) {\n      var isValidForm = true;\n\n      var requiredFields = {\n        pscid: null,\n        visitLabel: null,\n        file: null\n      };\n\n      Object.keys(requiredFields).map(function (field) {\n        if (formData[field]) {\n          requiredFields[field] = formData[field];\n        } else if (formRefs[field]) {\n          formRefs[field].props.hasError = true;\n          isValidForm = false;\n        }\n      });\n      this.forceUpdate();\n\n      return isValidForm;\n    }\n\n    /**\n     * Set the form data based on state values of child elements/componenets\n     *\n     * @param {string} formElement - name of the selected element\n     * @param {string} value - selected value for corresponding form element\n     */\n\n  }, {\n    key: 'setFormData',\n    value: function setFormData(formElement, value) {\n      // Only display visits and sites available for the current pscid\n      var visitLabel = this.state.formData.visitLabel;\n      var pscid = this.state.formData.pscid;\n\n      if (formElement === \"pscid\" && value !== \"\") {\n        this.state.Data.visits = this.state.Data.sessionData[value].visits;\n        this.state.Data.sites = this.state.Data.sessionData[value].sites;\n        if (visitLabel) {\n          this.state.Data.instruments = this.state.Data.sessionData[value].instruments[visitLabel];\n        } else {\n          this.state.Data.instruments = this.state.Data.sessionData[value].instruments.all;\n        }\n      }\n\n      if (formElement === \"visitLabel\" && value !== \"\" && pscid) {\n        this.state.Data.instruments = this.state.Data.sessionData[pscid].instruments[value];\n      }\n\n      var formData = this.state.formData;\n      formData[formElement] = value;\n\n      this.setState({\n        formData: formData\n      });\n    }\n\n    /**\n     * Display a success/error alert message after form submission\n     */\n\n  }, {\n    key: 'showAlertMessage',\n    value: function showAlertMessage() {\n      var self = this;\n\n      if (this.refs[\"alert-message\"] === null) {\n        return;\n      }\n\n      var alertMsg = this.refs[\"alert-message\"];\n      $(alertMsg).fadeTo(2000, 500).delay(3000).slideUp(500, function () {\n        self.setState({\n          uploadResult: null\n        });\n      });\n    }\n  }]);\n\n  return MediaUploadForm;\n}(React.Component);\n\nMediaUploadForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  action: React.PropTypes.string.isRequired\n};\n\nvar RMediaUploadForm = React.createFactory(MediaUploadForm);"}});
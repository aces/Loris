<?php declare(strict_types=1);
/**
 * POST request methods.
 *
 * Used to retrieve info & create timepoint by the create_timepoint form.
 * Ensures the user can create timepoint before processing
 * the POST body (array) data.
 *
 * PHP Version 7
 *
 * @category Loris
 * @package  Dashboard
 * @author   Alizée Wickenheiser <alizee.wickenheiser@mcin.ca>
 * @license  http://www.gnu.org/licenses/gpl-3.0.txt GPLv3
 * @link     https://www.github.com/aces/Loris/
 */
namespace LORIS\dashboard;
use \Psr\Http\Message\ServerRequestInterface;
use \Psr\Http\Message\ResponseInterface;
/**
 * The NDB_Page for the POST requests.
 *
 * @category Loris
 * @package  Dashboard
 * @author   Tara Campbell <tara.campbell@mail.mcgill.ca>
 *           Alizée Wickenheiser <alizee.wickenheiser@mcin.ca>
 * @license  http://www.gnu.org/licenses/gpl-3.0.txt GPLv3
 * @link     https://www.github.com/aces/Loris/
 */
class AjaxDashboard extends \NDB_Page
{
    public $skipTemplate = true;
    /**
     * This function will return a json response.
     *
     * @param ServerRequestInterface $request The incoming PSR7 request
     *
     * @return ResponseInterface The outgoing PSR7 response
     */
    public function handle(ServerRequestInterface $request) : ResponseInterface
    {
        /**
         * Ensure it's a POST request.
         */
        if ($request->getMethod() != 'POST') {
            return (new \LORIS\Http\Response())
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(405)
                ->withHeader('Allow', 'POST')
                ->withBody(
                    new \LORIS\Http\StringStream(
                        'Only POST requests are allowed'
                    )
                );
        }
        /**
         * Parse POST request body.
         */
        $requestBody = $request->getParsedBody();

        /**
         * Response to reply.
         */
        $response = $this->processRequest($requestBody);
        return (new \LORIS\Http\Response())
            ->withHeader('Content-Type', 'application/json')
            ->withStatus(200)
            ->withHeader('Allow', 'POST')
            ->withBody(
                new \LORIS\Http\StringStream(
                    json_encode($response)
                )
            );
    }
    /**
     * Processes the values and saves to database
     *
     * @param array $values the user data received.
     *
     * @return array
     */
    function processRequest(array $values) : array
    {
        if (isset($values['command']) && $values['command'] == 'initialize') {
            $response = $this->initializeSetup($values);
        } else if (isset($values['command']) && $values['command'] == 'create') {
            $response['status'] = 'success';
        } else {
            $response['status'] = 'error';
        }
        return $response;
    }

    /**
     * Initialize setup, building the Dashboard.
     *
     * @param array $values the user data received.
     *
     * @return array
     * @throws \LorisException
     */
    function initializeSetup(array $values) : array
    {
        // data for panels.
        $welcomeData = array();
        $recruitmentData = array();
        $studyProgressionData = array();
        $myTasksData = array();
        $documentRepositoryData = array();
        $behaviouralFeedbackData = array();

        $DB     = \Database::singleton();
        $user   = \User::singleton();
        $config = \NDB_Config::singleton();
        $site   = $user->getSiteNames();

        $userID     = $user->getUsername();
        $lastLogin = $DB->pselectOne(
            "SELECT MAX(Login_timestamp)
             FROM user_login_history
             WHERE Login_timestamp < (SELECT MAX(Login_timestamp)
                FROM user_login_history
                WHERE userID=:UserID AND Success='Y')
             AND userID=:UserID AND Success='Y'",
            array('UserID' => $userID)
        );

        $siteID = $user->getCenterIDs();
        // todo user_site used with myTasks
        $myTasksData['user_site'] = $siteID;

        // Welcome panel
        // todo username used with welcome
        $welcomeData['username'] = $user->getFullname();
        if ($lastLogin) {
            // todo lastLogin used with welcome
            $welcomeData['lastLogin'] = $lastLogin;
        } else {
            // todo
            $welcomeData['lastLogin'] = '...never. Welcome!';
        }
        // todo projectDescription used with welcome
        $welcomeData['projectDescription']
            = $config->getSetting('projectDescription');
        $dashboard_links = $config->getExternalLinks('dashboard');
        if (!empty($dashboard_links)) {
            foreach ($dashboard_links as $text => $url) {
                // todo dashboard_links used with welcome
                $welcomeData['links'][]
                    = array(
                    'url'        => $url,
                    'label'      => $text,
                    'windowName' => md5($url),
                );
            }
        }

        $recruitmentTarget = $config->getSetting('recruitmentTarget');
        $recruitmentData = $this->createProjectProgressBar(
            'overall',
            "Overall Recruitment",
            $recruitmentTarget,
            $this->getTotalRecruitment(),
            $recruitmentData
        );

        $useProjects = $config->getSetting('useProjects');
        // todo useProjects used with recruitment
        $recruitmentData['useProjects'] = $useProjects;
        if ($useProjects == 'true') {
            $projects = \Utility::getProjectList();
            foreach ($projects as $projectID => $project) {
                $projectInfo = $config->getProjectSettings($projectID);
                if (is_null($projectInfo)) {
                    throw new \LorisException(
                        'No project settings exist in the Database for ' .
                        'project ID ' . intval($projectID)
                    );
                }
                // todo XXX
                $recruitmentData = $this->createProjectProgressBar(
                    $projectID,
                    $projectInfo['Name'],
                    $projectInfo['recruitmentTarget'],
                    $this->getTotalRecruitmentByProject($projectID),
                    $recruitmentData
                );
            }
        }

        // Charts
        // todo total_scans used with recruitment
        $recruitmentData['total_scans'] = $DB->pselectOne(
            "SELECT COUNT(*) FROM files f
		LEFT JOIN session s ON (s.ID=f.SessionID)
		LEFT JOIN candidate c ON (s.CandID=c.CandID)
		WHERE s.Active='Y' AND c.Active='Y'
			AND s.CenterID <> 1",
            array()
        );

        // Tasks

        // New scans
        if ($user->hasPermission('imaging_browser_qc')) {
            // todo new_scans used with myTasks
            $myTasksData['new_scans'] = $DB->pselectOne(
                "SELECT COUNT(DISTINCT s.ID)
                 FROM files f 
                 LEFT JOIN session s ON (s.ID=f.SessionID)
                 LEFT JOIN candidate c ON (s.CandID=c.CandID)
                 WHERE (MRIQCStatus='' OR MRIQCPending='Y')
                 AND s.Active='Y' AND c.Active='Y'
                 AND s.CenterID <> 1",
                array()
            );
            $myTasksData['new_scans_site'] = 'Sites: all';
        }

        // Data entry conflicts
        if ($user->hasPermission('conflict_resolver')) {
            if ($user->hasPermission('access_all_profiles')) {
                // todo conflicts used with myTasks
                $myTasksData['conflicts'] = $DB->pselectOne(
                    "SELECT COUNT(*) FROM conflicts_unresolved cu
                     LEFT JOIN flag ON (cu.CommentId1=flag.CommentID) 
                     LEFT JOIN session s ON (flag.SessionID=s.ID)
			         LEFT JOIN candidate c ON (s.CandID=c.CandID)
                     WHERE s.CenterID <> 1
			         AND s.Active='Y' AND c.Active='Y'",
                    array()
                );
                $myTasksData['conflicts_site'] = 'Sites: all';
            } else {
                // todo
                $myTasksData['conflicts'] = $DB->pselectOne(
                    "SELECT COUNT(*) FROM conflicts_unresolved cu 
                     LEFT JOIN flag ON (cu.CommentId1=flag.CommentID) 
                     LEFT JOIN session s ON (flag.SessionID=s.ID)
		             LEFT JOIN candidate c ON (c.CandID=s.CandID)
		             LEFT JOIN Project p ON (c.ProjectID=p.ProjectID ) 
                     WHERE FIND_IN_SET(s.CenterID, :siteID) 
			            AND s.Active='Y' AND c.Active='Y'",
                    array('siteID' => implode(',', $siteID))
                );
                $myTasksData['conflicts_site'] = 'Sites: All User Sites';
            }
        }
        // Incomplete forms
        if ($user->hasPermission('data_entry')) {
            if ($user->hasPermission('access_all_profiles')) {
                // todo incomplete_forms used with myTasks
                $myTasksData['incomplete_forms']      = $DB->pselectOne(
                    "SELECT COUNT(*) FROM flag
			LEFT JOIN session s ON (s.ID=flag.SessionID)
			LEFT JOIN candidate c ON (s.CandID=c.CandID)
		     WHERE flag.Data_entry='In Progress'
			AND s.Active='Y' AND c.Active='Y' AND s.CenterID <> 1",
                    array()
                );
                $myTasksData['incomplete_forms_site'] = 'Sites: all';
            } else {
                $myTasksData['incomplete_forms']      = $DB->pselectOne(
                    "SELECT COUNT(*) FROM flag
                    LEFT JOIN session s ON (flag.SessionID=s.ID)
			LEFT JOIN candidate c ON (s.CandID=c.CandID)
                    LEFT JOIN psc ON (psc.CenterID=s.CenterID) 
                    WHERE Data_entry='In Progress' 
                    AND FIND_IN_SET(psc.CenterID, :siteID)
			          AND s.Active='Y' AND c.Active='Y'",
                    array('siteID' => implode(',', $siteID))
                );
                $myTasksData['incomplete_forms_site'] = $site;
            }
        }

        // Accounts pending approval
        if ($user->hasPermission('user_accounts_multisite')
            && $user->hasPermission('user_accounts')
        ) {
            // todo pending_users used with myTasks
            $myTasksData['pending_users']      = $DB->pselectOne(
                "SELECT COUNT(DISTINCT users.UserID) FROM users 
                LEFT JOIN user_psc_rel as upr ON (upr.UserID=users.ID)
		        WHERE users.Pending_approval='Y' 
                AND (upr.CenterID <> 1 OR upr.CenterID IS NULL)",
                array()
            );
            $myTasksData['pending_users_site'] = 'Sites: all';
        } elseif ($user->hasPermission('user_accounts')) {
            $site_arr = $user->getCenterIDs();
            // todo
            $myTasksData['pending_users'] = $DB->pselectOne(
                "SELECT COUNT(DISTINCT users.UserID) FROM users 
                LEFT JOIN user_psc_rel as upr ON (upr.UserID=users.ID)
		        WHERE users.Pending_approval='Y' AND upr.CenterID IN (:CID)",
                array('CID' => implode(",", $site_arr))
            );

            $myTasksData['pending_users_site'] = 'Sites: All User Sites';
        }

        // Violated scans
        if ($user->hasPermission('violated_scans_view_allsites')) {
            // todo violated_scans used with myTasks
            $myTasksData['violated_scans'] = $DB->pselectOne(
                "SELECT COUNT(*) FROM mri_protocol_violated_scans
			LEFT JOIN candidate c USING (CandID)
		WHERE COALESCE(c.RegistrationCenterID, 0) <> 1",
                /* include null CenterIDs so we don't accidentally
                filter things out */
                array()
            );
            $myTasksData['violated_scans_site'] = 'Sites: all';
        }

        // Document Repository Items
        if ($user->hasPermission('document_repository_view')
            || $user->hasPermission('document_repository_delete')
        ) {
            $document_repository = $DB->pselect(
                "SELECT File_name, Date_uploaded, Data_dir FROM document_repository 
                 ORDER BY Date_uploaded DESC LIMIT 4",
                array()
            );
            for ($i=0; $i < sizeof($document_repository); $i++) {
                if ($document_repository[$i]['Date_uploaded'] > $lastLogin) {
                    $document_repository[$i]['new'] = 1;
                } else {
                    $document_repository[$i]['new'] = 0;
                }
            }
            // todo document_repository_notifications used with documentRepository
            $documentRepositoryData['notifications']
                = $document_repository;
        }

        // Issue Tracker Assigned Issues
        if ($user->hasPermission('issue_tracker_developer')) {
            $issue_tracker = $DB->pselectOne(
                "SELECT COUNT(*) FROM issues
                 WHERE status !='closed'
                 AND assignee=:userID",
                array('userID' => $user->getData('UserID'))
            );
            // todo issues_assigned used with myTasks
            $myTasksData['issues_assigned']
                = $issue_tracker;

            // I suppose you could also base it on your query
            if ($user->hasPermission('access_all_profiles')) {
                // todo issues_assigned_site used with myTasks
                $myTasksData['issues_assigned_site'] = 'Sites: all';
            } else {
                // todo issues_assigned_site used with myTasks
                $myTasksData['issues_assigned_site'] = 'Sites: All User Sites';
            }
        }

        // Behavioural Feedback Items
        if ($user->hasPermission('bvl_feedback')) {
            $bvl_feedback = $DB->pselect(
                "SELECT fbt.Name, fbe.Testdate, fbe.Comment, fbth.FieldName, 
                fbth.CommentID, fbth.SessionID, fbth.CandID, fbth.Feedback_level
                 FROM feedback_bvl_entry fbe 
                 JOIN feedback_bvl_thread fbth USING (FeedbackID) 
                 JOIN feedback_bvl_type fbt USING (Feedback_type)
                 WHERE fbth.Status='opened' AND fbth.Active='Y'
                 ORDER BY Testdate DESC LIMIT 4",
                array()
            );
            for ($i=0; $i < sizeof($bvl_feedback); $i++) {
                if ($bvl_feedback[$i]['Testdate'] > $lastLogin) {
                    $bvl_feedback[$i]['new'] = 1;
                } else {
                    $bvl_feedback[$i]['new'] = 0;
                }
                if ($bvl_feedback[$i]['Feedback_level'] === 'profile') {
                    $bvl_feedback[$i]['URL'] = '/' . $bvl_feedback[$i]['CandID'];
                } else if ($bvl_feedback[$i]['Feedback_level'] === 'visit') {
                    $bvl_feedback[$i]['URL'] = '/instrument_list/?candID= '
                        . $bvl_feedback[$i]['CandID'] . '&sessionID='
                        . $bvl_feedback[$i]['SessionID'];
                } else if ($bvl_feedback[$i]['Feedback_level'] === 'instrument') {
                    $instrument = $DB->pselectOne(
                        "SELECT Test_name from flag WHERE CommentID=:cid",
                        array('cid' => $bvl_feedback[$i]['CommentID'])
                    );
                    if (!empty($instrument)) {
                        $bvl_feedback[$i]['URL'] = '/instruments/'
                            . $instrument . '/?candID='
                            . $bvl_feedback[$i]['CandID'] . '&sessionID='
                            . $bvl_feedback[$i]['SessionID'] . '&commentID='
                            . $bvl_feedback[$i]['CommentID'];
                    }
                }
            }
            // todo bvl_feedback_notifications used with behaviouralFeedback
            $behaviouralFeedbackData['notifications']
                = $bvl_feedback;
        }

        if ($recruitmentData['progress']['overall']) {
            $studyProgressionData = $recruitmentData['progress']['overall'];
        }

        $values['welcome'] = $welcomeData;
        $values['recruitment'] = $recruitmentData;
        $values['studyProgression'] = $studyProgressionData;
        $values['tasks'] = $myTasksData;
        $values['documentRepository'] = $documentRepositoryData;
        $values['behaviouralFeedback'] = $behaviouralFeedbackData;

        return $values;
    }

    /**
     * Gets the total count of candidates associated with a specific project
     *
     * @return int
     */
    function getTotalRecruitment()
    {
        $DB = \Database::singleton();
        $totalRecruitment = $DB->pselectOne(
            "SELECT COUNT(*) FROM candidate c
             WHERE c.Active='Y' AND c.Entity_type='Human' 
             AND c.RegistrationCenterID <> 1",
            array()
        );
        return $totalRecruitment;
    }

    /**
     * Gets the total count of candidates associated with a specific project
     *
     * @param int $projectID Project ID
     *
     * @return int
     */
    function getTotalRecruitmentByProject($projectID)
    {
        $DB = \Database::singleton();
        $totalRecruitment = $DB->pselectOne(
            "SELECT COUNT(*)
             FROM candidate c
             WHERE c.Active='Y' AND c.ProjectID=:PID AND c.Entity_type='Human'
             AND c.RegistrationCenterID <> 1",
            array('PID' => $projectID)
        );
        return $totalRecruitment;
    }

    /**
     * Gets the total count of candidates of a specific sex
     *
     * @param string $sex Biological sex (male or female)
     *
     * @return int
     */
    function getTotalSex(string $sex) : int
    {
        $DB    = \Database::singleton();
        $total = $DB->pselectOne(
            "SELECT COUNT(c.CandID)
             FROM candidate c
             WHERE c.Sex=:sex AND c.Active='Y' AND c.Entity_type='Human'
             AND c.RegistrationCenterID <> 1",
            array('sex' => $sex)
        );
        return $total;
    }

    /**
     * Gets the total count of candidates of a specific sex,
     * associated with a specific project
     *
     * @param string $sex       A biological sex (male or female)
     * @param int    $projectID Project ID
     *
     * @return int
     */
    function getTotalSexByProject(string $sex, int $projectID) : int
    {
        $DB    = \Database::singleton();
        $total = $DB->pselectOne(
            "SELECT COUNT(c.CandID)
             FROM candidate c
             WHERE c.Sex=:sex AND c.Active='Y' AND c.ProjectID=:PID
             AND c.Entity_type='Human' AND c.RegistrationCenterID <> 1",
            array(
                'sex' => $sex,
                'PID' => $projectID,
            )
        );
        return $total;
    }

    /**
     * Creates the template data for a progress bar
     *
     * @param mixed  $ID                ID for the progress bar
     * @param string $title             Title for the progress bar
     * @param int    $recruitmentTarget Target number of candidates
     * @param int    $totalRecruitment  Total number of candidates
     * @param array  $recruitmentData   Data for recruitment panel.
     *
     * @return array
     */
    function createProjectProgressBar(
        $ID, $title, $recruitmentTarget, $totalRecruitment, $recruitmentData
    ) {
        $recruitmentData['progress'][$ID]['id'] = $ID;
        $recruitmentData['progress'][$ID]['total_recruitment'] = $totalRecruitment;
        $recruitmentData['progress'][$ID]['title'] = $title;

        if (!empty($recruitmentTarget)) {
            $recruitmentData['progress'][$ID]['recruitment_target']
                = $recruitmentTarget;

            if ($ID == 'overall') {
                $totalFemales = $this->getTotalSex('Female');
            } else {
                $totalFemales = $this->getTotalSexByProject('Female', $ID);
            }
            $recruitmentData['progress'][$ID]['female_total']   = $totalFemales;
            $recruitmentData['progress'][$ID]['female_percent']
                = round($totalFemales / $recruitmentTarget * 100);

            if ($ID == 'overall') {
                $totalMales = $this->getTotalSex('Male');
            } else {
                $totalMales = $this->getTotalSexByProject('Male', $ID);
            }
            $recruitmentData['progress'][$ID]['male_total']   = $totalMales;
            $recruitmentData['progress'][$ID]['male_percent']
                = round($totalMales / $recruitmentTarget * 100);

            if ($totalRecruitment > $recruitmentTarget) {
                $recruitmentData['progress'][$ID]['surpassed_recruitment']
                    = 'true';

                $recruitmentData['progress'][$ID]['female_full_percent']
                    = round($totalFemales / $totalRecruitment * 100);

                $recruitmentData['progress'][$ID]['male_full_percent']
                    = round($totalMales / $totalRecruitment * 100);
            }
        }
        return $recruitmentData;
    }


    /**
     * Validate the post data,
     * from the create timepoint form.
     *
     * @param array $values the form values.
     *
     * @return array
     */
    function validate(array $values) : array
    {
        return $values;
    }
}

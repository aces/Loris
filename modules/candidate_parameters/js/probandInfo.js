!function(e){function n(a){if(t[a])return t[a].exports;var r=t[a]={exports:{},id:a,loaded:!1};return e[a].call(r.exports,r,r.exports,n),r.loaded=!0,r.exports}var t={};return n.m=e,n.c=t,n.p="",n(0)}({0:function(e,n,t){t(1)(t(16))},1:function(e,n){e.exports=function(e){"undefined"!=typeof execScript?execScript(e):eval.call(null,e)}},16:function(e,n){e.exports='/* exported RProbandInfo */\n\nvar ProbandInfo = React.createClass({\n  displayName: "ProbandInfo",\n\n  getInitialState: function getInitialState() {\n    return {\n      genderOptions: {\n        Male: "Male",\n        Female: "Female"\n      },\n      Data: [],\n      formData: {},\n      updateResult: null,\n      errorMessage: null,\n      isLoaded: false,\n      loadedData: 0\n    };\n  },\n  componentDidMount: function componentDidMount() {\n    var that = this;\n    $.ajax(this.props.dataURL, {\n      dataType: \'json\',\n      xhr: function xhr() {\n        var xhr = new window.XMLHttpRequest();\n        xhr.addEventListener("progress", function (evt) {\n          that.setState({\n            loadedData: evt.loaded\n          });\n        });\n        return xhr;\n      },\n      success: function success(data) {\n        var formData = {\n          ProbandGender: data.ProbandGender,\n          ProbandDoB: data.ProbandDoB,\n          ProbandDoB2: data.ProbandDoB\n        };\n\n        that.setState({\n          formData: formData,\n          Data: data,\n          isLoaded: true\n        });\n      },\n      error: function error(data, errorCode, errorMsg) {\n        that.setState({\n          error: \'An error occurred when loading the form!\'\n        });\n      }\n    });\n  },\n  setFormData: function setFormData(formElement, value) {\n    var formData = this.state.formData;\n    formData[formElement] = value;\n    this.setState({\n      formData: formData\n    });\n  },\n  onSubmit: function onSubmit(e) {\n    e.preventDefault();\n  },\n  render: function render() {\n    if (!this.state.isLoaded) {\n      if (this.state.error !== undefined) {\n        return React.createElement(\n          "div",\n          { className: "alert alert-danger text-center" },\n          React.createElement(\n            "strong",\n            null,\n            this.state.error\n          )\n        );\n      }\n\n      return React.createElement(\n        "button",\n        { className: "btn-info has-spinner" },\n        "Loading",\n        React.createElement("span", {\n          className: "glyphicon glyphicon-refresh glyphicon-refresh-animate"\n        })\n      );\n    }\n\n    var disabled = true;\n    var updateButton = null;\n    if (loris.userHasPermission(\'candidate_parameter_edit\')) {\n      disabled = false;\n      updateButton = React.createElement(ButtonElement, { label: "Update" });\n    }\n\n    var dobRequired = false;\n    var dob2Required = false;\n    if (this.state.formData.ProbandGender !== null) {\n      dobRequired = true;\n    }\n    if (this.state.formData.ProbandDoB !== null) {\n      dob2Required = true;\n    }\n\n    var alertMessage = "";\n    var alertClass = "alert text-center hide";\n    if (this.state.updateResult) {\n      if (this.state.updateResult === "success") {\n        alertClass = "alert alert-success text-center";\n        alertMessage = "Update Successful!";\n      } else if (this.state.updateResult === "error") {\n        var errorMessage = this.state.errorMessage;\n        alertClass = "alert alert-danger text-center";\n        alertMessage = errorMessage ? errorMessage : "Failed to update!";\n      }\n    }\n\n    return React.createElement(\n      "div",\n      { "class": "row" },\n      React.createElement(\n        "div",\n        { className: alertClass, role: "alert", ref: "alert-message" },\n        alertMessage\n      ),\n      React.createElement(\n        FormElement,\n        {\n          name: "probandInfo",\n          onSubmit: this.handleSubmit,\n          ref: "form",\n          "class": "col-md-6"\n        },\n        React.createElement(StaticElement, {\n          label: "PSCID",\n          text: this.state.Data.pscid\n        }),\n        React.createElement(StaticElement, {\n          label: "DCCID",\n          text: this.state.Data.candID\n        }),\n        React.createElement(SelectElement, {\n          label: "Proband Gender",\n          name: "ProbandGender",\n          options: this.state.genderOptions,\n          value: this.state.Data.ProbandGender,\n          onUserInput: this.setFormData,\n          ref: "ProbandGender",\n          disabled: disabled,\n          required: true\n        }),\n        React.createElement(DateElement, {\n          label: "DoB Proband",\n          name: "ProbandDoB",\n          value: this.state.Data.ProbandDoB,\n          onUserInput: this.setFormData,\n          ref: "ProbandDoB",\n          disabled: disabled,\n          required: dobRequired\n        }),\n        React.createElement(DateElement, {\n          label: "Confirm DoB Proband",\n          name: "ProbandDoB2",\n          value: this.state.Data.ProbandDoB,\n          onUserInput: this.setFormData,\n          ref: "ProbandDoB2",\n          disabled: disabled,\n          required: dob2Required\n        }),\n        React.createElement(StaticElement, {\n          label: "Age Difference (months)",\n          text: this.state.Data.ageDifference\n        }),\n        updateButton\n      )\n    );\n  },\n  /**\n  * Handles form submission\n  *\n  * @param {event} e - Form submission event\n  */\n  handleSubmit: function handleSubmit(e) {\n    e.preventDefault();\n    var myFormData = this.state.formData;\n    var today = new Date();\n    var dd = today.getDate();\n    var mm = today.getMonth() + 1; // January is 0!\n    var yyyy = today.getFullYear();\n    if (dd < 10) {\n      dd = \'0\' + dd;\n    }\n    if (mm < 10) {\n      mm = \'0\' + mm;\n    }\n    today = yyyy + \'-\' + mm + \'-\' + dd;\n    var dob1 = myFormData.ProbandDoB ? myFormData.ProbandDoB : null;\n    var dob2 = myFormData.ProbandDoB2 ? myFormData.ProbandDoB2 : null;\n    if (dob1 !== dob2) {\n      alert("DOB do not match!");\n      return;\n    }\n\n    if (dob1 > today) {\n      alert("Consent to study date cannot be later than today!");\n      return;\n    }\n\n    // Set form data\n    var self = this;\n    var formData = new FormData();\n    for (var key in myFormData) {\n      if (myFormData[key] !== "") {\n        formData.append(key, myFormData[key]);\n      }\n    }\n\n    formData.append(\'tab\', this.props.tabName);\n    formData.append(\'candID\', this.state.Data.candID);\n    $.ajax({\n      type: \'POST\',\n      url: self.props.action,\n      data: formData,\n      cache: false,\n      contentType: false,\n      processData: false,\n      success: function success(data) {\n        self.setState({\n          updateResult: "success"\n        });\n        self.showAlertMessage();\n      },\n      error: function error(err) {\n        if (err.responseText !== "") {\n          var errorMessage = JSON.parse(err.responseText).message;\n          self.setState({\n            updateResult: "error",\n            errorMessage: errorMessage\n          });\n          self.showAlertMessage();\n        }\n      }\n    });\n  },\n  /**\n  * Display a success/error alert message after form submission\n  */\n  showAlertMessage: function showAlertMessage() {\n    var self = this;\n    if (this.refs["alert-message"] === null) {\n      return;\n    }\n\n    var alertMsg = this.refs["alert-message"];\n    $(alertMsg).fadeTo(2000, 500).delay(3000).slideUp(500, function () {\n      self.setState({\n        updateResult: null\n      });\n    });\n  }\n\n});\n\nvar RProbandInfo = React.createFactory(ProbandInfo);'}});
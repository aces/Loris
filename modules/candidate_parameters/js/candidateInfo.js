!function(e){function a(t){if(n[t])return n[t].exports;var r=n[t]={exports:{},id:t,loaded:!1};return e[t].call(r.exports,r,r.exports,a),r.loaded=!0,r.exports}var n={};return a.m=e,a.c=n,a.p="",a(0)}({0:function(e,a,n){n(1)(n(12))},1:function(e,a){e.exports=function(e){"undefined"!=typeof execScript?execScript(e):eval.call(null,e)}},12:function(e,a){e.exports='/* exported RCandidateInfo */\n\nvar CandidateInfo = React.createClass({\n  displayName: "CandidateInfo",\n\n  getInitialState: function getInitialState() {\n    return {\n      caveatOptions: {\n        true: "True",\n        false: "False"\n      },\n      Data: [],\n      formData: {},\n      updateResult: null,\n      errorMessage: null,\n      isLoaded: false,\n      loadedData: 0\n    };\n  },\n  componentDidMount: function componentDidMount() {\n    var that = this;\n    $.ajax(this.props.dataURL, {\n      dataType: \'json\',\n      xhr: function xhr() {\n        var xhr = new window.XMLHttpRequest();\n        xhr.addEventListener("progress", function (evt) {\n          that.setState({\n            loadedData: evt.loaded\n          });\n        });\n        return xhr;\n      },\n      success: function success(data) {\n        var formData = {\n          flaggedCaveatemptor: data.flagged_caveatemptor,\n          flaggedOther: data.flagged_other,\n          flaggedReason: data.flagged_reason\n        };\n\n        // Figure out what is the index of Other option\n        that.otherOption = null;\n        var caveatReasonOptions = data.caveatReasonOptions;\n        if (caveatReasonOptions) {\n          for (var reason in caveatReasonOptions) {\n            if (caveatReasonOptions[reason] === "Other") {\n              that.otherOption = reason;\n              break;\n            }\n          }\n        }\n\n        that.setState({\n          Data: data,\n          isLoaded: true,\n          formData: formData\n        });\n      },\n      error: function error(data, errorCode, errorMsg) {\n        that.setState({\n          error: \'An error occurred when loading the form!\'\n        });\n      }\n    });\n  },\n  setFormData: function setFormData(formElement, value) {\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    // Reset \'reason\' field\n    if (formElement === "flaggedCaveatemptor" && value === "false") {\n      formData.flaggedReason = \'\';\n      formData.flaggedOther = \'\';\n      this.refs.flaggedReason.state.value = "";\n      this.refs.flaggedReason.state.hasError = false;\n      this.refs.flaggedOther.state.value = "";\n    }\n\n    // Reset \'other\' field\n    if (formElement === "flaggedReason" && value !== this.otherOption) {\n      formData.flaggedOther = \'\';\n      this.refs.flaggedOther.state.value = "";\n    }\n\n    this.setState({\n      formData: formData\n    });\n  },\n  onSubmit: function onSubmit(e) {\n    e.preventDefault();\n  },\n  render: function render() {\n    if (!this.state.isLoaded) {\n      if (this.state.error !== undefined) {\n        return React.createElement(\n          "div",\n          { className: "alert alert-danger text-center" },\n          React.createElement(\n            "strong",\n            null,\n            this.state.error\n          )\n        );\n      }\n\n      return React.createElement(\n        "button",\n        { className: "btn-info has-spinner" },\n        "Loading",\n        React.createElement("span", {\n          className: "glyphicon glyphicon-refresh glyphicon-refresh-animate" })\n      );\n    }\n\n    var disabled = true;\n    var updateButton = null;\n    if (loris.userHasPermission(\'candidate_parameter_edit\')) {\n      disabled = false;\n      updateButton = React.createElement(ButtonElement, { label: "Update" });\n    }\n    var reasonDisabled = true;\n    var reasonRequired = false;\n    if (this.state.formData.flaggedCaveatemptor === "true") {\n      reasonDisabled = false;\n      reasonRequired = true;\n    }\n\n    var reasonKey = null;\n    var specifyOther = null;\n    var otherDisabled = true;\n    var otherRequired = false;\n    for (var key in this.state.Data.caveatReasonOptions) {\n      if (this.state.Data.caveatReasonOptions.hasOwnProperty(key)) {\n        if (this.state.Data.caveatReasonOptions[key] === "Other") {\n          reasonKey = key;\n          break;\n        }\n      }\n    }\n\n    if (this.state.formData.flaggedReason === reasonKey) {\n      otherRequired = true;\n      otherDisabled = false;\n    }\n\n    if (this.state.formData.flaggedCaveatemptor === "false") {\n      reasonDisabled = true;\n      reasonRequired = false;\n      otherDisabled = true;\n      otherRequired = false;\n    }\n\n    if (reasonKey !== null) {\n      specifyOther = React.createElement(TextareaElement, {\n        label: "If Other, please specify",\n        name: "flaggedOther",\n        value: this.state.formData.flaggedOther,\n        onUserInput: this.setFormData,\n        ref: "flaggedOther",\n        disabled: otherDisabled,\n        required: otherRequired\n      });\n    }\n    var extraParameterFields = [];\n    var extraParameters = this.state.Data.extra_parameters;\n    for (var key2 in extraParameters) {\n      if (extraParameters.hasOwnProperty(key2)) {\n        var paramTypeID = extraParameters[key2].ParameterTypeID;\n        var name = \'PTID\' + paramTypeID;\n        var value = this.state.Data.parameter_values[paramTypeID];\n\n        switch (extraParameters[key2].Type.substring(0, 3)) {\n          case "enu":\n            var types = extraParameters[key2].Type.substring(5);\n            types = types.slice(0, -1);\n            types = types.replace(/\'/g, \'\');\n            types = types.split(\',\');\n            var selectOptions = [];\n            for (var key3 in types) {\n              if (types.hasOwnProperty(key3)) {\n                selectOptions[types[key3]] = types[key3];\n              }\n            }\n\n            extraParameterFields.push(React.createElement(SelectElement, {\n              label: extraParameters[key2].Description,\n              name: name,\n              options: selectOptions,\n              value: value,\n              onUserInput: this.setFormData,\n              ref: name,\n              disabled: disabled\n            }));\n            break;\n          case "dat":\n            extraParameterFields.push(React.createElement(DateElement, {\n              label: extraParameters[key2].Description,\n              name: name,\n              value: value,\n              onUserInput: this.setFormData,\n              ref: name,\n              disabled: disabled\n            }));\n            break;\n          default:\n            extraParameterFields.push(React.createElement(TextareaElement, {\n              label: extraParameters[key2].Description,\n              name: name,\n              value: value,\n              onUserInput: this.setFormData,\n              ref: name,\n              disabled: disabled\n            }));\n        }\n      }\n    }\n\n    var alertMessage = "";\n    var alertClass = "alert text-center hide";\n    if (this.state.updateResult) {\n      if (this.state.updateResult === "success") {\n        alertClass = "alert alert-success text-center";\n        alertMessage = "Update Successful!";\n      } else if (this.state.updateResult === "error") {\n        var errorMessage = this.state.errorMessage;\n        alertClass = "alert alert-danger text-center";\n        alertMessage = errorMessage ? errorMessage : "Failed to update!";\n      }\n    }\n\n    return React.createElement(\n      "div",\n      { "class": "row" },\n      React.createElement(\n        "div",\n        { className: alertClass, role: "alert", ref: "alert-message" },\n        alertMessage\n      ),\n      React.createElement(\n        FormElement,\n        {\n          name: "candidateInfo",\n          onSubmit: this.handleSubmit,\n          ref: "form",\n          "class": "col-md-6"\n        },\n        React.createElement(StaticElement, {\n          label: "PSCID",\n          text: this.state.Data.pscid\n        }),\n        React.createElement(StaticElement, {\n          label: "DCCID",\n          text: this.state.Data.candID\n        }),\n        React.createElement(SelectElement, {\n          label: "Caveat Emptor Flag for Candidate",\n          name: "flaggedCaveatemptor",\n          options: this.state.caveatOptions,\n          value: this.state.formData.flaggedCaveatemptor,\n          onUserInput: this.setFormData,\n          ref: "flaggedCaveatemptor",\n          disabled: disabled,\n          required: true\n        }),\n        React.createElement(SelectElement, {\n          label: "Reason for Caveat Emptor Flag",\n          name: "flaggedReason",\n          options: this.state.Data.caveatReasonOptions,\n          value: this.state.formData.flaggedReason,\n          onUserInput: this.setFormData,\n          ref: "flaggedReason",\n          disabled: reasonDisabled,\n          required: reasonRequired\n        }),\n        specifyOther,\n        extraParameterFields,\n        updateButton\n      )\n    );\n  },\n  /**\n   * Handles form submission\n   *\n   * @param {event} e - Form submission event\n   */\n  handleSubmit: function handleSubmit(e) {\n    e.preventDefault();\n    var myFormData = this.state.formData;\n    // Set form data and upload the media file\n    var self = this;\n    var formData = new FormData();\n    for (var key in myFormData) {\n      if (myFormData.hasOwnProperty(key)) {\n        if (myFormData[key] !== "") {\n          formData.append(key, myFormData[key]);\n        }\n      }\n    }\n\n    formData.append(\'tab\', this.props.tabName);\n    formData.append(\'candID\', this.state.Data.candID);\n    $.ajax({\n      type: \'POST\',\n      url: self.props.action,\n      data: formData,\n      cache: false,\n      contentType: false,\n      processData: false,\n      success: function success(data) {\n        self.setState({\n          updateResult: "success"\n        });\n        self.showAlertMessage();\n      },\n      error: function error(err) {\n        if (err.responseText !== "") {\n          var errorMessage = JSON.parse(err.responseText).message;\n          self.setState({\n            updateResult: "error",\n            errorMessage: errorMessage\n          });\n          self.showAlertMessage();\n        }\n      }\n\n    });\n  },\n  /**\n   * Display a success/error alert message after form submission\n   */\n  showAlertMessage: function showAlertMessage() {\n    var self = this;\n    if (this.refs["alert-message"] === null) {\n      return;\n    }\n\n    var alertMsg = this.refs["alert-message"];\n    $(alertMsg).fadeTo(2000, 500).delay(3000).slideUp(500, function () {\n      self.setState({\n        updateResult: null\n      });\n    });\n  }\n\n});\n\nvar RCandidateInfo = React.createFactory(CandidateInfo);'}});
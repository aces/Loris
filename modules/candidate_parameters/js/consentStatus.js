!function(n){function t(a){if(e[a])return e[a].exports;var s=e[a]={exports:{},id:a,loaded:!1};return n[a].call(s.exports,s,s.exports,t),s.loaded=!0,s.exports}var e={};return t.m=n,t.c=e,t.p="",t(0)}({0:function(n,t,e){e(1)(e(13))},1:function(n,t){n.exports=function(n){"undefined"!=typeof execScript?execScript(n):eval.call(null,n)}},13:function(n,t){n.exports='/* exported RConsentStatus */\n\nvar ConsentStatus = React.createClass({\n  displayName: "ConsentStatus",\n\n  getInitialState: function getInitialState() {\n    return {\n      consentOptions: {\n        yes: "Yes",\n        no: "No"\n      },\n      Data: [],\n      formData: {},\n      updateResult: null,\n      errorMessage: null,\n      isLoaded: false,\n      loadedData: 0\n    };\n  },\n  componentDidMount: function componentDidMount() {\n    var that = this;\n    $.ajax(this.props.dataURL, {\n      dataType: \'json\',\n      xhr: function xhr() {\n        var xhr = new window.XMLHttpRequest();\n        xhr.addEventListener("progress", function (evt) {\n          that.setState({\n            loadedData: evt.loaded\n          });\n        });\n        return xhr;\n      },\n      success: function success(data) {\n        var formData = {};\n        var consents = data.consents;\n        for (var consentStatus in consents) {\n          if (consents.hasOwnProperty(consentStatus)) {\n            var consentDate = consentStatus + "_date";\n            var consentDate2 = consentStatus + "_date2";\n            var consentWithdrawal = consentStatus + "_withdrawal";\n            var consentWithdrawal2 = consentStatus + "_withdrawal2";\n            formData[consentStatus] = data.consentStatuses[consentStatus];\n            formData[consentDate] = data.consentDates[consentStatus];\n            formData[consentDate2] = data.consentDates[consentStatus];\n            formData[consentWithdrawal] = data.withdrawals[consentStatus];\n            formData[consentWithdrawal2] = data.withdrawals[consentStatus];\n          }\n        }\n\n        that.setState({\n          Data: data,\n          formData: formData,\n          isLoaded: true\n        });\n      },\n      error: function error(data, errorCode, errorMsg) {\n        that.setState({\n          error: \'An error occurred when loading the form!\'\n        });\n      }\n    });\n  },\n  setFormData: function setFormData(formElement, value) {\n    var formData = this.state.formData;\n    formData[formElement] = value;\n    this.setState({\n      formData: formData\n    });\n  },\n  onSubmit: function onSubmit(e) {\n    e.preventDefault();\n  },\n  render: function render() {\n    if (!this.state.isLoaded) {\n      if (this.state.error !== undefined) {\n        return React.createElement(\n          "div",\n          { className: "alert alert-danger text-center" },\n          React.createElement(\n            "strong",\n            null,\n            this.state.error\n          )\n        );\n      }\n\n      return React.createElement(\n        "button",\n        { className: "btn-info has-spinner" },\n        "Loading",\n        React.createElement("span", {\n          className: "glyphicon glyphicon-refresh glyphicon-refresh-animate"\n        })\n      );\n    }\n\n    var disabled = true;\n    var updateButton = null;\n    if (loris.userHasPermission(\'candidate_parameter_edit\')) {\n      disabled = false;\n      updateButton = React.createElement(ButtonElement, { label: "Update" });\n    }\n    var dateRequired = [];\n    var withdrawalRequired = [];\n    var i = 0;\n    for (var consent in this.state.Data.consents) {\n      if (this.state.Data.consents.hasOwnProperty(consent)) {\n        var withdrawal = consent + "_withdrawal";\n\n        if (this.state.formData[consent] === "yes") {\n          dateRequired[i] = true;\n        }\n        if (this.state.formData[withdrawal]) {\n          withdrawalRequired[i] = true;\n        } else {\n          withdrawalRequired[i] = false;\n        }\n        i++;\n      }\n    }\n\n    var consents = [];\n    i = 0;\n    for (var consentStatus in this.state.Data.consents) {\n      if (this.state.Data.consents.hasOwnProperty(consentStatus)) {\n        var label = this.state.Data.consents[consentStatus];\n        var consentDate = consentStatus + "_date";\n        var consentDate2 = consentStatus + "_date2";\n        var consentDateLabel = "Date of " + label;\n        var consentDateConfirmationLabel = "Confirmation Date of " + label;\n        var consentWithdrawal = consentStatus + "_withdrawal";\n        var consentWithdrawal2 = consentStatus + "_withdrawal2";\n        var consentWithdrawalLabel = "Date of Withdrawal of " + label;\n        var consentWithdrawalConfirmationLabel = "Confirmation Date of Withdrawal of " + label;\n\n        consents.push(React.createElement(SelectElement, {\n          label: label,\n          name: consentStatus,\n          options: this.state.consentOptions,\n          value: this.state.Data.consentStatuses[consentStatus],\n          onUserInput: this.setFormData,\n          ref: consentStatus,\n          disabled: disabled,\n          required: false\n        }));\n        consents.push(React.createElement(DateElement, {\n          label: consentDateLabel,\n          name: consentDate,\n          value: this.state.Data.consentDates[consentStatus],\n          onUserInput: this.setFormData,\n          ref: consentDate,\n          disabled: disabled,\n          required: dateRequired[i]\n        }));\n        consents.push(React.createElement(DateElement, {\n          label: consentDateConfirmationLabel,\n          name: consentDate2,\n          value: this.state.Data.consentDates[consentStatus],\n          onUserInput: this.setFormData,\n          ref: consentDate2,\n          disabled: disabled,\n          required: dateRequired[i]\n        }));\n        consents.push(React.createElement(DateElement, {\n          label: consentWithdrawalLabel,\n          name: consentWithdrawal,\n          value: this.state.Data.withdrawals[consentStatus],\n          onUserInput: this.setFormData,\n          ref: consentWithdrawal,\n          disabled: disabled,\n          required: false\n        }));\n        consents.push(React.createElement(DateElement, {\n          label: consentWithdrawalConfirmationLabel,\n          name: consentWithdrawal2,\n          value: this.state.Data.withdrawals[consentStatus],\n          onUserInput: this.setFormData,\n          ref: consentWithdrawal2,\n          disabled: disabled,\n          required: withdrawalRequired[i]\n        }));\n        consents.push(React.createElement("hr", null));\n\n        i++;\n      }\n    }\n\n    var formattedHistory = [];\n    for (var consentKey in this.state.Data.history) {\n      if (this.state.Data.history.hasOwnProperty(consentKey)) {\n        var consentLabel = this.state.Data.history[consentKey].label;\n        var consentType = this.state.Data.history[consentKey].consentType;\n        for (var field in this.state.Data.history[consentKey]) {\n          if (this.state.Data.history[consentKey].hasOwnProperty(field)) {\n            var line = "";\n            var historyConsent = this.state.Data.history[consentKey][field];\n            for (var field2 in historyConsent) {\n              if (historyConsent.hasOwnProperty(field2)) {\n                var current = historyConsent[field2];\n                if (current !== null) {\n                  switch (field2) {\n                    case \'data_entry_date\':\n                      line += "[";\n                      line += current;\n                      line += "] ";\n                      break;\n                    case \'entry_staff\':\n                      line += current;\n                      line += " ";\n                      break;\n                    case consentType:\n                      line += consentLabel + " Status: ";\n                      line += current;\n                      line += " ";\n                      break;\n                    case consentType + \'_date\':\n                      line += "Date of Consent: ";\n                      line += current;\n                      line += " ";\n                      break;\n                    case consentType + \'_withdrawal\':\n                      line += "Date of Consent Withdrawal: ";\n                      line += current;\n                      line += " ";\n                      break;\n                    default:\n                  }\n                }\n              }\n            }\n            formattedHistory.push(React.createElement(\n              "p",\n              null,\n              line\n            ));\n          }\n        }\n      }\n    }\n\n    var alertMessage = "";\n    var alertClass = "alert text-center hide";\n    if (this.state.updateResult) {\n      if (this.state.updateResult === "success") {\n        alertClass = "alert alert-success text-center";\n        alertMessage = "Update Successful!";\n      } else if (this.state.updateResult === "error") {\n        var errorMessage = this.state.errorMessage;\n        alertClass = "alert alert-danger text-center";\n        alertMessage = errorMessage ? errorMessage : "Failed to update!";\n      }\n    }\n\n    return React.createElement(\n      "div",\n      { "class": "row" },\n      React.createElement(\n        "div",\n        { className: alertClass, role: "alert", ref: "alert-message" },\n        alertMessage\n      ),\n      React.createElement(\n        FormElement,\n        {\n          name: "consentStatus",\n          onSubmit: this.handleSubmit,\n          ref: "form",\n          "class": "col-md-6"\n        },\n        React.createElement(StaticElement, {\n          label: "PSCID",\n          text: this.state.Data.pscid\n        }),\n        React.createElement(StaticElement, {\n          label: "DCCID",\n          text: this.state.Data.candID\n        }),\n        consents,\n        updateButton,\n        formattedHistory\n      )\n    );\n  },\n  /**\n  * Handles form submission\n  *\n  * @param {event} e - Form submission event\n  */\n  handleSubmit: function handleSubmit(e) {\n    e.preventDefault();\n    var myFormData = this.state.formData;\n    var today = new Date();\n    var dd = today.getDate();\n    var mm = today.getMonth() + 1; // January is 0!\n    var yyyy = today.getFullYear();\n    if (dd < 10) {\n      dd = \'0\' + dd;\n    }\n    if (mm < 10) {\n      mm = \'0\' + mm;\n    }\n    today = yyyy + \'-\' + mm + \'-\' + dd;\n    for (var consentStatus in this.state.Data.consents) {\n      if (this.state.Data.consents.hasOwnProperty(consentStatus)) {\n        var label = this.state.Data.consents[consentStatus];\n\n        var consentDate = consentStatus + "_date";\n        var consentDate2 = consentStatus + "_date2";\n\n        var date1 = myFormData[consentDate] ? myFormData[consentDate] : null;\n        var date2 = myFormData[consentDate2] ? myFormData[consentDate2] : null;\n\n        if (date1 !== date2) {\n          alert(label + " dates do not match!");\n          return;\n        }\n        if (date1 > today) {\n          alert(label + " date cannot be later than today!");\n          return;\n        }\n\n        var consentWithdrawal = consentStatus + "_withdrawal";\n        var consentWithdrawal2 = consentStatus + "_withdrawal2";\n\n        date1 = myFormData[consentWithdrawal] ? myFormData[consentWithdrawal] : null;\n        date2 = myFormData[consentWithdrawal2] ? myFormData[consentWithdrawal2] : null;\n\n        if (date1 !== date2) {\n          alert(label + " withdrawal dates do not match!");\n          return;\n        }\n        if (date1 > today) {\n          alert(label + " withdrawal date cannot be later than today!");\n          return;\n        }\n      }\n    }\n\n    // Set form data\n    var self = this;\n    var formData = new FormData();\n    for (var key in myFormData) {\n      if (myFormData[key] !== "") {\n        formData.append(key, myFormData[key]);\n      }\n    }\n\n    formData.append(\'tab\', this.props.tabName);\n    formData.append(\'candID\', this.state.Data.candID);\n    $.ajax({\n      type: \'POST\',\n      url: self.props.action,\n      data: formData,\n      cache: false,\n      contentType: false,\n      processData: false,\n      success: function success(data) {\n        self.setState({\n          updateResult: "success"\n        });\n        self.showAlertMessage();\n      },\n      error: function error(err) {\n        if (err.responseText !== "") {\n          var errorMessage = JSON.parse(err.responseText).message;\n          self.setState({\n            updateResult: "error",\n            errorMessage: errorMessage\n          });\n          self.showAlertMessage();\n        }\n      }\n\n    });\n  },\n  /**\n  * Display a success/error alert message after form submission\n  */\n  showAlertMessage: function showAlertMessage() {\n    var self = this;\n    if (this.refs["alert-message"] === null) {\n      return;\n    }\n\n    var alertMsg = this.refs["alert-message"];\n    $(alertMsg).fadeTo(2000, 500).delay(3000).slideUp(500, function () {\n      self.setState({\n        updateResult: null\n      });\n    });\n  }\n\n});\n\nvar RConsentStatus = React.createFactory(ConsentStatus);'}});
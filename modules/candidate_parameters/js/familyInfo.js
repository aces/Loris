!function(e){function n(t){if(a[t])return a[t].exports;var r=a[t]={exports:{},id:t,loaded:!1};return e[t].call(r.exports,r,r.exports,n),r.loaded=!0,r.exports}var a={};return n.m=e,n.c=a,n.p="",n(0)}({0:function(e,n,a){a(1)(a(14))},1:function(e,n){e.exports=function(e){"undefined"!=typeof execScript?execScript(e):eval.call(null,e)}},14:function(e,n){e.exports="/* exported RFamilyInfo */\n\nvar FamilyInfo = React.createClass({\n  displayName: 'FamilyInfo',\n\n  getInitialState: function getInitialState() {\n    return {\n      Data: [],\n      formData: {},\n      familyMembers: [],\n      updateResult: null,\n      errorMessage: null,\n      isLoaded: false,\n      loadedData: 0\n    };\n  },\n  componentDidMount: function componentDidMount() {\n    var that = this;\n    $.ajax(this.props.dataURL, {\n      dataType: 'json',\n      xhr: function xhr() {\n        var xhr = new window.XMLHttpRequest();\n        xhr.addEventListener(\"progress\", function (evt) {\n          that.setState({\n            loadedData: evt.loaded\n          });\n        });\n        return xhr;\n      },\n      success: function success(data) {\n        that.setState({\n          Data: data,\n          isLoaded: true,\n          familyMembers: data.existingFamilyMembers\n        });\n      },\n      error: function error(data, errorCode, errorMsg) {\n        that.setState({\n          error: 'An error occurred when loading the form!'\n        });\n      }\n    });\n  },\n  setFormData: function setFormData(formElement, value) {\n    var formData = this.state.formData;\n    formData[formElement] = value;\n    this.setState({\n      formData: formData\n    });\n  },\n  onSubmit: function onSubmit(e) {\n    e.preventDefault();\n  },\n  render: function render() {\n    if (!this.state.isLoaded) {\n      if (this.state.error !== undefined) {\n        return React.createElement(\n          'div',\n          { className: 'alert alert-danger text-center' },\n          React.createElement(\n            'strong',\n            null,\n            this.state.error\n          )\n        );\n      }\n\n      return React.createElement(\n        'button',\n        { className: 'btn-info has-spinner' },\n        'Loading',\n        React.createElement('span', {\n          className: 'glyphicon glyphicon-refresh glyphicon-refresh-animate'\n        })\n      );\n    }\n\n    var relationshipOptions = {\n      \"full_sibling\": \"Full Sibling\",\n      \"half_sibling\": \"Half Sibling\",\n      \"1st_cousin\": \"First Cousin\"\n    };\n\n    var disabled = true;\n    var addButton = null;\n    if (loris.userHasPermission('candidate_parameter_edit')) {\n      disabled = false;\n      addButton = React.createElement(ButtonElement, { label: 'Add' });\n    }\n\n    var candidateList = this.state.Data.candidates;\n\n    var familyMembers = this.state.familyMembers;\n    var familyMembersHTML = [];\n\n    for (var key in familyMembers) {\n      if (familyMembers.hasOwnProperty(key)) {\n        var candID = familyMembers[key].FamilyCandID;\n        var relationship = familyMembers[key].Relationship_type;\n        var link = \"?candID=\" + candID + \"&identifier=\" + candID;\n\n        familyMembersHTML.push(React.createElement(\n          'div',\n          null,\n          React.createElement(StaticElement, {\n            label: 'Family Member DCCID',\n            text: React.createElement(\n              'a',\n              { href: link },\n              candID\n            )\n          }),\n          React.createElement(StaticElement, {\n            label: 'Relation Type',\n            text: relationshipOptions[relationship]\n          }),\n          React.createElement(ButtonElement, {\n            label: 'Delete',\n            type: 'button',\n            onUserInput: this.deleteFamilyMember.bind(null, candID, key, candidateList)\n          }),\n          React.createElement('hr', null)\n        ));\n        // remove from list of candidates because it can only be added once\n        delete candidateList[candID];\n      }\n    }\n\n    var relationshipRequired = false;\n    if (this.state.formData.FamilyCandID) {\n      relationshipRequired = true;\n    }\n\n    var alertMessage = \"\";\n    var alertClass = \"alert text-center hide\";\n    if (this.state.updateResult) {\n      if (this.state.updateResult === \"success\") {\n        alertClass = \"alert alert-success text-center\";\n        alertMessage = \"Update Successful!\";\n      } else if (this.state.updateResult === \"error\") {\n        var errorMessage = this.state.errorMessage;\n        alertClass = \"alert alert-danger text-center\";\n        alertMessage = errorMessage ? errorMessage : \"Failed to update!\";\n      }\n    }\n\n    return React.createElement(\n      'div',\n      { className: 'row' },\n      React.createElement(\n        'div',\n        { className: alertClass, role: 'alert', ref: 'alert-message' },\n        alertMessage\n      ),\n      React.createElement(\n        FormElement,\n        {\n          name: 'familyInfo',\n          onSubmit: this.handleSubmit,\n          ref: 'form',\n          'class': 'col-md-6'\n        },\n        React.createElement(StaticElement, {\n          label: 'PSCID',\n          text: this.state.Data.pscid\n        }),\n        React.createElement(StaticElement, {\n          label: 'DCCID',\n          text: this.state.Data.candID\n        }),\n        React.createElement('hr', null),\n        familyMembersHTML,\n        React.createElement(SelectElement, {\n          label: 'Family Member ID (DCCID)',\n          name: 'FamilyCandID',\n          options: candidateList,\n          onUserInput: this.setFormData,\n          ref: 'FamilyCandID',\n          disabled: disabled,\n          required: false,\n          value: this.state.formData.FamilyCandID\n        }),\n        React.createElement(SelectElement, {\n          label: 'Relation Type',\n          name: 'Relationship_type',\n          options: relationshipOptions,\n          onUserInput: this.setFormData,\n          ref: 'Relationship_type',\n          disabled: disabled,\n          required: relationshipRequired,\n          value: this.state.formData.Relationship_type\n        }),\n        addButton\n      )\n    );\n  },\n  /**\n   * Handles form submission\n   *\n   * @param {event} e - Form submission event\n   */\n  handleSubmit: function handleSubmit(e) {\n    e.preventDefault();\n    var myFormData = this.state.formData;\n    var self = this;\n    var formData = new FormData();\n    var formRefs = this.refs;\n\n    var familyMembers = this.state.familyMembers;\n    var familyMember = {};\n\n    for (var key in myFormData) {\n      if (myFormData.hasOwnProperty(key)) {\n        if (myFormData[key] !== \"\") {\n          familyMember[key] = myFormData[key];\n          formData.append(key, myFormData[key]);\n        }\n      }\n    }\n\n    formData.append('tab', this.props.tabName);\n    formData.append('candID', this.state.Data.candID);\n\n    familyMembers.push(familyMember);\n\n    this.setState({\n      familyMembers: familyMembers\n    });\n\n    $.ajax({\n      type: 'POST',\n      url: self.props.action,\n      data: formData,\n      cache: false,\n      contentType: false,\n      processData: false,\n      success: function success(data) {\n        self.setState({\n          updateResult: \"success\",\n          formData: {}\n        });\n        self.showAlertMessage();\n\n        // Iterates through child components and resets state\n        // to initial state in order to clear the form\n        Object.keys(formRefs).map(function (ref) {\n          if (formRefs[ref].state && formRefs[ref].state.value) {\n            formRefs[ref].state.value = \"\";\n          }\n        });\n        // rerender components\n        self.forceUpdate();\n      },\n      error: function error(err) {\n        var errorMessage = JSON.parse(err.responseText).message;\n        self.setState({\n          updateResult: \"error\",\n          errorMessage: errorMessage\n        });\n        self.showAlertMessage();\n      }\n\n    });\n  },\n  /**\n   * Display a success/error alert message after form submission\n   */\n  showAlertMessage: function showAlertMessage() {\n    var self = this;\n    if (this.refs[\"alert-message\"] === null) {\n      return;\n    }\n\n    var alertMsg = this.refs[\"alert-message\"];\n    $(alertMsg).fadeTo(2000, 500).delay(3000).slideUp(500, function () {\n      self.setState({\n        updateResult: null\n\n      });\n    });\n  },\n  deleteFamilyMember: function deleteFamilyMember(candID, key, candidateList) {\n    var familyMembers = this.state.familyMembers;\n    delete familyMembers[key];\n\n    // readd to list of possible family members\n    candidateList[candID] = candID;\n\n    this.setState({\n      familyMembers: familyMembers\n    });\n\n    var myFormData = this.state.formData;\n    var self = this;\n    var formData = new FormData();\n    for (var _key in myFormData) {\n      if (myFormData.hasOwnProperty(_key)) {\n        if (myFormData[_key] !== \"\") {\n          formData.append(_key, myFormData[_key]);\n        }\n      }\n    }\n\n    formData.append('tab', 'deleteFamilyMember');\n    formData.append('candID', this.state.Data.candID);\n    formData.append('familyDCCID', candID);\n\n    $.ajax({\n      type: 'POST',\n      url: self.props.action,\n      data: formData,\n      cache: false,\n      contentType: false,\n      processData: false,\n      success: function success(data) {\n        self.setState({\n          updateResult: \"success\"\n        });\n        self.showAlertMessage();\n      },\n      error: function error(err) {\n        if (err.responseText !== \"\") {\n          var errorMessage = JSON.parse(err.responseText).message;\n          self.setState({\n            updateResult: \"error\",\n            errorMessage: errorMessage\n          });\n          self.showAlertMessage();\n        }\n      }\n    });\n  }\n\n});\n\nvar RFamilyInfo = React.createFactory(FamilyInfo);"}});
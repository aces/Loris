!function(e){function t(a){if(n[a])return n[a].exports;var s=n[a]={exports:{},id:a,loaded:!1};return e[a].call(s.exports,s,s.exports,t),s.loaded=!0,s.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}({0:function(e,t,n){n(1)(n(15))},1:function(e,t){e.exports=function(e){"undefined"!=typeof execScript?execScript(e):eval.call(null,e)}},15:function(e,t){e.exports="/* exported RParticipantStatus */\n\nvar ParticipantStatus = React.createClass({\n  displayName: 'ParticipantStatus',\n\n  getInitialState: function getInitialState() {\n    return {\n      Data: [],\n      formData: {},\n      updateResult: null,\n      errorMessage: null,\n      isLoaded: false,\n      loadedData: 0\n    };\n  },\n  componentDidMount: function componentDidMount() {\n    var that = this;\n    $.ajax(this.props.dataURL, {\n      dataType: 'json',\n      xhr: function xhr() {\n        var xhr = new window.XMLHttpRequest();\n        xhr.addEventListener(\"progress\", function (evt) {\n          that.setState({\n            loadedData: evt.loaded\n          });\n        });\n        return xhr;\n      },\n      success: function success(data) {\n        that.setState({\n          Data: data,\n          isLoaded: true\n        });\n      },\n      error: function error(data, errorCode, errorMsg) {\n        that.setState({\n          error: 'An error occurred when loading the form!'\n        });\n      }\n    });\n  },\n  setFormData: function setFormData(formElement, value) {\n    var formData = this.state.formData;\n    formData[formElement] = value;\n    this.setState({\n      formData: formData\n    });\n  },\n  onSubmit: function onSubmit(e) {\n    e.preventDefault();\n  },\n  render: function render() {\n    if (!this.state.isLoaded) {\n      if (this.state.error !== undefined) {\n        return React.createElement(\n          'div',\n          { className: 'alert alert-danger text-center' },\n          React.createElement(\n            'strong',\n            null,\n            this.state.error\n          )\n        );\n      }\n\n      return React.createElement(\n        'button',\n        { className: 'btn-info has-spinner' },\n        'Loading',\n        React.createElement('span', {\n          className: 'glyphicon glyphicon-refresh glyphicon-refresh-animate'\n        })\n      );\n    }\n\n    var disabled = true;\n    var updateButton = null;\n    if (loris.userHasPermission('candidate_parameter_edit')) {\n      disabled = false;\n      updateButton = React.createElement(ButtonElement, { label: 'Update' });\n    }\n\n    var required = this.state.Data.required;\n    var subOptions = [];\n    var suboptionsRequired = false;\n    for (var key in required) {\n      if (required.hasOwnProperty(key)) {\n        var participantStatus = this.state.formData.participant_status;\n        if (participantStatus === null || participantStatus === undefined) {\n          participantStatus = this.state.Data.participant_status;\n        }\n        if (required[key].ID === participantStatus) {\n          subOptions = this.state.Data.parentIDs[participantStatus];\n          suboptionsRequired = true;\n          break;\n        }\n      }\n    }\n\n    var formattedHistory = [];\n    for (var statusKey in this.state.Data.history) {\n      if (this.state.Data.history.hasOwnProperty(statusKey)) {\n        var line = \"\";\n        for (var field in this.state.Data.history[statusKey]) {\n          if (this.state.Data.history[statusKey].hasOwnProperty(field)) {\n            var current = this.state.Data.history[statusKey][field];\n            if (current !== null) {\n              switch (field) {\n                case 'data_entry_date':\n                  line += \"[\";\n                  line += current;\n                  line += \"] \";\n                  break;\n                case 'entry_staff':\n                  line += current;\n                  line += \" \";\n                  break;\n                case 'status':\n                  line += \" Status: \";\n                  line += current;\n                  line += \" \";\n                  break;\n                case 'suboption':\n                  line += \"Details: \";\n                  line += current;\n                  line += \" \";\n                  break;\n                case 'reason_specify':\n                  line += \"Comments: \";\n                  line += current;\n                  line += \" \";\n                  break;\n                default:\n              }\n            }\n          }\n        }\n        formattedHistory.push(React.createElement(\n          'p',\n          null,\n          line\n        ));\n      }\n    }\n\n    var alertMessage = \"\";\n    var alertClass = \"alert text-center hide\";\n    if (this.state.updateResult) {\n      if (this.state.updateResult === \"success\") {\n        alertClass = \"alert alert-success text-center\";\n        alertMessage = \"Update Successful!\";\n      } else if (this.state.updateResult === \"error\") {\n        var errorMessage = this.state.errorMessage;\n        alertClass = \"alert alert-danger text-center\";\n        alertMessage = errorMessage ? errorMessage : \"Failed to update!\";\n      }\n    }\n\n    return React.createElement(\n      'div',\n      { 'class': 'row' },\n      React.createElement(\n        'div',\n        { className: alertClass, role: 'alert', ref: 'alert-message' },\n        alertMessage\n      ),\n      React.createElement(\n        FormElement,\n        {\n          name: 'participantStatus',\n          onSubmit: this.handleSubmit,\n          ref: 'form',\n          'class': 'col-md-6'\n        },\n        React.createElement(StaticElement, {\n          label: 'PSCID',\n          text: this.state.Data.pscid\n        }),\n        React.createElement(StaticElement, {\n          label: 'DCCID',\n          text: this.state.Data.candID\n        }),\n        React.createElement(SelectElement, {\n          label: 'Participant Status',\n          name: 'participant_status',\n          options: this.state.Data.statusOptions,\n          value: this.state.Data.participant_status,\n          onUserInput: this.setFormData,\n          ref: 'participant_status',\n          disabled: disabled,\n          required: true\n        }),\n        React.createElement(SelectElement, {\n          label: 'Specify Reason',\n          name: 'participant_suboptions',\n          options: subOptions,\n          value: this.state.Data.participant_suboptions,\n          onUserInput: this.setFormData,\n          ref: 'participant_suboptions',\n          disabled: !suboptionsRequired,\n          required: suboptionsRequired\n        }),\n        React.createElement(TextareaElement, {\n          label: 'Comments',\n          name: 'reason_specify',\n          value: this.state.Data.reason_specify,\n          onUserInput: this.setFormData,\n          ref: 'reason_specify',\n          disabled: disabled,\n          required: false\n        }),\n        updateButton,\n        formattedHistory\n      )\n    );\n  },\n  /**\n  * Handles form submission\n  *\n  * @param {event} e - Form submission event\n  */\n  handleSubmit: function handleSubmit(e) {\n    e.preventDefault();\n    var myFormData = this.state.formData;\n    var self = this;\n    var formData = new FormData();\n    for (var key in myFormData) {\n      if (myFormData[key] !== \"\") {\n        formData.append(key, myFormData[key]);\n      }\n    }\n\n    formData.append('tab', this.props.tabName);\n    formData.append('candID', this.state.Data.candID);\n    $.ajax({\n      type: 'POST',\n      url: self.props.action,\n      data: formData,\n      cache: false,\n      contentType: false,\n      processData: false,\n      success: function success(data) {\n        self.setState({\n          updateResult: \"success\"\n        });\n        self.showAlertMessage();\n      },\n      error: function error(err) {\n        if (err.responseText !== \"\") {\n          var errorMessage = JSON.parse(err.responseText).message;\n          self.setState({\n            updateResult: \"error\",\n            errorMessage: errorMessage\n          });\n          self.showAlertMessage();\n        }\n      }\n    });\n  },\n  /**\n  * Display a success/error alert message after form submission\n  */\n  showAlertMessage: function showAlertMessage() {\n    var self = this;\n    if (this.refs[\"alert-message\"] === null) {\n      return;\n    }\n\n    var alertMsg = this.refs[\"alert-message\"];\n    $(alertMsg).fadeTo(2000, 500).delay(3000).slideUp(500, function () {\n      self.setState({\n        updateResult: null\n      });\n    });\n  }\n\n});\n\nvar RParticipantStatus = React.createFactory(ParticipantStatus);"}});
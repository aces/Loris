!function(e){function n(a){if(t[a])return t[a].exports;var r=t[a]={exports:{},id:a,loaded:!1};return e[a].call(r.exports,r,r.exports,n),r.loaded=!0,r.exports}var t={};return n.m=e,n.c=t,n.p="",n(0)}({0:function(e,n,t){t(1)(t(27))},1:function(e,n){e.exports=function(e){"undefined"!=typeof execScript?execScript(e):eval.call(null,e)}},27:function(e,n){e.exports='var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/* exported DicomArchive */\n/* global formatColumn, ReactDOM */\n\n/**\n * DICOM Archive Page.\n *\n * Serves as an entry-point to the module, rendering the whole react\n * component page on load.\n *\n * Renders DICOM Archive main page consisting of FilterTable and\n * DataTable components.\n *\n * @author Alex Ilea\n * @version 1.0.0\n *\n * */\nvar DicomArchive = function (_React$Component) {\n  _inherits(DicomArchive, _React$Component);\n\n  function DicomArchive(props) {\n    _classCallCheck(this, DicomArchive);\n\n    var _this = _possibleConstructorReturn(this, (DicomArchive.__proto__ || Object.getPrototypeOf(DicomArchive)).call(this, props));\n\n    _this.state = {\n      isLoaded: false,\n      Filter: QueryString.get()\n    };\n\n    // Bind component instance to custom methods\n    _this.fetchData = _this.fetchData.bind(_this);\n    _this.setFilter = _this.setFilter.bind(_this);\n    _this.clearFilter = _this.clearFilter.bind(_this);\n    return _this;\n  }\n\n  _createClass(DicomArchive, [{\n    key: "componentDidMount",\n    value: function componentDidMount() {\n      this.fetchData();\n    }\n\n    /**\n     * Retrive data from the provided URL and save it in state\n     * Additionaly add hiddenHeaders to global loris vairable\n     * for easy access by columnFormatter.\n     */\n\n  }, {\n    key: "fetchData",\n    value: function fetchData() {\n      $.ajax(this.props.DataURL, {\n        method: "GET",\n        dataType: \'json\',\n        success: function (data) {\n          loris.hiddenHeaders = data.hiddenHeaders ? data.hiddenHeaders : [];\n          this.setState({\n            Data: data,\n            isLoaded: true\n          });\n        }.bind(this),\n        error: function error(_error) {\n          console.error(_error);\n        }\n      });\n    }\n\n    /**\n     * Clear the Filter object, querystring and input fields\n     */\n\n  }, {\n    key: "clearFilter",\n    value: function clearFilter() {\n      var Filter = QueryString.clear(this.props.Module);\n      this.setState({ Filter: Filter });\n    }\n\n    /**\n     * Sets Filter object and querystring to reflect values of input fields\n     *\n     * @param {string} fieldName - the name of the form element\n     * @param {string} fieldValue - the value of the form element\n     */\n\n  }, {\n    key: "setFilter",\n    value: function setFilter(fieldName, fieldValue) {\n      // Special treatment for site, to explicitly set it as an integer value\n      if (fieldName === "site") {\n        var number = Number.parseInt(fieldValue, 10);\n        if (Number.isInteger(number)) {\n          fieldValue = number;\n        }\n      }\n\n      var Filter = QueryString.set(this.state.Filter, fieldName, fieldValue);\n      this.setState({ Filter: Filter });\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      // Waiting for async data to load\n      if (!this.state.isLoaded) {\n        return React.createElement(\n          "button",\n          { className: "btn-info has-spinner" },\n          "Loading",\n          React.createElement("span", {\n            className: "glyphicon glyphicon-refresh glyphicon-refresh-animate" })\n        );\n      }\n\n      // Defining element names here ensures that `name` and `ref`\n      // properties of the element are always kept in sync\n      var patientID = "patientID";\n      var patientName = "patientName";\n      var site = "site";\n      var gender = "gender";\n      var dateOfBirth = "dateOfBirth";\n      var acquisition = "acquisition";\n      var archiveLocation = "archiveLocation";\n      var seriesUID = "seriesuid";\n\n      var genderList = {\n        M: \'Male\',\n        F: \'Female\',\n        O: \'N/A\'\n      };\n\n      return React.createElement(\n        "div",\n        null,\n        React.createElement(\n          FilterTable,\n          { Module: "dicom_archive" },\n          React.createElement(\n            "div",\n            { className: "row" },\n            React.createElement(\n              "div",\n              { className: "col-md-6" },\n              React.createElement(TextboxElement, {\n                name: patientID,\n                label: "Patient ID",\n                onUserInput: this.setFilter,\n                value: this.state.Filter.patientID,\n                ref: patientID\n              })\n            ),\n            React.createElement(\n              "div",\n              { className: "col-md-6" },\n              React.createElement(TextboxElement, {\n                name: patientName,\n                label: "Patient Name",\n                onUserInput: this.setFilter,\n                value: this.state.Filter.patientName,\n                ref: patientName\n              })\n            )\n          ),\n          React.createElement(\n            "div",\n            { className: "row" },\n            React.createElement(\n              "div",\n              { className: "col-md-6" },\n              React.createElement(SelectElement, {\n                name: site,\n                label: "Sites",\n                options: this.state.Data.Sites,\n                onUserInput: this.setFilter,\n                value: this.state.Filter.site,\n                ref: site\n              })\n            ),\n            React.createElement(\n              "div",\n              { className: "col-md-6" },\n              React.createElement(SelectElement, {\n                name: gender,\n                label: "Gender",\n                options: genderList,\n                onUserInput: this.setFilter,\n                value: this.state.Filter.gender,\n                ref: gender\n              })\n            )\n          ),\n          React.createElement(\n            "div",\n            { className: "row" },\n            React.createElement(\n              "div",\n              { className: "col-md-6" },\n              React.createElement(DateElement, {\n                name: dateOfBirth,\n                label: "Date of Birth",\n                onUserInput: this.setFilter,\n                value: this.state.Filter.dateOfBirth,\n                ref: dateOfBirth\n              })\n            ),\n            React.createElement(\n              "div",\n              { className: "col-md-6" },\n              React.createElement(DateElement, {\n                name: acquisition,\n                label: "Acquisition Date",\n                onUserInput: this.setFilter,\n                value: this.state.Filter.acquisition,\n                ref: acquisition\n              })\n            )\n          ),\n          React.createElement(\n            "div",\n            { className: "row" },\n            React.createElement(\n              "div",\n              { className: "col-md-6" },\n              React.createElement(TextboxElement, {\n                name: archiveLocation,\n                label: "Archive Location",\n                onUserInput: this.setFilter,\n                value: this.state.Filter.archiveLocation,\n                ref: archiveLocation\n              })\n            ),\n            React.createElement(\n              "div",\n              { className: "col-md-6" },\n              React.createElement(TextboxElement, {\n                name: seriesUID,\n                label: "Series UID",\n                onUserInput: this.setFilter,\n                value: this.state.Filter.seriesuid,\n                ref: seriesUID\n              })\n            )\n          ),\n          React.createElement(\n            "div",\n            { className: "row" },\n            React.createElement(\n              "div",\n              { className: "col-md-6" },\n              React.createElement(ButtonElement, {\n                label: "Clear Filters",\n                onUserInput: this.clearFilter\n              })\n            )\n          )\n        ),\n        React.createElement(StaticDataTable, {\n          Data: this.state.Data.Data,\n          Headers: this.state.Data.Headers,\n          Filter: this.state.Filter,\n          getFormattedCell: formatColumn\n        })\n      );\n    }\n  }]);\n\n  return DicomArchive;\n}(React.Component);\n\nDicomArchive.propTypes = {\n  Module: React.PropTypes.string.isRequired,\n  DataURL: React.PropTypes.string.isRequired\n};\n\n/**\n * Render dicom_page on page load\n */\nwindow.onload = function () {\n  var dataURL = loris.BaseURL + "/dicom_archive/?format=json";\n  var dicomArchive = React.createElement(DicomArchive, {\n    Module: "dicom_archive",\n    DataURL: dataURL\n  });\n\n  // Create a wrapper div in which react component will be loaded\n  var dicomArchiveDOM = document.createElement(\'div\');\n  dicomArchiveDOM.id = \'page-dicom-archive\';\n\n  // Append wrapper div to page content\n  var rootDOM = document.getElementById("lorisworkspace");\n  rootDOM.appendChild(dicomArchiveDOM);\n\n  ReactDOM.render(dicomArchive, document.getElementById("page-dicom-archive"));\n};'}});
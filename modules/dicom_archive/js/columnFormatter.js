!function(n){function e(a){if(r[a])return r[a].exports;var t=r[a]={exports:{},id:a,loaded:!1};return n[a].call(t.exports,t,t.exports,e),t.loaded=!0,t.exports}var r={};return e.m=n,e.c=r,e.p="",e(0)}({0:function(n,e,r){r(1)(r(26))},1:function(n,e){n.exports=function(n){"undefined"!=typeof execScript?execScript(n):eval.call(null,n)}},26:function(n,e){n.exports="/* exported formatColumn */\n\n/**\n * Modify behaviour of specified column cells in the Data Table component\n * @param {string} column - column name\n * @param {string} cell - cell content\n * @param {arrray} rowData - array of cell contents for a specific row\n * @param {arrray} rowHeaders - array of table headers (column names)\n * @return {*} a formated table cell for a given column\n */\nfunction formatColumn(column, cell, rowData, rowHeaders) {\n  // If a column if set as hidden, don't display it\n  if (loris.hiddenHeaders.indexOf(column) > -1) {\n    return null;\n  }\n\n  // Create the mapping between rowHeaders and rowData in a row object.\n  var row = {};\n  rowHeaders.forEach(function (header, index) {\n    row[header] = rowData[index];\n  }, this);\n\n  if (column === 'Metadata') {\n    var metadataURL = loris.BaseURL + \"/dicom_archive/viewDetails/?tarchiveID=\" + row.TarchiveID;\n    return React.createElement(\n      'td',\n      null,\n      React.createElement(\n        'a',\n        { href: metadataURL },\n        cell\n      )\n    );\n  }\n\n  if (column === 'MRI Browser') {\n    if (row.SessionID === null || row.SessionID === '') {\n      return React.createElement(\n        'td',\n        null,\n        '\\xA0'\n      );\n    }\n    var mrlURL = loris.BaseURL + \"/imaging_browser/viewSession/?sessionID=\" + row.SessionID;\n    return React.createElement(\n      'td',\n      null,\n      React.createElement(\n        'a',\n        { href: mrlURL },\n        cell\n      )\n    );\n  }\n\n  if (cell === \"INVALID - HIDDEN\") {\n    return React.createElement(\n      'td',\n      { className: 'text-danger' },\n      cell\n    );\n  }\n\n  return React.createElement(\n    'td',\n    null,\n    cell\n  );\n}"}});
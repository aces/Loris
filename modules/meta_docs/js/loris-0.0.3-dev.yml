openapi: 3.0.1
info:
  title: LORIS - Imaging endpoints
  description: API for inserting dicoms and handling images within the LORIS Platform
  contact:
    name: LORIS Development Team
    url: https://github.com/aces/loris
  license:
    name: GNU Public License, Version 3
    url: https://opensource.org/licenses/GPL-3.0
  version: 0.0.3-dev
servers:
- url: https://xavier-dev.loris.ca/api/v0.0.3-dev
paths:
  /candidates/{candid}/{visit}/dicoms:
    get:
      tags:
      - Dicoms
      summary: List all dicoms for that timepoint
      parameters:
      - name: candid
        in: path
        description: ID of the candidate
        required: true
        schema:
          type: string
      - name: visit
        in: path
        description: This timepoint visit label
        required: true
        schema:
          type: string
      responses:
        200:
          description: An object containing the list of dicoms
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dicoms'
    post:
      tags:
      - Dicoms
      summary: Upload a dicom to this timepoint
      parameters:
      - name: candid
        in: path
        description: ID of the candidate
        required: true
        schema:
          type: string
      - name: visit
        in: path
        description: This timepoint visit label
        required: true
        schema:
          type: string
      - name: LORIS-Overwrite
        in: header
        description: If set to 'overwrite', will replace server file with the same name
        schema:
          type: string
          enum: [overwrite]
      requestBody:
        content:
          multipart/mixed:
            schema:
              type: object
              required:
                - CandID
                - PSCID
                - Visit
                - IsPhantom
                - mriFile
              properties:
                CandID:
                  type: string
                PSCID:
                  type: string
                Visit:
                  type: string
                IsPhantom:
                  type: string
                  enum: [true, false]
                mriFile:
                  type: string
                  format: binary
            encoding:
              mriFile:
                contentType: application/gzip, application/tar, application/tar+gzip, application/x-tar
                headers:
                  LORIS-Overwrite:
                    schema:
                      type: string
                      enum: [overwrite, ]
      responses:
        500: # If upload or database insertion fails
          $ref: '#/components/responses/InternalServerError'
        403:
          description: 'The _imaging_uploader_ permission is required'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        303: 
          description: On success, redirect to this dicom upload server processes (mri_upload)
          headers:
            Location:
              schema:
                type: string
              description: The URL of the processes.
        
      x-codegen-request-body-name: DicomUploadForm

  /candidates/{candid}/{visit}/dicoms/{tarname}:
    get:
      tags:
      - Dicoms
      summary: Get the dicom file
      parameters:
      - name: candid
        in: path
        description: ID of the candidate
        required: true
        schema:
          type: string
      - name: visit
        in: path
        description: This timepoint visit label
        required: true
        schema:
          type: string
      - name: tarname
        in: path
        description: The dicom filename
        required: true
        schema:
          type: string
      responses:
        200:
          description: The dicom file content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary

  /candidates/{candid}/{visit}/dicoms/{tarname}/processes:
    get:
      tags:
      - Dicoms
      summary: List server processes executed on that dicom
      parameters:
      - name: candid
        in: path
        description: ID of the candidate
        required: true
        schema:
          type: string
      - name: visit
        in: path
        description: This timepoint visit label
        required: true
        schema:
          type: string
      - name: tarname
        in: path
        description: The dicom filename
        required: true
        schema:
          type: string
      responses:
        200:
          description: The processes list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DicomProcesses'
          
    post:
      tags:
        - Dicoms
      summary: Start a server process on that dicom
      parameters:
      - name: candid
        in: path
        description: ID of the candidate
        required: true
        schema:
          type: string
      - name: visit
        in: path
        description: This timepoint visit label
        required: true
        schema:
          type: string
      - name: tarname
        in: path
        description: The dicom filename
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - ProcessType
                - MRIUploadID
              properties:
                ProcessType:
                  type: string
                  enum: [mri_upload]
                MRIUploadID:
                  type: number
      responses:
        202: 
          description: On success, put the generated server processes location in the headers
          headers:
            Location:
              schema:
                type: string
              description: The URL of the processes.
      
  /candidates/{candid}/{visit}/dicoms/{tarname}/processes/{processid}:
    get:
      tags:
        - Dicoms
      summary: Get the state of a server process
      parameters:
      - name: candid
        in: path
        description: ID of the candidate
        required: true
        schema:
          type: string
      - name: visit
        in: path
        description: This timepoint visit label
        required: true
        schema:
          type: string
      - name: tarname
        in: path
        description: The dicom filename
        required: true
        schema:
          type: string
      - name: processid
        in: path
        description: The process id
        required: true
        schema:
          type: number
      responses:
        200:
          description: The process state
          content:
            application/json:
              schema:
                type: object
                properties:
                  process_state:
                    type: array
                    items:
                      $ref: '#/components/schemas/Process'

components:
  schemas:

    Dicoms:
      type: object
      properties:
        Meta:
          type: object
          properties:
            CandID:
              type: string
            Visit:
              type: string
        DicomTars:
          type: array
          items:
            $ref: '#/components/schemas/DicomTar'

    DicomTar:
      type: object
      properties:
        Tarname:
          type: string
        SeriesInfo:
          type: array
          items:
            $ref: '#/components/schemas/SeriesInfo'

    SeriesInfo:
      type: object
      properties:
        SeriesDescription:
          type: string
        SeriesNumber:
          type: string
        EchoTime:
          type: string
        RepetitionTime:
          type: string
        InversionTime:
          type: string
        SliceThickness:
          type: string
        Modality:
          type: string
          enum:
          - MR
          - PT
        SeriesUID:
          type: string

    DicomProcesses:
      type: object
      properties:
        mri_uploads:
          type: array
          items:
            $ref: '#/components/schemas/MRIUploadProcesses'
            
    MRIUploadProcesses:
      type: object
      properties:
        mri_upload_id:
          type: number
        processes:
          type: array
          items:
            $ref: '#/components/schemas/Process'

    Process:
      type: object
      properties:
        ID:
          type: string
        PID:
          type: string
        STATE:
          type: string
        PROGRESS:
          type: string
          enum: [SUCCESS,RUNNING,ERROR]
        EXIT_CODE:
          type: string
        END_TIME:
          type: string

    # Schema for error response body
    Error:
      type: object
      properties:
        error:
          description: The error message
          type: string
      required:
        - error
        
  responses:
  
    InternalServerError:
      description: 500 Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: Authorization
      in: header

security:
  - ApiKeyAuth: []

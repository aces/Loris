!function(e){function n(t){if(a[t])return a[t].exports;var r=a[t]={exports:{},id:t,loaded:!1};return e[t].call(r.exports,r,r.exports,n),r.loaded=!0,r.exports}var a={};return n.m=e,n.c=a,n.p="",n(0)}({0:function(e,n,a){a(1)(a(18))},1:function(e,n){e.exports=function(e){"undefined"!=typeof execScript?execScript(e):eval.call(null,e)}},18:function(e,n){e.exports='/* global c3 */\n/* exported GraphicsPanel, BehaviouralFeedbackTab, IncompleteCandidatesPanel,\n InstrumentConflictsPanel\n */\n\nvar PagedRowHeader = React.createClass({\n  displayName: "PagedRowHeader",\n\n  propType: {\n    headerRow: React.PropTypes.array.isRequired\n  },\n  render: function render() {\n    return React.createElement(\n      "thead",\n      null,\n      React.createElement(\n        "tr",\n        { className: "info" },\n        this.props.headerRow.map(function (headerColumn, key) {\n          return React.createElement(\n            "th",\n            { key: key },\n            headerColumn\n          );\n        })\n      )\n    );\n  }\n});\n\nvar PagedTable = React.createClass({\n  displayName: "PagedTable",\n\n  propTypes: {\n    tableHeaders: React.PropTypes.array,\n    tableRows: React.PropTypes.array\n  },\n  getInitialState: function getInitialState() {\n    return {\n      pageSize: 10,\n      currentPage: 1\n    };\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n    this.setState({\n      currentPage: 1\n    });\n  },\n  getPage: function getPage() {\n    var start = this.state.pageSize * (this.state.currentPage - 1);\n    var end = start + this.state.pageSize;\n\n    return {\n      currentPage: this.state.currentPage,\n      tableRows: this.props.tableRows.slice(start, end),\n      numPages: this.getNumPages(),\n      handleClick: function (pageNum) {\n        return function () {\n          this.handlePageChange(pageNum);\n        }.bind(this);\n      }.bind(this)\n    };\n  },\n  getNumPages: function getNumPages() {\n    var numPages = Math.floor(this.props.tableRows.length / this.state.pageSize);\n    if (this.props.tableRows.length % this.state.pageSize > 0) {\n      numPages++;\n    }\n    return numPages;\n  },\n  handlePageChange: function handlePageChange(pageNum) {\n    this.setState({ currentPage: pageNum });\n  },\n  render: function render() {\n    var tableContents = "There is no data to display";\n    var page = this.getPage();\n    var rowsToMap = page.tableRows;\n    var childrenToMap = this.props.children;\n\n    var currentPageRows = rowsToMap.map(function (row) {\n      var mapped = React.Children.map(childrenToMap, function (child) {\n        return React.cloneElement(child, {\n          row: row\n        });\n      });\n      return mapped;\n    });\n\n    if (currentPageRows.length) {\n      tableContents = React.createElement(\n        "table",\n        { className: "table table-hover table-bordered colm-freeze" },\n        React.createElement(PagedRowHeader, { headerRow: this.props.tableHeaders }),\n        React.createElement(\n          "tbody",\n          null,\n          currentPageRows\n        )\n      );\n    }\n\n    return React.createElement(\n      "div",\n      null,\n      tableContents,\n      React.createElement(\n        "nav",\n        null,\n        React.createElement(BVLPager, { page: page })\n      )\n    );\n  }\n});\n\nvar IncompleteCandidatesRow = React.createClass({\n  displayName: "IncompleteCandidatesRow",\n\n  handleClick: function handleClick(event) {\n    event.preventDefault();\n    var link = this.refs.incomplete;\n    window.open(link, "Incomplete Candidate");\n  },\n  propTypes: {\n    row: React.PropTypes.object.isRequired,\n    BaseURL: React.PropTypes.string.isRequired\n\n  },\n  render: function render() {\n    var row = this.props.row;\n    return React.createElement(\n      "tr",\n      { key: row.id, onClick: this.handleClick },\n      React.createElement(\n        "td",\n        null,\n        React.createElement(\n          "a",\n          { href: this.props.BaseURL + "/" + row.candid + "/" + row.SessionID + "/"\n          },\n          row.visit_label\n        )\n      ),\n      React.createElement(\n        "td",\n        null,\n        React.createElement(\n          "a",\n          { href: this.props.BaseURL + "/" + row.candid + "/" },\n          row.candid\n        )\n      ),\n      React.createElement(\n        "td",\n        null,\n        React.createElement(\n          "a",\n          { href: this.props.BaseURL + "/" + row.candid + "/" + row.SessionID + "/" + row.test_name + "/?commentID=" + row.commentid, ref: "incomplete"\n          },\n          row.Full_name\n        )\n      )\n    );\n  }\n});\n\nvar InstrumentConflictsRow = React.createClass({\n  displayName: "InstrumentConflictsRow",\n\n  proptypes: {\n    row: React.PropTypes.object.isRequired,\n    BaseURL: React.PropTypes.string.isRequired\n  },\n  render: function render() {\n    var row = this.props.row;\n    var baseURL = this.props.BaseURL;\n    return React.createElement(\n      "tr",\n      {\n        key: row.CandID + row.visit_label + row.test_name_display + row.FieldName,\n        onClick: this.handleClick\n      },\n      React.createElement(\n        "td",\n        null,\n        row.visit_label\n      ),\n      React.createElement(\n        "td",\n        null,\n        React.createElement(\n          "a",\n          { href: baseURL + "/" + row.CandID + "/" },\n          row.CandID\n        )\n      ),\n      React.createElement(\n        "td",\n        null,\n        React.createElement(\n          "a",\n          {\n            href: baseURL + "/conflict_resolver/?CandID=" + row.CandID,\n            className: "conflict_resolver_link", "data-pscid": row.PSCID,\n            "data-question": row.FieldName, "data-instrument": row.TableName,\n            "data-visits": row.visit_label\n          },\n          row.test_name_display\n        )\n      ),\n      React.createElement(\n        "td",\n        null,\n        row.FieldName\n      )\n    );\n  }\n});\n\nvar BehaviouralFeedbackRow = React.createClass({\n  displayName: "BehaviouralFeedbackRow",\n\n  handleClick: function handleClick(event) {\n    event.preventDefault();\n    var link = this.refs.feedback.href;\n    window.open(link, "Behavioural Feedback");\n  },\n  propTypes: {\n    row: React.PropTypes.object.isRequired,\n    BaseURL: React.PropTypes.string.isRequired\n  },\n  render: function render() {\n    var row = this.props.row;\n    var bvlLink;\n    var bvlLevel;\n\n    if (row.Feedback_level === \'visit\') {\n      bvlLink = this.props.BaseURL + "/" + row.CandID + "/" + row.SessionID + "/";\n      bvlLevel = "Visit : " + row.Visit_label;\n    }\n\n    if (row.Feedback_level === \'instrument\') {\n      bvlLink = this.props.BaseURL + "/" + row.CandID + "/" + row.SessionID + "/" + row.Test_name + "/?commentID=" + row.CommentID;\n      bvlLevel = "Instrument : " + row.Full_name;\n    }\n\n    if (row.Feedback_level === \'profile\') {\n      bvlLink = this.props.BaseURl + "/" + row.CandID + "/";\n      bvlLevel = "Profile";\n    }\n\n    return React.createElement(\n      "tr",\n      { key: row.FeedbackID, onClick: this.handleClick },\n      React.createElement(\n        "td",\n        null,\n        React.createElement(\n          "a",\n          { href: this.props.BaseURL + "/" + row.CandID + "/" },\n          row.CandID\n        )\n      ),\n      React.createElement(\n        "td",\n        null,\n        React.createElement(\n          "a",\n          { href: bvlLink, onClick: this.handleClick, ref: "feedback" },\n          bvlLevel\n        )\n      ),\n      React.createElement(\n        "td",\n        null,\n        row.FieldName\n      )\n    );\n  }\n});\n\nvar DefaultPanel = React.createClass({\n  displayName: \'CandidatesPanelTable\',\n  propTypes: {\n    title: React.PropTypes.string\n  },\n  render: function render() {\n    return React.createElement(\n      "div",\n      { className: "panel panel-primary" },\n      React.createElement(\n        "div",\n        { className: "panel-heading" },\n        this.props.title\n      ),\n      React.createElement(\n        "div",\n        { className: "panel-body" },\n        this.props.children\n      )\n    );\n  }\n});\n\nvar IncompleteCandidates = React.createClass({\n  displayName: "IncompleteCandidates",\n\n  render: function render() {\n    // The actual row is passed as a child inside PagedTable\n    var row = {};\n    return React.createElement(\n      DefaultPanel,\n      { title: this.props.title },\n      React.createElement(\n        PagedTable,\n        {\n          tableRows: this.props.incomplete_candidates,\n          tableHeaders: this.props.header\n        },\n        React.createElement(IncompleteCandidatesRow, { row: row, BaseURL: this.props.BaseURL })\n      )\n    );\n  }\n});\n\nvar InstrumentConflicts = React.createClass({\n  displayName: "InstrumentConflicts",\n\n  render: function render() {\n    // The actual row is passed as a child inside PagedTable\n    var row = {};\n    return React.createElement(\n      DefaultPanel,\n      { title: this.props.title },\n      React.createElement(\n        PagedTable,\n        {\n          tableRows: this.props.conflicts,\n          tableHeaders: this.props.header\n        },\n        React.createElement(InstrumentConflictsRow, { row: row, BaseURL: this.props.BaseURL })\n      )\n    );\n  }\n});\n\nvar BehaviouralFeedback = React.createClass({\n  displayName: "BehaviouralFeedback",\n\n  render: function render() {\n    // The actual row is passed as a child inside PagedTable\n    var row = {};\n    return React.createElement(\n      DefaultPanel,\n      { title: this.props.title },\n      React.createElement(\n        PagedTable,\n        {\n          tableRows: this.props.feedback,\n          tableHeaders: this.props.header\n        },\n        React.createElement(BehaviouralFeedbackRow, { row: row, BaseURL: this.props.BaseURL })\n      )\n    );\n  }\n});\n\nvar BVLPager = React.createClass({\n  displayName: "BVLPager",\n\n  render: function render() {\n    var page = this.props.page;\n    var pageLinks = [];\n\n    if (page.currentPage > 1) {\n      pageLinks.push(React.createElement(\n        "li",\n        { key: 1, onClick: page.handleClick(page.currentPage - 1) },\n        React.createElement(\n          "span",\n          null,\n          "\\u2039"\n        )\n      ));\n      if (page.currentPage > 2) {\n        pageLinks.push(React.createElement(\n          "li",\n          { key: 2, onClick: page.handleClick(1) },\n          React.createElement(\n            "span",\n            null,\n            "1"\n          )\n        ));\n        pageLinks.push(React.createElement(\n          "li",\n          { key: 3 },\n          React.createElement(\n            "span",\n            null,\n            "..."\n          )\n        ));\n      }\n    }\n\n    if (page.numPages > 1) {\n      pageLinks.push(React.createElement(\n        "li",\n        { key: 4, className: "active" },\n        React.createElement(\n          "span",\n          null,\n          page.currentPage\n        )\n      ));\n    }\n\n    if (page.currentPage < page.numPages) {\n      pageLinks.push(React.createElement(\n        "li",\n        { key: 5, onClick: page.handleClick(page.currentPage + 1) },\n        React.createElement(\n          "span",\n          null,\n          page.currentPage + 1\n        )\n      ));\n\n      if (page.currentPage < page.numPages - 1) {\n        pageLinks.push(React.createElement(\n          "li",\n          { key: 6, onClick: page.handleClick(page.currentPage + 2) },\n          React.createElement(\n            "span",\n            null,\n            page.currentPage + 2\n          )\n        ));\n      }\n\n      if (page.currentPage < page.numPages - 2) {\n        pageLinks.push(React.createElement(\n          "li",\n          { key: 7, onClick: page.handleClick(page.currentPage + 3) },\n          React.createElement(\n            "span",\n            null,\n            page.currentPage + 3\n          )\n        ));\n      }\n\n      if (page.currentPage < page.numPages - 3) {\n        pageLinks.push(React.createElement(\n          "li",\n          { key: 8 },\n          React.createElement(\n            "span",\n            null,\n            "..."\n          )\n        ));\n        pageLinks.push(React.createElement(\n          "li",\n          { key: 9, onClick: page.handleClick(page.numPages) },\n          React.createElement(\n            "span",\n            null,\n            page.numPages\n          )\n        ));\n      }\n\n      pageLinks.push(React.createElement(\n        "li",\n        { key: 10, onClick: page.handleClick(page.currentPage + 1) },\n        React.createElement(\n          "span",\n          { "aria-hidden": "true" },\n          "\\u203A"\n        )\n      ));\n    }\n    return React.createElement(\n      "ul",\n      { className: "pagination pagination-sm" },\n      pageLinks\n    );\n  }\n});\n\nvar dataTeamGraphics = React.createClass({\n  displayName: "dataTeamGraphics",\n\n  componentDidMount: function componentDidMount() {\n    c3.generate({\n      bindto: \'#completedChart\',\n      data: {\n        columns: [[\'data\', this.props.percentCompleted]],\n        type: \'gauge\'\n      },\n      color: {\n        // the three color levels for the percentage values.\n        pattern: [\'#FF0000\', \'#F97600\', \'#F6C600\', \'#60B044\'],\n        threshold: {\n          // unit: \'value\', // percentage is default\n          // max: 200, // 100 is default\n          values: [30, 60, 90, 100]\n        }\n      }\n    });\n  },\n  render: function render() {\n    var pscidStatus = this.props.pscid ? "Candidate " + this.props.pscid : "All Candidates";\n    var visitStatus = this.props.visit ? "On " + this.props.visit : "Across All Visits";\n    var instrumentStatus = this.props.instrument ? "On Instrument " + this.props.instrument : "Across All Instruments";\n\n    return React.createElement(\n      "div",\n      { className: "col-sm-12 col-md-5" },\n      React.createElement(\n        "div",\n        { className: "panel panel-primary" },\n        React.createElement(\n          "div",\n          { className: "panel-heading" },\n          "At A Glance: ",\n          pscidStatus,\n          " - ",\n          visitStatus,\n          " - ",\n          instrumentStatus\n        ),\n        React.createElement(\n          "div",\n          { className: "panel-body" },\n          React.createElement("div", { id: "completedChart" })\n        )\n      )\n    );\n  }\n});\n\nvar GraphicsPanel = React.createFactory(dataTeamGraphics);\nvar BehaviouralFeedbackTab = React.createFactory(BehaviouralFeedback);\nvar IncompleteCandidatesPanel = React.createFactory(IncompleteCandidates);\nvar InstrumentConflictsPanel = React.createFactory(InstrumentConflicts);'}});
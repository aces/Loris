!function(n){function e(r){if(a[r])return a[r].exports;var t=a[r]={exports:{},id:r,loaded:!1};return n[r].call(t.exports,t,t.exports,e),t.loaded=!0,t.exports}var a={};return e.m=n,e.c=a,e.p="",e(0)}({0:function(n,e,a){a(1)(a(40))},1:function(n,e){n.exports=function(n){"undefined"!=typeof execScript?execScript(n):eval.call(null,n)}},40:function(n,e){n.exports='/* exported formatColumn */\n\n/**\n * Modify behaviour of specified column cells in the Data Table component\n * @param {string} column - column name\n * @param {string} cell - cell content\n * @param {array} rowData - array of cell contents for a specific row\n * @param {array} rowHeaders - array of table headers (column names)\n * @return {*} a formated table cell for a given column\n */\nfunction formatColumn(column, cell, rowData, rowHeaders) {\n  // If a column if set as hidden, don\'t display it\n  if (loris.hiddenHeaders !== undefined && loris.hiddenHeaders.indexOf(column) > -1) {\n    return null;\n  }\n\n  // Create the mapping between rowHeaders and rowData in a row object.\n  var row = {};\n  rowHeaders.forEach(function (header, index) {\n    row[header] = rowData[index];\n  }, this);\n\n  if (column === "PSCID") {\n    if (row["Current Stage"] === "Recycling Bin") {\n      return React.createElement(\n        "td",\n        null,\n        cell,\n        React.createElement(\n          "span",\n          { className: "text-danger" },\n          "(Recycling Bin)"\n        )\n      );\n    }\n\n    if (row.Invalid === "yes") {\n      return React.createElement(\n        "td",\n        null,\n        cell,\n        " ",\n        React.createElement(\n          "span",\n          { className: "text-danger" },\n          "(Invalid)"\n        )\n      );\n    }\n\n    if (row["Manual Swap"] === "yes") {\n      return React.createElement(\n        "td",\n        null,\n        cell,\n        " ",\n        React.createElement(\n          "span",\n          { className: "text-danger" },\n          "(Manual)"\n        )\n      );\n    }\n\n    var testName = \'/\' + row.Instrument + \'_reliability\';\n    var commentID = row.CommentID;\n    var siteID = row.SiteID;\n    var url = loris.BaseURL + testName + \'?identifier=\' + commentID + \'&reliability_center_id=\' + siteID;\n\n    return React.createElement(\n      "td",\n      null,\n      React.createElement(\n        "a",\n        { href: url },\n        cell\n      )\n    );\n  }\n\n  if (column === \'Reliable\') {\n    var reliable = row.Reliable;\n\n    if (reliable === "Yes") {\n      return React.createElement(\n        "td",\n        { className: "bg-success" },\n        "Yes"\n      );\n    } else if (reliable === "No") {\n      return React.createElement(\n        "td",\n        { className: "bg-danger" },\n        "No"\n      );\n    }\n  }\n\n  return React.createElement(\n    "td",\n    null,\n    cell\n  );\n}'}});
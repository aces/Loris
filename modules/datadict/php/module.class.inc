<?php
/**
 * This serves as a hint to LORIS that this module is a real module.
 * It does nothing but implement the module class in the module's namespace.
 *
 * PHP Version 5
 *
 * @category   Behavioural
 * @package    Main
 * @subpackage Behavioural
 * @author     Dave MacFarlane <david.macfarlane2@mcgill.ca>
 * @license    http://www.gnu.org/licenses/gpl-3.0.txt GPLv3
 * @link       https://www.github.com/aces/Loris-Trunk/
 */
namespace LORIS\datadict;

/**
 * Class module implements the basic LORIS module functionality
 *
 * @category Behavioural
 * @package  Main
 * @author   Dave MacFarlane <david.macfarlane2@mcgill.ca>
 * @license  http://www.gnu.org/licenses/gpl-3.0.txt GPLv3
 * @link     https://www.github.com/aces/Loris-Trunk/
 */
class Module extends \Module
{
    /**
     * {@inheritDoc}
     *
     * @param \User $user The user whose access is being checked.
     *
     * @return bool whether access is granted
     */
    public function hasAccess(\User $user) : bool
    {
        return parent::hasAccess($user) &&
            $user->hasAnyPermission(['data_dict_view', 'data_dict_edit']);
    }

    /**
     * {@inheritDoc}
     *
     * @return string The menu category for this module
     */
    public function getMenuCategory() : string
    {
        return "Tools";
    }

    /**
     * {@inheritDoc}
     *
     * @return string The human readable name for this module
     */
    public function getLongName() : string
    {
        return "Data Dictionary";
    }

    /**
     * Return a list of modules and categories that this user
     * has access to.
     *
     * This should not be used outside of this module, it's only
     * to store shared code between different endpoints
     *
     * @return array
     */
    public function getUserModuleCategories(\User $user, \LORIS\LorisInstance $loris, ?string $formodule=null) : array
    {
        $modules = $loris->getActiveModules();
        $usermodules = [];
        $dict = [];
        $categories = [];

        $categoryitems = [];
        foreach ($modules as $module) {
            if ($formodule !== null && $module->getName() !== $formodule) {
                continue;
            }
            if(!$module->hasAccess($user)) {
                continue;
            }

            $mdict = $module->getDataDictionary($this->lorisinstance);
            $mname = $module->getName();

            if(count($mdict) > 0) {
                $usermodules[] = $module;
                $categories[$mname] = [];


                foreach($mdict as $cat) {
                    $categories[$mname][$cat->getName()] = $cat->getDescription();
                    $categoryitems[] = [
                        'Module' => $module,
                        'Category' => $cat,
                    ];
                }
            }
        }
        return [
            'Modules' => $usermodules,
            'Categories' => $categories,
            'CategoryItems' => $categoryitems,
        ];
    }
}

!function(e){function n(a){if(t[a])return t[a].exports;var s=t[a]={exports:{},id:a,loaded:!1};return e[a].call(s.exports,s,s.exports,n),s.loaded=!0,s.exports}var t={};return n.m=e,n.c=t,n.p="",n(0)}({0:function(e,n,t){t(1)(t(34))},1:function(e,n){e.exports=function(e){"undefined"!=typeof execScript?execScript(e):eval.call(null,e)}},34:function(e,n){e.exports='/* exported RIssueEditForm */\n\n/**\n * Issue add/edit form\n *\n * Displays a form allowing a user to edit fields.\n * Includes functionality for both adding a new issue\n * and editing an existing issue.\n *\n * @author Caitrin Armstrong\n * */\n\nvar CollapsibleComment = React.createClass({\n  displayName: "CollapsibleComment",\n\n  getInitialState: function getInitialState() {\n    return { collapsed: true };\n  },\n  toggleCollapsed: function toggleCollapsed() {\n    this.setState({ collapsed: !this.state.collapsed });\n  },\n  render: function render() {\n    var historyText = [];\n    var btnCommentsLabel = this.state.collapsed ? "Show Comment History" : "Hide Comment History";\n\n    var commentHistory = this.props.commentHistory;\n    for (var comment in commentHistory) {\n      if (commentHistory[comment].fieldChanged === \'comment\') {\n        historyText.push("  [" + commentHistory[comment].dateAdded + "] ", React.createElement(\n          "b",\n          null,\n          " ",\n          commentHistory[comment].addedBy,\n          " "\n        ), " commented", React.createElement(\n          "i",\n          null,\n          " ",\n          commentHistory[comment].newValue,\n          " "\n        ), React.createElement("br", null));\n      } else {\n        historyText.push("  [" + commentHistory[comment].dateAdded + "] ", React.createElement(\n          "b",\n          null,\n          " ",\n          commentHistory[comment].addedBy,\n          " "\n        ), " updated the " + commentHistory[comment].fieldChanged + " to", React.createElement(\n          "i",\n          null,\n          " ",\n          commentHistory[comment].newValue,\n          " "\n        ), React.createElement("br", null));\n      }\n    }\n\n    return React.createElement(\n      "div",\n      { className: "row form-group" },\n      React.createElement(\n        "div",\n        { className: "col-sm-9" },\n        React.createElement(\n          "div",\n          { className: "btn btn-primary",\n            onClick: this.toggleCollapsed,\n            "data-toggle": "collapse",\n            "data-target": "#comment-history",\n            style: { margin: \'10px 0\' }\n          },\n          btnCommentsLabel\n        )\n      ),\n      React.createElement(\n        "div",\n        { className: "col-sm-9" },\n        React.createElement(\n          "div",\n          { id: "comment-history", className: "collapse" },\n          historyText\n        )\n      )\n    );\n  }\n});\n\nvar IssueEditForm = React.createClass({\n  displayName: "IssueEditForm",\n\n\n  propTypes: {\n    DataURL: React.PropTypes.string.isRequired,\n    action: React.PropTypes.string.isRequired\n  },\n\n  getInitialState: function getInitialState() {\n    return {\n      Data: [],\n      formData: {},\n      submissionResult: null,\n      errorMessage: null,\n      isLoaded: false,\n      loadedData: 0,\n      isNewIssue: false,\n      issueID: 0\n    };\n  },\n\n  componentDidMount: function componentDidMount() {\n    this.getDataAndChangeState();\n  },\n\n  render: function render() {\n    if (!this.state.isLoaded) {\n      if (this.state.error !== undefined) {\n        return React.createElement(\n          "div",\n          { className: "alert alert-danger text-center" },\n          React.createElement(\n            "strong",\n            null,\n            this.state.error\n          )\n        );\n      }\n      return React.createElement(\n        "button",\n        { className: "btn-info has-spinner" },\n        "loading",\n        React.createElement("span", {\n          className: "glyphicon glyphicon-refresh glyphicon-refresh-animate" })\n      );\n    }\n\n    var alertMessage = "";\n    var alertClass = "alert text-center hide";\n    var hasEditPermission = this.state.Data.hasEditPermission || this.state.Data.isOwnIssue || this.state.isNewIssue;\n\n    var headerText = " ";\n    if (this.state.isNewIssue) {\n      headerText = "Create New Issue";\n    } else {\n      headerText = "Edit Issue #" + this.state.formData.issueID;\n    }\n\n    var lastUpdateValue = " ";\n    if (this.state.isNewIssue) {\n      lastUpdateValue = "Never!";\n    } else {\n      lastUpdateValue = this.state.formData.lastUpdate;\n    }\n\n    var lastUpdatedByValue = " ";\n    if (this.state.isNewIssue) {\n      lastUpdatedByValue = "No-one!";\n    } else {\n      lastUpdatedByValue = this.state.formData.lastUpdatedBy;\n    }\n\n    var dateCreated = " ";\n    if (this.state.isNewIssue) {\n      dateCreated = "Sometime Soon!";\n    } else {\n      dateCreated = this.state.formData.dateCreated;\n    }\n\n    var isWatching = this.state.formData.watching;\n\n    var submitButtonValue = "";\n    if (this.state.isNewIssue) {\n      submitButtonValue = "Submit Issue";\n    } else {\n      submitButtonValue = "Update Issue";\n    }\n    var commentLabel = "";\n    if (this.state.isNewIssue) {\n      commentLabel = "Description";\n    } else {\n      commentLabel = "New Comment";\n    }\n\n    var commentHistory;\n    if (this.state.isNewIssue) {\n      commentHistory = React.createElement(\n        "div",\n        { "class": "form-group" },\n        "\\xA0"\n      );\n    } else {\n      commentHistory = React.createElement(CollapsibleComment, {\n        commentHistory: this.state.formData.commentHistory\n      });\n    }\n\n    if (this.state.submissionResult) {\n      if (this.state.submissionResult === "success") {\n        alertClass = "alert alert-success text-center";\n        alertMessage = "Submission Successful!";\n      } else if (this.state.submissionResult === "error") {\n        var errorMessage = this.state.errorMessage;\n        alertClass = "alert alert-danger text-center";\n        alertMessage = errorMessage ? errorMessage : "Failed to submit issue :(";\n      } else if (this.state.submissionResult === "invalid") {\n        var _errorMessage = this.state.errorMessage;\n        alertClass = "alert alert-danger text-center";\n        alertMessage = _errorMessage ? _errorMessage : "Invalid input";\n      }\n    }\n    var header;\n    var description;\n    if (!this.state.isNewIssue) {\n      header = React.createElement(\n        "div",\n        null,\n        React.createElement(\n          "div",\n          { className: "row" },\n          React.createElement(\n            "div",\n            { className: "col-md-6" },\n            React.createElement(StaticElement, {\n              name: "lastUpdate",\n              label: "Last Update: ",\n              ref: "lastUpdate",\n              text: lastUpdateValue\n            })\n          ),\n          React.createElement(\n            "div",\n            { className: "col-md-6" },\n            React.createElement(StaticElement, {\n              name: "lastUpdatedBy",\n              label: "Last Updated By: ",\n              ref: "lastUpdatedBy",\n              text: lastUpdatedByValue\n            })\n          )\n        ),\n        React.createElement(\n          "div",\n          { className: "row" },\n          React.createElement(\n            "div",\n            { className: "col-md-6" },\n            React.createElement(StaticElement, {\n              name: "dateCreated",\n              label: "Date Created: ",\n              ref: "dateCreated",\n              text: dateCreated\n            })\n          ),\n          React.createElement(\n            "div",\n            { className: "col-md-6" },\n            React.createElement(StaticElement, {\n              name: "reporter",\n              label: "Reporter: ",\n              ref: "reporter",\n              text: this.state.formData.reporter\n            })\n          )\n        )\n      );\n\n      description = React.createElement(\n        "div",\n        null,\n        React.createElement(\n          "div",\n          { "class": "row" },\n          React.createElement(StaticElement, {\n            name: "description",\n            label: "Description",\n            ref: "description",\n            text: this.state.formData.desc === "null" ? "" : this.state.formData.desc\n          })\n        )\n      );\n    }\n\n    return React.createElement(\n      "div",\n      null,\n      React.createElement(\n        FormElement,\n        {\n          name: "issueEdit",\n          onSubmit: this.handleSubmit,\n          ref: "form",\n          "class": ""\n        },\n        React.createElement(\n          "h3",\n          null,\n          headerText\n        ),\n        React.createElement("br", null),\n        header,\n        React.createElement("br", null),\n        React.createElement("br", null),\n        React.createElement(\n          "div",\n          { "class": "row" },\n          React.createElement(\n            "div",\n            { "class": "col-sm-6" },\n            React.createElement(\n              "div",\n              { "class": "row" },\n              React.createElement(TextboxElement, {\n                name: "title",\n                label: "Title",\n                onUserInput: this.setFormData,\n                ref: "title",\n                value: this.state.formData.title,\n                disabled: !hasEditPermission,\n                required: true\n              })\n            ),\n            description,\n            React.createElement(\n              "div",\n              { "class": "row" },\n              React.createElement(SelectElement, {\n                name: "assignee",\n                label: "Assignee",\n                emptyOption: true,\n                options: this.state.Data.assignees,\n                onUserInput: this.setFormData,\n                ref: "assignee",\n                disabled: !hasEditPermission,\n                value: this.state.formData.assignee,\n                required: true\n              })\n            ),\n            React.createElement(\n              "div",\n              { "class": "row" },\n              React.createElement(SelectElement, {\n                name: "centerID",\n                label: "Site",\n                emptyOption: true,\n                options: this.state.Data.sites,\n                onUserInput: this.setFormData,\n                ref: "centerID",\n                disabled: !hasEditPermission,\n                value: this.state.formData.centerID\n              })\n            ),\n            React.createElement(\n              "div",\n              { "class": "row" },\n              React.createElement(SelectElement, {\n                name: "status",\n                label: "Status",\n                emptyOption: false,\n                options: this.state.Data.statuses,\n                onUserInput: this.setFormData,\n                ref: "status",\n                disabled: !hasEditPermission,\n                value: this.state.formData.status // todo: edit this so the\n                // options are different if\n                // the user doesn\'t have\n                // permission\n              })\n            ),\n            React.createElement(\n              "div",\n              { "class": "row" },\n              React.createElement(SelectElement, {\n                name: "priority",\n                label: "Priority",\n                emptyOption: false,\n                options: this.state.Data.priorities,\n                onUserInput: this.setFormData,\n                ref: "priority",\n                required: false,\n                disabled: !hasEditPermission,\n                value: this.state.formData.priority\n              })\n            ),\n            React.createElement(\n              "div",\n              { "class": "row" },\n              React.createElement(SelectElement, {\n                name: "category",\n                label: "Category",\n                emptyOption: true,\n                options: this.state.Data.categories,\n                onUserInput: this.setFormData,\n                ref: "category",\n                disabled: !hasEditPermission,\n                value: this.state.formData.category\n              })\n            ),\n            React.createElement(\n              "div",\n              { "class": "row" },\n              React.createElement(SelectElement, {\n                name: "module",\n                label: "Module",\n                emptyOption: true,\n                options: this.state.Data.modules,\n                onUserInput: this.setFormData,\n                ref: "module",\n                disabled: !hasEditPermission,\n                value: this.state.formData.module\n              })\n            ),\n            React.createElement(\n              "div",\n              { "class": "row" },\n              React.createElement(TextboxElement, {\n                name: "PSCID",\n                label: "PSCID",\n                onUserInput: this.setFormData,\n                ref: "PSCID",\n                disabled: !hasEditPermission,\n                value: this.state.formData.PSCID\n              })\n            ),\n            React.createElement(\n              "div",\n              { "class": "row" },\n              React.createElement(TextboxElement, {\n                name: "visitLabel",\n                label: "Visit Label",\n                onUserInput: this.setFormData,\n                ref: "visitLabel",\n                disabled: !hasEditPermission,\n                value: this.state.formData.visitLabel\n              })\n            ),\n            React.createElement(\n              "div",\n              { "class": "row" },\n              React.createElement(SelectElement, {\n                name: "watching",\n                label: "Watching?",\n                emptyOption: false,\n                options: { No: \'No\', Yes: \'Yes\' },\n                onUserInput: this.setFormData,\n                ref: "watching",\n                value: isWatching\n              })\n            ),\n            React.createElement(\n              "div",\n              { "class": "row" },\n              React.createElement(SelectElement, {\n                name: "othersWatching",\n                label: "Add others to watching?",\n                emptyOption: true,\n                options: this.state.Data.otherWatchers,\n                onUserInput: this.setFormData,\n                ref: "watching",\n                multiple: true,\n                value: this.state.formData.whoIsWatching\n              })\n            ),\n            React.createElement(\n              "div",\n              { "class": "row" },\n              React.createElement(TextareaElement, {\n                name: "comment",\n                label: commentLabel,\n                onUserInput: this.setFormData,\n                ref: "comment",\n                value: null\n              })\n            ),\n            React.createElement(\n              "div",\n              { "class": "row submit-area" },\n              React.createElement(ButtonElement, { label: submitButtonValue }),\n              React.createElement(\n                "div",\n                { "class": "col-md-3" },\n                React.createElement(\n                  "div",\n                  { className: alertClass,\n                    role: "alert",\n                    ref: "alert-message"\n                  },\n                  alertMessage\n                )\n              )\n            )\n          ),\n          React.createElement(\n            "div",\n            { "class": "col-sm-6" },\n            React.createElement(\n              "div",\n              { "class": "row" },\n              commentHistory\n            )\n          )\n        )\n      )\n    );\n  },\n\n  /**\n   * Creates an ajax request and sets the state with the result\n   */\n  getDataAndChangeState: function getDataAndChangeState() {\n    var that = this;\n\n    var dataURL = this.props.DataURL;\n\n    $.ajax(dataURL, {\n      dataType: \'json\',\n      xhr: function xhr() {\n        var xhr = new window.XMLHttpRequest();\n        xhr.addEventListener("progress", function (evt) {\n          that.setState({\n            loadedData: evt.loaded\n          });\n        });\n        return xhr;\n      },\n      success: function success(data) {\n        if (!data.issueData.issueID) {\n          that.setState({ isNewIssue: true });\n        }\n\n        that.setState({\n          Data: data,\n          isLoaded: true,\n          issueData: data.issueData,\n          formData: data.issueData\n        });\n\n        that.setState({\n          error: "finished success"\n        });\n      },\n      error: function error(data, errorCode, errorMsg) {\n        that.setState({\n          error: errorMsg\n        });\n      }\n    });\n  },\n\n  /**\n   * Handles form submission\n   *\n   * @param {event} e form submit event\n   */\n  handleSubmit: function handleSubmit(e) {\n    e.preventDefault();\n\n    // Prevent submissions while pending\n    if (this.state.submissionResult === "pending") {\n      return;\n    }\n    this.setState({ submissionResult: "pending" });\n\n    var myFormData = this.state.formData;\n    var formRefs = this.refs;\n    var formData = new FormData();\n\n    // Validate the form\n    if (!this.isValidForm(formRefs, myFormData)) {\n      return;\n    }\n\n    for (var key in myFormData) {\n      if (myFormData[key] !== "") {\n        formData.append(key, myFormData[key]);\n      }\n    }\n\n    $.ajax({\n      type: \'POST\',\n      url: this.props.action,\n      data: formData,\n      cache: false,\n      dataType: \'json\',\n      contentType: false,\n      processData: false,\n      xhr: function xhr() {\n        var xhr = new window.XMLHttpRequest();\n        xhr.upload.addEventListener("progress", function (evt) {\n          if (evt.lengthComputable) {\n            var progressbar = $("#progressbar");\n            var progresslabel = $("#progresslabel");\n            var percent = Math.round(evt.loaded / evt.total * 100);\n            $(progressbar).width(percent + "%");\n            $(progresslabel).html(percent + "%");\n            progressbar.attr(\'aria-valuenow\', percent);\n          }\n        }, false);\n        return xhr;\n      },\n\n      success: function (data) {\n        if (!data.isValidSubmission) {\n          this.setState({\n            errorMessage: data.invalidMessage,\n            submissionResult: "invalid"\n          });\n          this.showAlertMessage();\n          return;\n        }\n\n        this.setState({\n          submissionResult: "success",\n          issueID: data.issueID\n        });\n        this.showAlertMessage();\n\n        if (this.state.isNewIssue) {\n          setTimeout(function () {\n            window.location.assign(\'/issue_tracker\');\n          }, 2000);\n        }\n      }.bind(this),\n      error: function (err) {\n        console.error(err);\n        this.setState({\n          submissionResult: "error"\n        });\n        this.showAlertMessage();\n      }.bind(this)\n    });\n  },\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData: function setFormData(formElement, value) {\n    // todo: only give valid inputs for fields given previous input to other fields\n\n    var formDataUpdate = this.state.formData;\n    formDataUpdate[formElement] = value;\n\n    this.setState({\n      formData: formDataUpdate\n    });\n  },\n\n  /**\n   * Validates the form.\n   * Except not entirely because PSCID and visitLabel are not validated.\n   *\n   * @param {object} formRefs - Object containing references to React form elements\n   * @param {object} formDataToCheck - Object containing form data inputed by user\n   * @return {boolean} - true if all required fields are filled, false otherwise\n   */\n  isValidForm: function isValidForm(formRefs, formDataToCheck) {\n    var isValidForm = true;\n    var requiredFields = {\n      title: null,\n      assignee: null\n    };\n\n    Object.keys(requiredFields).map(function (field) {\n      if (formDataToCheck[field]) {\n        requiredFields[field] = formDataToCheck[field];\n      } else if (formRefs[field]) {\n        formRefs[field].props.hasError = true;\n        isValidForm = false;\n      }\n    });\n\n    this.forceUpdate();\n    return isValidForm;\n  },\n\n  /**\n   * Display a success/error alert message after form submission\n   */\n  showAlertMessage: function showAlertMessage() {\n    var self = this;\n\n    if (this.refs["alert-message"] === null) {\n      return;\n    }\n\n    var alertMsg = React.findDOMNode(this.refs["alert-message"]);\n    $(alertMsg).fadeTo(2000, 500).delay(5000).slideUp(500, function () {\n      self.setState({\n        uploadResult: null\n      });\n    });\n  }\n\n});\n\nvar RIssueEditForm = React.createFactory(IssueEditForm);'}});
uniform mat4 worldViewProjection;
uniform mat4 world;
uniform mat4 worldInverseTranspose;
uniform float min;
uniform float max;
uniform int numberColors;


attribute vec4 position;
attribute vec4 normal;
attribute vec4 color;
attribute float texCoord0;

varying vec3 v_normal;
varying vec3 v_worldPosition;
varying vec2 v_coord;
varying vec4 v_color;

float getTextureCoord(float min,float max,int numberColors,float value) {
     float step = min+max/numberColors;
     if(value <min) {
       return 0;
     }else if(value > max) {
       return 1;
     }else {
       return vec2(value/step/numberColors,0.0);
     }	   
}    


void main() {
  gl_Position = worldViewProjection * position;
  
  vec3 worldPosition = (world * position).xyz;
  v_normal = (worldInverseTranspose * normal).xyz;
  v_worldPosition = worldPosition;
  if(texCoord >= 0.0) {
 	v_coord = getTextureCoord(min,max,numberColors,texCoord);
	v_color = color;
  }else {
 	v_coord = -1;
	v_color = color;
  }
}

// #o3d SplitMarker

uniform mat4 viewInverse;
uniform vec3 lightWorldPos;
uniform vec4 ambientIntensity;
uniform vec4 lightIntensity;
uniform vec4 emissive;
uniform vec4 ambient;
uniform vec4 colorMult;
uniform vec4 specular;
uniform float shininess;
uniform bool wires;
uniform float transAlpha;

uniform sampler2D texSampler;

varying vec3 v_normal;
varying vec3 v_worldPosition;
varying float v_coord;


vec4 lit(float l ,float h, float m) {
  return vec4(1.0,
              max(l, 0.0),
              (l > 0.0) ? pow(max(0.0, h), m) : 0.0,
              1.0);
}

void main() {
  if(v_coord >= 0.0) {
   vec4 color = texture2D(texSampler,v_coord)
  }else {
   vec4 color = v_color;
  } 	
  if(wires) {
    gl_FragColor = color;
  }else {
    vec3 surfaceToLight = normalize(lightWorldPos - v_worldPosition);
    vec3 worldNormal = normalize(v_normal);
    vec3 surfaceToView = normalize(viewInverse[3].xyz - v_worldPosition);
    vec3 halfVector = normalize(surfaceToLight + surfaceToView);
    vec4 litResult = lit(dot(worldNormal, surfaceToLight),
                         dot(worldNormal, halfVector), shininess);

    vec4 outColor = ambientIntensity * ambient * colorMult;
    outColor += lightIntensity * (color * colorMult * litResult.y +
       specular * litResult.z);
    outColor += emissive;
    gl_FragColor = vec4(outColor.rgb, color.a * transAlpha); 
  }
}

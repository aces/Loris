!function(e){function n(t){if(a[t])return a[t].exports;var r=a[t]={exports:{},id:t,loaded:!1};return e[t].call(r.exports,r,r.exports,n),r.loaded=!0,r.exports}var a={};return n.m=e,n.c=a,n.p="",n(0)}({0:function(e,n,a){a(1)(a(28))},1:function(e,n){e.exports=function(e){"undefined"!=typeof execScript?execScript(e):eval.call(null,e)}},28:function(e,n){e.exports="/* exported  GenomicFileUploadModal, RGenomicFileUploadModal, UploadForm,\nFileTypeSelect, FileInput, TextAreaInput, CheckboxInput, ProgressBar\n*/\n\nvar GenomicFileUploadModal = React.createClass({\n  displayName: 'GenomicFileUploadModal',\n\n\n  propTypes: {\n    baseURL: React.PropTypes.string.isRequired\n  },\n\n  getInitialState: function getInitialState() {\n    return {\n      readyForUpload: false,\n      submited: false,\n      uploadSummary: {}\n    };\n  },\n\n  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {\n    return nextState.readyForUpload !== this.state.readyForUpload || nextState.submited !== this.state.submited || nextProps.id !== this.props.id;\n  },\n\n  validateForm: function validateForm(requiredInputs) {\n    // this is always returning true... for now\n    requiredInputs = requiredInputs || [];\n    this.setState({\n      readyForUpload: requiredInputs.reduce(function (previousValue, currentValue, currentIndex, array) {\n        return previousValue;\n      }, true)\n    });\n  },\n\n  reloadPage: function reloadPage() {\n    $('#modalContainer').modal('hide');\n    $('#showdata').click();\n  },\n\n  handleUploadSubmit: function handleUploadSubmit(event) {\n    event.preventDefault();\n    var self = this;\n    var formData = new FormData(document.getElementById('uploadForm'));\n\n    var xhr = new XMLHttpRequest();\n    xhr.previousText = '';\n    xhr.onerror = function () {\n      console.error(\"[XHR] Fatal Error.\");\n    };\n    xhr.onreadystatechange = function () {\n      var bar = document.getElementById(\"progressBar\");\n      try {\n        switch (xhr.readyState) {\n          case 0:\n            break;\n          case 1:\n            break;\n          case 2:\n            break;\n          case 3:\n\n            var newResponse = xhr.responseText.substring(xhr.previousText.length);\n            var result = JSON.parse(newResponse);\n            bar.innerHTML = String(result.message);\n            bar.style.width = result.progress + \"%\";\n            if (result.error !== undefined) {\n              bar.className = 'progress-bar progress-bar-danger';\n            }\n\n            xhr.previousText = xhr.responseText;\n            break;\n          case 4:\n            self.setState({ submited: true });\n            break;\n          default:\n            break;\n        }\n      } catch (e) {\n        console.error(\"[XHR STATECHANGE] Exception: \" + e);\n        bar.innerHTML = 'An error occured';\n        bar.className = 'progress-bcar progress-bar-danger';\n        bar.style.width = \"100%\";\n      }\n    };\n    var url = this.props.baseURL + \"/genomic_browser/ajax/genomic_file_upload.php\";\n    xhr.open(\"POST\", url, true);\n    xhr.send(formData);\n  },\n\n  render: function render() {\n    var footerButtons = [];\n\n    if (this.state.submited) {\n      footerButtons.push(React.createElement(\n        'button',\n        { className: 'btn btn-default', onClick: this.reloadPage, 'data-dismiss': 'modal' },\n        'Ok'\n      ));\n    } else {\n      if (this.state.readyForUpload) {\n        footerButtons.push(React.createElement(\n          'button',\n          { className: 'btn btn-primary', onClick: this.handleUploadSubmit, role: 'button', 'aria-disabled': 'false' },\n          'Upload'\n        ));\n      }\n\n      footerButtons.push(React.createElement(\n        'button',\n        { className: 'btn btn-default', id: 'cancelButton', role: 'reset', type: 'reset', 'data-dismiss': 'modal' },\n        'Cancel'\n      ));\n    }\n    return React.createElement(\n      'div',\n      { className: 'modal fade', id: 'fileUploadModal', tabindex: '-1', role: 'dialog', 'aria-labelledby': 'myModalLabel', 'aria-hidden': 'true' },\n      React.createElement(\n        'div',\n        { className: 'modal-dialog' },\n        React.createElement(\n          'div',\n          { className: 'modal-content' },\n          React.createElement(\n            'div',\n            { className: 'modal-header' },\n            React.createElement(\n              'button',\n              { type: 'button', className: 'close', 'data-dismiss': 'modal' },\n              React.createElement(\n                'span',\n                { 'aria-hidden': 'true' },\n                '\\xD7'\n              ),\n              React.createElement(\n                'span',\n                { className: 'sr-only' },\n                'Close'\n              )\n            ),\n            React.createElement(\n              'h3',\n              { className: 'modal-title', id: 'myModalLabel' },\n              'Upload File'\n            )\n          ),\n          React.createElement(\n            'div',\n            { className: 'modal-body' },\n            React.createElement(UploadForm, { baseURL: this.props.baseURL, validate: this.validateForm })\n          ),\n          React.createElement(\n            'div',\n            { className: 'modal-footer' },\n            footerButtons\n          )\n        )\n      )\n    );\n  }\n});\n\nvar RGenomicFileUploadModal = React.createFactory(GenomicFileUploadModal);\n\nvar UploadForm = React.createClass({\n  displayName: 'UploadForm',\n\n\n  getInitialState: function getInitialState() {\n    return {\n      baseURL: '',\n      fileType: \"\",\n      useColumnHeaders: true // Change this to false when we are ready to use Mapping files\n    };\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      validate: null\n    };\n  },\n\n  handleFileTypeChange: function handleFileTypeChange(event) {\n    event.preventDefault();\n    this.setState({ fileType: event.target.value });\n  },\n\n  handleCheckboxChange: function handleCheckboxChange(event) {\n    if (event.target.name === 'pscidColumn') {\n      this.setState({ useColumnHeaders: !this.state.useColumnHeaders });\n    }\n  },\n\n  componentWillUpdate: function componentWillUpdate(prevProps, prevState) {\n    this.props.validate();\n  },\n\n  render: function render() {\n    var instructions = [];\n    var inputs = [];\n\n    inputs.push(React.createElement(FileTypeSelect, { baseURL: this.props.baseURL, multiple: false, onFileTypeChange: this.handleFileTypeChange, name: 'fileType', label: 'File type:' }));\n\n    switch (this.state.fileType) {\n      case 'Methylation beta-values':\n        inputs.push(React.createElement(FileInput, { name: 'fileData', label: 'File :' }));\n        inputs.push(React.createElement(TextAreaInput, { name: 'description', label: 'Description :' }));\n        if (!this.state.useColumnHeaders) {\n          inputs.push(React.createElement(FileInput, { name: 'fileMapping', label: 'Mapping :' }));\n        }\n        inputs.push(React.createElement(CheckboxInput, { handleChange: this.handleCheckboxChange, checked: this.state.useColumnHeaders, name: 'pscidColumn' }));\n        inputs.push(React.createElement(ProgressBar, { name: 'progressbar', label: 'Progress :' }));\n        break;\n      case 'Other':\n        inputs.push(React.createElement(FileInput, { name: 'fileData', label: 'File :' }));\n        inputs.push(React.createElement(TextAreaInput, { name: 'description', label: 'Description :' }));\n        inputs.push(React.createElement(ProgressBar, { name: 'progressbar', label: 'Progress :' }));\n        break;\n      default:\n      // noop\n    }\n\n    return React.createElement(\n      'form',\n      { name: 'uploadForm', id: 'uploadForm', enctype: 'multipart/form-data', method: 'POST' },\n      React.createElement(\n        'div',\n        { className: 'row' },\n        instructions,\n        inputs\n      )\n    );\n  }\n});\n\nvar FileTypeSelect = React.createClass({\n  displayName: 'FileTypeSelect',\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      baseURL: '',\n      onFileTypeChange: null,\n      getFileType: null\n    };\n  },\n\n  getInitialState: function getInitialState() {\n    return {\n      availableFileType: []\n    };\n  },\n\n  componentDidMount: function componentDidMount() {\n    this.getGenomicFileType();\n  },\n\n  getGenomicFileType: function getGenomicFileType() {\n    var self = this;\n    var xhr = new XMLHttpRequest();\n    xhr.onreadystatechange = function () {\n      try {\n        switch (xhr.readyState) {\n          case 0:\n            break;\n          case 1:\n            break;\n          case 2:\n            break;\n          case 3:\n            xhr.previousText = xhr.responseText;\n            break;\n          case 4:\n            var fileType = [{ genomicFileType: '' }].concat(JSON.parse(xhr.responseText));\n            self.setState({ availableFileType: fileType });\n            break;\n          default:\n            break;\n        }\n      } catch (e) {\n        console.error(\"Exception: \" + e);\n      }\n    };\n    var url = this.props.baseURL + \"/AjaxHelper.php?Module=genomic_browser&script=get_genomic_file_type.php\";\n    xhr.open(\"POST\", url, true);\n    xhr.send();\n  },\n\n  render: function render() {\n    var options = this.state.availableFileType.map(function (e) {\n      return React.createElement(\n        'option',\n        { value: e.genomicFileType },\n        e.genomicFileType\n      );\n    });\n\n    return React.createElement(\n      'div',\n      { className: 'col-xs-12 form-group' },\n      React.createElement(\n        'label',\n        { 'for': this.props.name, className: 'col-xs-3' },\n        this.props.label,\n        React.createElement(\n          'font',\n          { color: 'red' },\n          React.createElement(\n            'sup',\n            null,\n            ' *'\n          )\n        )\n      ),\n      React.createElement(\n        'div',\n        { className: 'col-xs-9' },\n        React.createElement(\n          'select',\n          { name: this.props.name, id: this.props.name, className: 'form-fields form-control input-sm', onChange: this.props.onFileTypeChange },\n          options\n        )\n      )\n    );\n  }\n});\n\nvar FileInput = React.createClass({\n  displayName: 'FileInput',\n\n\n  propTypes: {\n    name: React.PropTypes.string,\n    label: React.PropTypes.string\n  },\n\n  render: function render() {\n    return React.createElement(\n      'div',\n      { className: 'col-xs-12 form-group' },\n      React.createElement(\n        'label',\n        { className: 'col-xs-3', 'for': this.props.name },\n        this.props.label\n      ),\n      React.createElement(\n        'div',\n        { className: 'col-xs-9' },\n        React.createElement('input', { type: 'file', name: this.props.name, id: this.props.name, onChange: this.handleChange, className: 'fileUpload' })\n      )\n    );\n  }\n});\n\nvar TextAreaInput = React.createClass({\n  displayName: 'TextAreaInput',\n\n\n  propTypes: {\n    name: React.PropTypes.string,\n    label: React.PropTypes.string\n  },\n\n  render: function render() {\n    return React.createElement(\n      'div',\n      { className: 'col-xs-12 form-group' },\n      React.createElement(\n        'label',\n        { className: 'col-xs-3', 'for': this.props.name },\n        this.props.label\n      ),\n      React.createElement(\n        'div',\n        { className: 'col-xs-9' },\n        React.createElement('textarea', { cols: '20', rows: '3', name: this.props.name, onChange: this.handleChange, id: this.props.name, style: { border: '2px inset' }, className: 'ui-corner-all form-fields form-control input-sm' })\n      )\n    );\n  }\n});\n\nvar CheckboxInput = React.createClass({\n  displayName: 'CheckboxInput',\n\n  propTypes: {\n    name: React.PropTypes.string\n  },\n  getInitialState: function getInitialState() {\n    return {\n      checked: this.props.checked || false\n    };\n  },\n  render: function render() {\n    // Add onClick={this.props.handleChange}  and checked={this.state.checked} when we support Mapping files\n    return React.createElement(\n      'div',\n      { className: 'form-group col-sm-12' },\n      React.createElement('label', { className: 'col-xs-3' }),\n      React.createElement(\n        'div',\n        { className: 'col-xs-9' },\n        React.createElement(\n          'input',\n          { className: 'user-success', name: this.props.name, id: this.props.name, type: 'checkbox', checked: 'true', style: { 'margin-right': '1em' } },\n          'Use PSCID in column headers',\n          this.props.label\n        )\n      )\n    );\n  }\n});\n\nvar ProgressBar = React.createClass({\n  displayName: 'ProgressBar',\n\n\n  propTypes: {\n    name: React.PropTypes.string,\n    label: React.PropTypes.string\n  },\n\n  render: function render() {\n    return React.createElement(\n      'div',\n      { className: 'col-xs-12 form-group' },\n      React.createElement(\n        'label',\n        { className: 'col-xs-3', 'for': this.props.name },\n        this.props.label\n      ),\n      React.createElement(\n        'div',\n        { className: 'col-xs-9' },\n        React.createElement(\n          'div',\n          { className: 'progress', style: { height: \"20px\" } },\n          React.createElement('div', { className: 'progress-bar progress-bar-success', id: 'progressBar', role: 'progressbar', 'aria-valuenow': '0', 'aria-valuemin': '0', 'aria-valuemax': '100' })\n        )\n      )\n    );\n  }\n});"}});
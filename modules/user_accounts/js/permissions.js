!function(modules){function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={exports:{},id:moduleId,loaded:!1};return modules[moduleId].call(module.exports,module,module.exports,__webpack_require__),module.loaded=!0,module.exports}var installedModules={};return __webpack_require__.m=modules,__webpack_require__.c=installedModules,__webpack_require__.p="",__webpack_require__(0)}([function(module,exports){"use strict";var Role=React.createClass({displayName:"Role",handleCheck:function(){this.props.onChange(this.props.id)},handleMouseOver:function(){this.props.onMouseOver(this.props.id)},handleMouseOut:function(){this.props.onMouseOut()},render:function(){var textStyle={};return this.props.disabled&&(textStyle={color:"#ccc",cursor:"not-allowed"}),React.createElement("div",{className:"checkbox role",onMouseOver:this.handleMouseOver,onMouseOut:this.handleMouseOut},React.createElement("label",{style:textStyle},React.createElement("input",{name:"roleID["+this.props.id+"]",type:"checkbox",value:this.props.id,id:this.props.id,checked:this.props.checked,onChange:this.handleCheck,disabled:this.props.disabled}),this.props.name))}}),RoleList=React.createClass({displayName:"RoleList",render:function(){var roleNodes=this.props.data.map(function(role){return React.createElement(Role,{key:role.id,name:role.name,id:role.id,checked:role.checked,disabled:role.disabled,onChange:this.props.onChange,onMouseOver:this.props.onMouseOver,onMouseOut:this.props.onMouseOut})},this);return React.createElement("div",{className:"roleList"},roleNodes)}}),Permission=React.createClass({displayName:"Permission",handleCheck:function(e){this.props.onChange(this.props.id)},render:function(){var textStyle={};return this.props.disabled&&(textStyle={color:"#ccc",cursor:"not-allowed"}),this.props.highlight&&(textStyle={color:"#3B99FC"}),React.createElement("div",{className:"checkbox permission"},React.createElement("label",{style:textStyle},React.createElement("input",{name:"permID["+this.props.id+"]",type:"checkbox",value:this.props.id,checked:this.props.checked,onChange:this.handleCheck,disabled:this.props.disabled}),this.props.name))}}),PermissionList=React.createClass({displayName:"PermissionList",render:function(){var half=Math.ceil(this.props.data.length/2),firstHalf=this.props.data.slice(0,half),secondHalf=this.props.data.slice(half,this.props.data.length),permissionNodesCol1=firstHalf.map(function(permission){return React.createElement(Permission,{key:permission.id,id:permission.id,name:permission.name,highlight:permission.highlight,checked:permission.checked,onChange:this.props.onChange,disabled:permission.disabled})},this),permissionNodesCol2=secondHalf.map(function(permission){return React.createElement(Permission,{key:permission.id,id:permission.id,name:permission.name,highlight:permission.highlight,checked:permission.checked,onChange:this.props.onChange,disabled:permission.disabled})},this);return React.createElement("div",{className:"row"},React.createElement("div",{className:"col-md-6"},permissionNodesCol1),React.createElement("div",{className:"col-md-6"},permissionNodesCol2))}}),Access=React.createClass({displayName:"Access",getInitialState:function(){return{roles:[],permissions:[],rolesUsed:!0}},loadDataFromServer:function(){$.ajax({url:this.props.dataURL,data:{identifier:this.props.identifier},dataType:"json",cache:!1,success:function(data){data.roles.length?this.setState({roles:data.roles,permissions:data.permissions}):this.setState({roles:data.roles,permissions:data.permissions,rolesUsed:!1})}.bind(this),error:function(xhr,status,err){console.error(this.props.dataURL,status,err.toString())}.bind(this)})},componentDidMount:function(){this.loadDataFromServer()},componentWillUnmount:function(){this.serverRequest.abort()},getRoleIndex:function(roleID){for(var roles=this.state.roles,index=-1,i=0;i<roles.length;i++)if(roles[i].id===roleID){index=i;break}return index},getPermissionIndex:function(permissionID){for(var permissions=this.state.permissions,index=-1,i=0;i<permissions.length;i++)if(permissions[i].id===permissionID){index=i;break}return index},calculateRoles:function(roles,permissions){for(var currentRoles=roles,currentPermissions=permissions,i=0;i<currentRoles.length;i++){for(var roleIndex=this.getRoleIndex(currentRoles[i].id),checked=!0,j=0;j<currentRoles[i].permissions.length;j++){var permIndex=this.getPermissionIndex(currentRoles[i].permissions[j].permissionID);if(!currentPermissions[permIndex].checked){checked=!1;break}}currentRoles[roleIndex].checked=checked}return roles},handleRoleChange:function(roleID){var index=this.getRoleIndex(roleID),roleUpdate=this.state.roles,currentState=roleUpdate[index].checked;roleUpdate[index].checked=!currentState;for(var permissionsToChange=this.state.roles[index].permissions,permissionUpdate=this.state.permissions,i=0;i<permissionsToChange.length;i++){var permissionIndex=this.getPermissionIndex(permissionsToChange[i].permissionID);currentState?permissionUpdate[permissionIndex].checked=!1:permissionUpdate[permissionIndex].checked=!0}roleUpdate=this.calculateRoles(roleUpdate,permissionUpdate),this.setState({roles:roleUpdate,permissions:permissionUpdate})},handleRoleMouseOver:function(roleID){for(var index=this.getRoleIndex(roleID),permissionsToHighlight=this.state.roles[index].permissions,permissionsUpdate=this.state.permissions,i=0;i<permissionsToHighlight.length;i++){var permissionIndex=this.getPermissionIndex(permissionsToHighlight[i].permissionID);permissionsUpdate[permissionIndex].highlight=!0}this.setState({permissions:permissionsUpdate})},handleRoleMouseOut:function(){for(var permissionsUpdate=this.state.permissions,i=0;i<permissionsUpdate.length;i++)permissionsUpdate[i].highlight=!1;this.setState({permissions:permissionsUpdate})},handlePermissionChange:function(permissionID){var index=this.getPermissionIndex(permissionID),permissionUpdate=this.state.permissions,currentState=permissionUpdate[index].checked;if(permissionUpdate[index].checked=!currentState,this.state.rolesUsed){var roleUpdate=this.calculateRoles(this.state.roles,permissionUpdate);this.setState({roles:roleUpdate,permissions:permissionUpdate})}else this.setState({permissions:permissionUpdate})},render:function(){return this.state.rolesUsed?React.createElement("div",{className:"Access"},React.createElement("label",{className:"col-sm-2"},"Access"),React.createElement("div",{className:"col-sm-2"},React.createElement("label",null,"Roles"),React.createElement(RoleList,{data:this.state.roles,onChange:this.handleRoleChange,onMouseOver:this.handleRoleMouseOver,onMouseOut:this.handleRoleMouseOut})),React.createElement("div",{className:"col-sm-8"},React.createElement("label",null,"Permissions"),React.createElement(PermissionList,{data:this.state.permissions,onChange:this.handlePermissionChange}))):React.createElement("div",{className:"Access"},React.createElement("label",{className:"col-sm-2"},"Access"),React.createElement("div",{className:"col-sm-10"},React.createElement("label",null,"Permissions"),React.createElement(PermissionList,{data:this.state.permissions,onChange:this.handlePermissionChange})))}});window.onload=function(){var userID=QueryString.get().identifier;"undefined"==typeof userID&&(userID="");var access=React.createElement(Access,{dataURL:loris.BaseURL+"/user_accounts/ajax/getRolePermissionData.php",identifier:userID});ReactDOM.render(access,document.getElementById("access"))}}]);
//# sourceMappingURL=permissions.js.map
(function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId]){return installedModules[moduleId].exports}var module=installedModules[moduleId]={i:moduleId,l:false,exports:{}};modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.l=true;return module.exports}__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.d=function(exports,name,getter){if(!__webpack_require__.o(exports,name)){Object.defineProperty(exports,name,{enumerable:true,get:getter})}};__webpack_require__.r=function(exports){if(typeof Symbol!=="undefined"&&Symbol.toStringTag){Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"})}Object.defineProperty(exports,"__esModule",{value:true})};__webpack_require__.t=function(value,mode){if(mode&1)value=__webpack_require__(value);if(mode&8)return value;if(mode&4&&typeof value==="object"&&value&&value.__esModule)return value;var ns=Object.create(null);__webpack_require__.r(ns);Object.defineProperty(ns,"default",{enumerable:true,value});if(mode&2&&typeof value!="string")for(var key in value)__webpack_require__.d(ns,key,function(key){return value[key]}.bind(null,key));return ns};__webpack_require__.n=function(module){var getter=module&&module.__esModule?function getDefault(){return module["default"]}:function getModuleExports(){return module};__webpack_require__.d(getter,"a",getter);return getter};__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)};__webpack_require__.p="";return __webpack_require__(__webpack_require__.s=50)})({50:function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var LorisElement=React.createClass({displayName:"LorisElement",render:function render(){var element=this.props.element;var elementHtml="";switch(element.Type){case"header":elementHtml=React.createElement("h2",null,element.Description);break;case"label":elementHtml=React.createElement("p",null,element.Description);break;case"score":elementHtml=React.createElement(StaticElement,{text:0,label:element.Description});break;case"text":if(element.Options.Type==="small"){elementHtml=React.createElement(TextboxElement,{label:element.Description})}else{elementHtml=React.createElement(TextareaElement,{label:element.Description})}break;case"select":if(element.Options.AllowMultiple){elementHtml=React.createElement(SelectElement,{label:element.Description,options:element.Options.Values,multiple:true})}else{elementHtml=React.createElement(SelectElement,{label:element.Description,options:element.Options.Values})}break;case"date":elementHtml=React.createElement(DateElement,{label:element.Description,minYear:element.Options.MinDate,maxYear:element.Options.MaxDate});break;case"numeric":elementHtml=React.createElement(NumericElement,{label:element.Description,min:element.Options.MinValue,max:element.Options.MaxValue});break;default:break}return React.createElement("div",null,elementHtml)}});var QuestionText=React.createClass({displayName:"QuestionText",getDefaultProps:function getDefaultProps(){return{inputLabel:"Question Text"}},onChange:function onChange(e){this.props.updateState({Description:e.target.value})},render:function render(){var errorMessage="";var errorClass="form-group";if(this.props.element.error&&this.props.element.error.questionText){errorMessage=React.createElement("font",{className:"form-error"},this.props.element.error.questionText);errorClass+=" has-error"}return React.createElement("div",{className:errorClass},React.createElement("label",{className:"col-sm-2 control-label"},this.props.inputLabel,": "),React.createElement("div",{className:"col-sm-6"},React.createElement("input",{className:"form-control col-xs-12",type:"text",id:"questionText",size:"75",value:this.props.element?this.props.element.Description:"",onChange:this.onChange}),errorMessage))}});var BasicOptions=React.createClass({displayName:"BasicOptions",onChange:function onChange(e){var questionName=e.target.value.trim().split(" ").join("_");this.props.updateState({Name:questionName})},render:function render(){var errorMessage="";var errorClass="form-group";if(this.props.element.error&&this.props.element.error.questionName){errorMessage=React.createElement("font",{className:"form-error"},this.props.element.error.questionName);errorClass+=" has-error"}return React.createElement("div",null,React.createElement("div",{className:errorClass},React.createElement("label",{className:"col-sm-2 control-label"},"Question Name: "),React.createElement("div",{className:"col-sm-6"},React.createElement("input",{className:"form-control",type:"text",id:"questionName",onChange:this.onChange,value:this.props.element?this.props.element.Name:""}),errorMessage)),React.createElement(QuestionText,{updateState:this.props.updateState,element:this.props.element}))}});var DropdownOptions=React.createClass({displayName:"DropdownOptions",getInitialState:function getInitialState(){return{option:""}},onChange:function onChange(e){this.setState({option:e.target.value})},addOption:function addOption(){var option=this.state.option.trim();if(option===""){var _temp=this.state.error?this.state.error:{};_temp.newSelectOption="Dropdown options cannot be empty!";this.setState({error:_temp});return}if(this.state.error){var _temp2=this.state.error;delete _temp2.newSelectOption;this.setState({error:_temp2})}var temp=Instrument.clone(this.props.element.Options);var key=Instrument.enumize(this.state.option);temp.Values[key]=this.state.option;this.props.updateState({Options:temp});this.state.option=""},resetOptions:function resetOptions(){var temp=Instrument.clone(this.props.element.Options);temp.Values={};this.props.updateState({Options:temp})},render:function render(){var multi="";var options=Instrument.clone(this.props.element.Options.Values);var errorMessage="";var dropdownClass="form-group";if(this.props.element.Options.AllowMultiple){multi="multiple"}if(this.state.error&&this.state.error.newSelectOption){errorMessage=React.createElement("span",{className:"form-error"},this.state.error.newSelectOption);dropdownClass+=" has-error"}return React.createElement("div",null,React.createElement(BasicOptions,{updateState:this.props.updateState,element:this.props.element}),React.createElement("div",{className:dropdownClass},React.createElement("label",{className:"col-sm-2 control-label"},"Dropdown Option: "),React.createElement("div",{className:"col-sm-3"},React.createElement("input",{className:"form-control",type:"text",id:"newSelectOption",value:this.state.option,onChange:this.onChange})),React.createElement("input",{className:"btn btn-default",type:"button",value:"Add option",onClick:this.addOption.bind(this,false)}),React.createElement("input",{className:"btn btn-default",type:"button",value:"Reset",onClick:this.resetOptions}),React.createElement("div",{className:"col-sm-6 col-sm-offset-2"},errorMessage)),React.createElement("div",{className:"form-group"},React.createElement("label",{className:"col-sm-2 control-label"},"Preview: "),React.createElement("div",{className:"col-sm-2"},React.createElement("select",{multiple:multi,id:"selectOptions",className:"form-control"},Object.keys(options).map(function(option,key){return React.createElement("option",{key},options[option])})))))}});var DateOptions=React.createClass({displayName:"DateOptions",getInitialState:function getInitialState(){return{dateFormat:{Date:"Standard Date",BasicDate:"Basic Date (does not include 'Not Answered' option)",MonthYear:"Month Year (does not include day of the month)"}}},componentDidMount:function componentDidMount(){this.props.element.Options.dateFormat=""},onChange:function onChange(e){var options=Instrument.clone(this.props.element.Options);if(e.target.id==="datemin"&&e.target.value.length>0){options.MinDate=e.target.value+"-01-01"}else if(e.target.id==="datemax"&&e.target.value.length>0){options.MaxDate=e.target.value+"-12-31"}else if(e.target.id==="dateFormat"){options.dateFormat=e.target.value}this.props.updateState({Options:options})},render:function render(){var minYear=this.props.element.Options.MinDate.split("-")[0];var maxYear=this.props.element.Options.MaxDate.split("-")[0];var dateOptionsClass="options form-group";var errorMessage="";var dateFormatOptions=this.state.dateFormat;if(this.props.element.error&&this.props.element.error.dateOption){errorMessage=React.createElement("span",{className:"form-error"},this.props.element.error.dateOption);dateOptionsClass+=" has-error"}return React.createElement("div",null,React.createElement(BasicOptions,{updateState:this.props.updateState,element:this.props.element}),React.createElement("div",{id:"dateoptions",className:dateOptionsClass},React.createElement("label",{className:"col-sm-2 control-label"},"Start year: "),React.createElement("div",{className:"col-sm-2"},React.createElement("input",{className:"form-control",type:"number",id:"datemin",min:"1900",max:"2100",value:minYear,onChange:this.onChange}),errorMessage),React.createElement("label",{className:"col-sm-2 control-label"},"End year: "),React.createElement("div",{className:"col-sm-2"},React.createElement("input",{className:"form-control",type:"number",id:"datemax",min:"1900",max:"2100",onChange:this.onChange,value:maxYear}))),React.createElement("div",{className:"form-group"},React.createElement("label",{className:"col-sm-2 control-label"},"Date Format: "),React.createElement("div",{className:"col-sm-6"},React.createElement("select",{id:"dateFormat",className:"form-control",onChange:this.onChange},Object.keys(dateFormatOptions).map(function(option,key){return React.createElement("option",{key,value:option},dateFormatOptions[option])})))))}});var NumericOptions=React.createClass({displayName:"NumericOptions",onChange:function onChange(e){var options=Instrument.clone(this.props.element.Options);if(e.target.id==="numericmin"){options.MinValue=parseInt(e.target.value,10)}else if(e.target.id==="numericmax"){options.MaxValue=parseInt(e.target.value,10)}this.props.updateState({Options:options})},render:function render(){var errorMessage="";var optionsClass="options form-group";if(this.props.element.error&&this.props.element.error.numeric){errorMessage=React.createElement("span",{className:"form-error"},this.props.element.error.numeric);optionsClass+="options form-group has-error"}return React.createElement("div",null,React.createElement(BasicOptions,{updateState:this.props.updateState,element:this.props.element}),React.createElement("div",{id:"numericoptions",className:optionsClass},React.createElement("label",{className:"col-sm-2 control-label"},"Min: "),React.createElement("div",{className:"col-sm-2"},React.createElement("input",{className:"form-control",type:"number",id:"numericmin",onChange:this.onChange,value:this.props.element.Options.MinValue})),React.createElement("label",{className:"col-sm-2 control-label"},"Max: "),React.createElement("div",{className:"col-sm-2"},React.createElement("input",{className:"form-control",type:"number",id:"numericmax",onChange:this.onChange,value:this.props.element.Options.MaxValue})),React.createElement("div",{className:"col-sm-offset-2 col-sm-10"},errorMessage)))}});var ListElements=React.createClass({displayName:"ListElements",selectType:function selectType(newId,newValue){var newState={selected:{id:newId,value:newValue}};var multi=false;var textSize="small";switch(newId){case"textarea":textSize="large";case"textbox":newState.Options={Type:textSize};break;case"multiselect":multi=true;case"dropdown":newState.Options={Values:{},AllowMultiple:multi};break;case"date":newState.Options={MinDate:"",MaxDate:""};break;case"numeric":newState.Options={MinValue:0,MaxValue:0};break;default:break}this.props.updateState(newState)},render:function render(){return React.createElement("div",{className:"form-group"},React.createElement("label",{htmlFor:"selected-input",className:"col-sm-2 control-label"},"Question Type:"),React.createElement("div",{className:"col-sm-4"},React.createElement("div",{className:"btn-group"},React.createElement("button",{id:"selected-input",type:"button",className:"btn btn-default dropdown-toggle","data-toggle":"dropdown"},React.createElement("span",{id:"search_concept"},this.props.value," "),React.createElement("span",{className:"caret"})),React.createElement("ul",{className:"dropdown-menu",role:"menu"},React.createElement("li",null,React.createElement("div",{className:"col-sm-12"},React.createElement("h5",{className:""},"Information"))),React.createElement("li",{onClick:this.selectType.bind(this,"header","Header")},React.createElement("a",{id:"header",className:"option",title:"Centered, header information"},"Header")),React.createElement("li",{onClick:this.selectType.bind(this,"label","Label")},React.createElement("a",{id:"label",className:"option",title:"Unemphasized display text"},"Label")),React.createElement("li",{onClick:this.selectType.bind(this,"score","Scored Field")},React.createElement("a",{id:"scored",className:"option",title:"Column which stores calculated data"},"Scored Field")),React.createElement("li",{className:"divider"}),React.createElement("li",null,React.createElement("div",{className:"col-sm-12"},React.createElement("h5",{className:""},"Data entry"))),React.createElement("li",{onClick:this.selectType.bind(this,"textbox","Textbox")},React.createElement("a",{id:"textbox",className:"option",title:"Text box for user data entry"},"Textbox")),React.createElement("li",{onClick:this.selectType.bind(this,"textarea","Textarea")},React.createElement("a",{id:"textarea",className:"option",title:"Larger text area for data entry"},"Textarea")),React.createElement("li",{onClick:this.selectType.bind(this,"dropdown","Dropdown")},React.createElement("a",{id:"dropdown",className:"option",title:"Dropdown menu for users to select data from"},"Dropdown")),React.createElement("li",{onClick:this.selectType.bind(this,"multiselect","Multiselect")},React.createElement("a",{id:"multiselect",className:"option",title:"Data entry where multiple options may be selected"},"Multiselect")),React.createElement("li",{onClick:this.selectType.bind(this,"date","Date")},React.createElement("a",{id:"date",className:"option",title:"User data entry of a date"},"Date")),React.createElement("li",{onClick:this.selectType.bind(this,"numeric","Numeric")},React.createElement("a",{id:"numeric",className:"option",title:"User data entry of a number"},"Numeric")),React.createElement("li",{className:"divider"}),React.createElement("li",null,React.createElement("div",{className:"col-sm-12"},React.createElement("h5",{className:""},"Formatting"))),React.createElement("li",{onClick:this.selectType.bind(this,"line","Blank Line")},React.createElement("a",{id:"line",className:"option",title:"Empty line"},"Blank Line")),React.createElement("li",{onClick:this.selectType.bind(this,"page-break","Page Break")},React.createElement("a",{id:"page-break",className:"option",title:"Start a new page"},"Page Break"))))))}});var AddElement=React.createClass({displayName:"AddElement",getInitialState:function getInitialState(){var state=void 0;if(this.props.element){state={Options:Instrument.clone(this.props.element.Options),Description:Instrument.clone(this.props.element.Description),Name:Instrument.clone(this.props.element.Name),selected:Instrument.clone(this.props.element.selected)}}else{state={Options:{},Description:"",Name:"",selected:{id:"",value:"Select One"}}}return state},updateState:function updateState(newState){this.setState(newState)},addQuestion:function addQuestion(){var selected=this.state.selected.id;var questionText=this.state.Description;var questionName=this.state.Name;var hasError=false;if(questionName&&questionName.indexOf("status")>-1){alert("Question name can't contain 'status' as part of the name!");return}if(!selected){alert("No element type selected");return}if(selected==="date"){var min=this.state.Options.MinDate;var max=this.state.Options.MaxDate;var minYear=parseInt(min,10);var maxYear=parseInt(max,10);var minDate=Date.parse(min);var maxDate=Date.parse(max);if(isNaN(minDate)&&min!==""||isNaN(maxDate)&&max!==""){var temp=this.state.error?this.state.error:{};temp.dateOption="Invalid date provided";this.setState({error:temp});hasError=true}if(minDate>maxDate&&min!==""&&max!==""){var _temp3=this.state.error?this.state.error:{};_temp3.dateOption="End year append before start year";this.setState({error:_temp3});hasError=true}if(minYear>9999||minYear<1e3||maxYear>9999||maxYear<1e3){var _temp4=this.state.error?this.state.error:{};_temp4.dateOption="The year must have exactly 4 digits. Please choose an integer number between 1000 and 9999.";this.setState({error:_temp4});hasError=true}if(!hasError&&this.state.error){var _temp5=this.state.error;delete _temp5.dateOption;this.setState({error:_temp5})}}if(selected==="numeric"){var _min=this.state.Options.MinValue;var _max=this.state.Options.MaxValue;if(_min>=_max){var _temp6=this.state.error?this.state.error:{};_temp6.numeric="Max value must be larger than min value";this.setState({error:_temp6});hasError=true}if(!hasError&&this.state.error){var _temp7=this.state.error;delete _temp7.numeric;this.setState({error:_temp7})}}if(questionText===""&&selected!=="line"){var _temp8=this.state.error?this.state.error:{};if(selected==="page-break"){_temp8.questionText="Must use question text as page header"}else{_temp8.questionText="No question text specified"}this.setState({error:_temp8});hasError=true}if(!hasError&&this.state.error){var _temp9=this.state.error;delete _temp9.questionText;this.setState({error:_temp9})}if(questionName===""&&selected!=="header"&&selected!=="label"&&selected!=="line"&&selected!=="page-break"){var _temp10=this.state.error?this.state.error:{};_temp10.questionName="Must specifiy name for database to save value into";this.setState({error:_temp10});hasError=true}else if(this.state.error){var _temp11=this.state.error;delete _temp11.questionName;this.setState({error:_temp11})}if(hasError){return}switch(selected){case"header":case"label":questionName="";break;case"textbox":case"textarea":selected="text";break;case"dropdown":case"multiselect":selected="select";break;case"page-break":this.props.addPage(questionText);return;default:break}delete this.state.error;var element={Type:selected,Description:questionText,Name:questionName,Options:this.state.Options,selected:this.state.selected};if(typeof this.props.index==="undefined"){hasError=!this.props.updateQuestions(element)}else{hasError=!this.props.updateQuestions(element,this.props.index)}if(hasError){this.setState(function(state){var temp=state.error?state.error:{};temp.questionName="Duplicate question name";return{error:temp}})}},addOption:function addOption(multi){this.setState(function(state){var temp=state.options;var option=multi?$("#newmultiSelectOption").val():$("#newSelectOption").val();temp.push(option);return{options:temp}})},resetOptions:function resetOptions(){this.setState({options:[]})},render:function render(){var questionInput=void 0;var header="";var buttons=void 0;switch(this.state.selected.id){case"header":case"label":questionInput=React.createElement(QuestionText,{updateState:this.updateState,element:this.state});break;case"page-break":questionInput=React.createElement(QuestionText,{updateState:this.updateState,element:this.state,inputLabel:"Page Name"});break;case"score":case"textbox":case"textarea":questionInput=React.createElement(BasicOptions,{updateState:this.updateState,element:this.state});break;case"multiselect":case"dropdown":questionInput=React.createElement(DropdownOptions,{updateState:this.updateState,element:this.state});break;case"date":questionInput=React.createElement(DateOptions,{updateState:this.updateState,element:this.state});break;case"numeric":questionInput=React.createElement(NumericOptions,{updateState:this.updateState,element:this.state});break;default:break}if(this.props.element){buttons=React.createElement("input",{className:"btn btn-default",type:"button",value:"Edit Row",onClick:this.addQuestion})}else{header=React.createElement("h2",null,"Add Question");buttons=React.createElement("input",{className:"btn btn-default",type:"button",value:"Add Row",onClick:this.addQuestion})}return React.createElement("div",{className:"col-xs-12"},header,React.createElement("div",{className:"form-horizontal",role:"form"},React.createElement(ListElements,{updateState:this.updateState,value:this.state.selected.value}),questionInput,React.createElement("div",{className:"form-group"},React.createElement("div",{className:"col-sm-offset-2 col-sm-10"},buttons))))}});window.LorisElement=LorisElement;window.QuestionText=QuestionText;window.BasicOptions=BasicOptions;window.DropdownOptions=DropdownOptions;window.DateOptions=DateOptions;window.NumericOptions=NumericOptions;window.ListElements=ListElements;window.AddElement=AddElement;exports.default={LorisElement,QuestionText,BasicOptions,DropdownOptions,DateOptions,NumericOptions,ListElements,AddElement}}});
//# sourceMappingURL=react.questions.js.map
!function(e){function n(a){if(t[a])return t[a].exports;var s=t[a]={exports:{},id:a,loaded:!1};return e[a].call(s.exports,s,s.exports,n),s.loaded=!0,s.exports}var t={};return n.m=e,n.c=t,n.p="",n(0)}({0:function(e,n,t){t(1)(t(32))},1:function(e,n){e.exports=function(e){"undefined"!=typeof execScript?execScript(e):eval.call(null,e)}},32:function(e,n){e.exports="/**\n *\tThis file contains the React classes for instrument builder\n * \tmodule. It is used to add and edit questions in the instrument\n *\tbuilder.\n */\n\n/*\n * Note: This is a wrapper for Form.js (Only used in instrument builder)\n *\n * This is the React class for a LORIS element. It takes\n * in an element and render's the HTML based on its type\n *\n */\nLorisElement = React.createClass({\n    displayName: 'LorisElement',\n\n    render: function render() {\n        var element = this.props.element;\n        var elementHtml = '';\n        switch (element.Type) {\n            case 'header':\n                elementHtml = React.createElement(\n                    'h2',\n                    null,\n                    element.Description\n                );\n                break;\n            case 'label':\n                elementHtml = React.createElement(\n                    'p',\n                    null,\n                    element.Description\n                );\n                break;\n            case 'score':\n                elementHtml = React.createElement(StaticElement, { text: 0, label: element.Description });\n\n                break;\n            case 'text':\n                if (element.Options.Type === 'small') {\n                    elementHtml = React.createElement(TextboxElement, { label: element.Description });\n                } else {\n                    elementHtml = React.createElement(TextareaElement, { label: element.Description });\n                }\n                break;\n            case 'select':\n                if (element.Options.AllowMultiple) {\n                    elementHtml = React.createElement(SelectElement, { label: element.Description,\n                        options: element.Options.Values,\n                        multiple: true });\n                } else {\n                    elementHtml = React.createElement(SelectElement, { label: element.Description,\n                        options: element.Options.Values });\n                }\n                break;\n            case 'date':\n                elementHtml = React.createElement(DateElement, {\n                    label: element.Description,\n                    minYear: element.Options.MinDate,\n                    maxYear: element.Options.MaxDate\n                });\n                break;\n            case 'numeric':\n                elementHtml = React.createElement(NumericElement, {\n                    label: element.Description,\n                    min: element.Options.MinValue,\n                    max: element.Options.MaxValue\n                });\n                break;\n            default:\n                break;\n        }\n        return React.createElement(\n            'div',\n            null,\n            elementHtml\n        );\n    }\n});\n\n/*\n *\tThis is the React class for the question text input\n */\nQuestionText = React.createClass({\n    displayName: 'QuestionText',\n\n    // Keep track of the current input\n    onChange: function onChange(e) {\n        this.props.updateState({ Description: e.target.value });\n    },\n    // Render the HTML\n    render: function render() {\n        var errorMessage = '',\n            errorClass = 'form-group';\n        if (this.props.element.error && this.props.element.error.questionText) {\n            // If an error is present, display the error\n            errorMessage = React.createElement(\n                'font',\n                { className: 'form-error' },\n                this.props.element.error.questionText\n            );\n            errorClass += \" has-error\";\n        }\n        return React.createElement(\n            'div',\n            { className: errorClass },\n            React.createElement(\n                'label',\n                { className: 'col-sm-2 control-label' },\n                'Question Text: '\n            ),\n            React.createElement(\n                'div',\n                { className: 'col-sm-6' },\n                React.createElement('input', { className: 'form-control col-xs-12',\n                    type: 'text', id: 'questionText',\n                    size: '75',\n                    value: this.props.element ? this.props.element.Description : '',\n                    onChange: this.onChange\n                }),\n                errorMessage\n            )\n        );\n    }\n});\n\n/*\n *\tThis is the React class for the question name input\n */\nBasicOptions = React.createClass({\n    displayName: 'BasicOptions',\n\n    // Keep track of the current input\n    onChange: function onChange(e) {\n        // replace whitespaces with underscores\n        var questionName = e.target.value.trim().split(' ').join('_');\n        this.props.updateState({ Name: questionName });\n    },\n    // Render the HTML\n    render: function render() {\n        var errorMessage = '',\n            errorClass = 'form-group';\n        if (this.props.element.error && this.props.element.error.questionName) {\n            // If an error is present, display the error\n            errorMessage = React.createElement(\n                'font',\n                { className: 'form-error' },\n                this.props.element.error.questionName\n            );\n            errorClass += \" has-error\";\n        }\n        return React.createElement(\n            'div',\n            null,\n            React.createElement(\n                'div',\n                { className: errorClass },\n                React.createElement(\n                    'label',\n                    { className: 'col-sm-2 control-label' },\n                    'Question Name: '\n                ),\n                React.createElement(\n                    'div',\n                    { className: 'col-sm-6' },\n                    React.createElement('input', { className: 'form-control',\n                        type: 'text', id: 'questionName',\n                        onChange: this.onChange,\n                        value: this.props.element ? this.props.element.Name : ''\n                    }),\n                    errorMessage\n                )\n            ),\n            React.createElement(QuestionText, { updateState: this.props.updateState, element: this.props.element })\n        );\n    }\n});\n\n/*\n *\tThis is the React class for the Dropdown options\n */\nDropdownOptions = React.createClass({\n    displayName: 'DropdownOptions',\n\n    // Keep track the current option input\n    getInitialState: function getInitialState() {\n        return {\n            option: ''\n        };\n    },\n    onChange: function onChange(e) {\n        this.setState({\n            option: e.target.value\n        });\n    },\n    // Add an option to the element\n    addOption: function addOption() {\n        var option = this.state.option.trim();\n\n        // Check for empty options\n        if (option == \"\") {\n            var temp = this.state.error ? this.state.error : {};\n            temp.newSelectOption = \"Dropdown options cannot be empty!\";\n            this.setState({\n                error: temp\n            });\n            return;\n        }\n\n        // Remove error if corrected\n        if (this.state.error) {\n            var temp = this.state.error;\n            delete temp.newSelectOption;\n            this.setState({\n                error: temp\n            });\n        }\n\n        // add to option list\n        var temp = Instrument.clone(this.props.element.Options);\n        var key = Instrument.Enumize(this.state.option);\n        temp.Values[key] = this.state.option;\n        this.props.updateState({ Options: temp });\n\n        // clear input field\n        this.state.option = \"\";\n    },\n    // Reset the dropdown options\n    resetOptions: function resetOptions() {\n        temp = Instrument.clone(this.props.element.Options);\n        temp.Values = {};\n        this.props.updateState({ Options: temp });\n    },\n    // Render the HTML\n    render: function render() {\n\n        var multi = '';\n        var options = Instrument.clone(this.props.element.Options.Values);\n        var errorMessage = '';\n        var dropdownClass = 'form-group';\n\n        // Set the select option type\n        if (this.props.element.Options.AllowMultiple) {\n            multi = \"multiple\";\n        }\n\n        // If an error is present, display the error\n        if (this.state.error && this.state.error.newSelectOption) {\n            errorMessage = React.createElement(\n                'span',\n                { className: 'form-error' },\n                this.state.error.newSelectOption\n            );\n            dropdownClass += \" has-error\";\n        }\n\n        return React.createElement(\n            'div',\n            null,\n            React.createElement(BasicOptions, { updateState: this.props.updateState, element: this.props.element }),\n            React.createElement(\n                'div',\n                { className: dropdownClass },\n                React.createElement(\n                    'label',\n                    { className: 'col-sm-2 control-label' },\n                    'Dropdown Option: '\n                ),\n                React.createElement(\n                    'div',\n                    { className: 'col-sm-3' },\n                    React.createElement('input', { className: 'form-control', type: 'text', id: 'newSelectOption', value: this.state.option, onChange: this.onChange })\n                ),\n                React.createElement('input', { className: 'btn btn-default', type: 'button', value: 'Add option', onClick: this.addOption.bind(this, false) }),\n                React.createElement('input', { className: 'btn btn-default', type: 'button', value: 'Reset', onClick: this.resetOptions }),\n                React.createElement(\n                    'div',\n                    { className: 'col-sm-6 col-sm-offset-2' },\n                    errorMessage\n                )\n            ),\n            React.createElement(\n                'div',\n                { className: 'form-group' },\n                React.createElement(\n                    'label',\n                    { className: 'col-sm-2 control-label' },\n                    'Preview: '\n                ),\n                React.createElement(\n                    'div',\n                    { className: 'col-sm-2' },\n                    React.createElement(\n                        'select',\n                        { multiple: multi, id: 'selectOptions', className: 'form-control' },\n                        Object.keys(options).map(function (option) {\n                            return React.createElement(\n                                'option',\n                                null,\n                                options[option]\n                            );\n                        })\n                    )\n                )\n            )\n        );\n    }\n});\n\n/*\n *\tThis is the React class for the date options\n */\nDateOptions = React.createClass({\n    displayName: 'DateOptions',\n\n    // Initilize\n    getInitialState: function getInitialState() {\n        return {\n            dateFormat: {\n                \"Date\": \"Standard Date\",\n                \"BasicDate\": \"Basic Date (does not include 'Not Answered' option)\",\n                \"MonthYear\": \"Month Year (does not include day of the month)\"\n            }\n        };\n    },\n    componentDidMount: function componentDidMount() {\n        this.props.element.Options.dateFormat = \"\";\n    },\n    // Keep track of the inputed years\n    onChange: function onChange(e) {\n        var options = Instrument.clone(this.props.element.Options);\n        if (e.target.id === 'datemin' && e.target.value.length > 0) {\n            options.MinDate = e.target.value + \"-01-01\";\n        } else if (e.target.id === 'datemax' && e.target.value.length > 0) {\n            options.MaxDate = e.target.value + \"-12-31\";\n        } else if (e.target.id === 'dateFormat') {\n            options.dateFormat = e.target.value;\n        }\n        this.props.updateState({ Options: options });\n    },\n    // Render the HTML\n    render: function render() {\n        // Truncate off the month and day from the date to only have the year.\n        var minYear = this.props.element.Options.MinDate.split('-')[0],\n            maxYear = this.props.element.Options.MaxDate.split('-')[0];\n\n        var dateOptionsClass = 'options form-group',\n            errorMessage = '';\n\n        var dateFormatOptions = this.state.dateFormat;\n\n        if (this.props.element.error && this.props.element.error.dateOption) {\n            // If an error is present, display the error\n            errorMessage = React.createElement(\n                'span',\n                { className: 'form-error' },\n                this.props.element.error.dateOption\n            );\n            dateOptionsClass += \" has-error\";\n        }\n\n        return React.createElement(\n            'div',\n            null,\n            React.createElement(BasicOptions, { updateState: this.props.updateState, element: this.props.element }),\n            React.createElement(\n                'div',\n                { id: 'dateoptions', className: dateOptionsClass },\n                React.createElement(\n                    'label',\n                    { className: 'col-sm-2 control-label' },\n                    'Start year: '\n                ),\n                React.createElement(\n                    'div',\n                    { className: 'col-sm-2' },\n                    React.createElement('input', { className: 'form-control', type: 'number', id: 'datemin', min: '1900', max: '2100', value: minYear, onChange: this.onChange }),\n                    errorMessage\n                ),\n                React.createElement(\n                    'label',\n                    { className: 'col-sm-2 control-label' },\n                    'End year: '\n                ),\n                React.createElement(\n                    'div',\n                    { className: 'col-sm-2' },\n                    React.createElement('input', { className: 'form-control', type: 'number', id: 'datemax', min: '1900', max: '2100', onChange: this.onChange, value: maxYear })\n                )\n            ),\n            React.createElement(\n                'div',\n                { className: 'form-group' },\n                React.createElement(\n                    'label',\n                    { className: 'col-sm-2 control-label' },\n                    'Date Format: '\n                ),\n                React.createElement(\n                    'div',\n                    { className: 'col-sm-6' },\n                    React.createElement(\n                        'select',\n                        { id: 'dateFormat', className: 'form-control', onChange: this.onChange },\n                        Object.keys(dateFormatOptions).map(function (option) {\n                            return React.createElement(\n                                'option',\n                                { value: option },\n                                dateFormatOptions[option]\n                            );\n                        })\n                    )\n                )\n            )\n        );\n    }\n});\n\n/*\n *\tThis is the React class for the numeric options\n */\nNumericOptions = React.createClass({\n    displayName: 'NumericOptions',\n\n    // Keep track of the inputed numbers, casting them to\n    // interger values.\n    onChange: function onChange(e) {\n        var options = Instrument.clone(this.props.element.Options);\n\n        if (e.target.id === 'numericmin') {\n            options.MinValue = parseInt(e.target.value);\n        } else if (e.target.id === 'numericmax') {\n            options.MaxValue = parseInt(e.target.value);\n        }\n        this.props.updateState({ Options: options });\n    },\n    // Render the HTML\n    render: function render() {\n        var errorMessage = '';\n        var optionsClass = 'options form-group';\n\n        // If an error is present, display the error\n        if (this.props.element.error && this.props.element.error.numeric) {\n            errorMessage = React.createElement(\n                'span',\n                { className: 'form-error' },\n                this.props.element.error.numeric\n            );\n            optionsClass += \"options form-group has-error\";\n        }\n\n        return React.createElement(\n            'div',\n            null,\n            React.createElement(BasicOptions, { updateState: this.props.updateState, element: this.props.element }),\n            React.createElement(\n                'div',\n                { id: 'numericoptions', className: optionsClass },\n                React.createElement(\n                    'label',\n                    { className: 'col-sm-2 control-label' },\n                    'Min: '\n                ),\n                React.createElement(\n                    'div',\n                    { className: 'col-sm-2' },\n                    React.createElement('input', { className: 'form-control', type: 'number', id: 'numericmin', onChange: this.onChange, value: this.props.element.Options.MinValue })\n                ),\n                React.createElement(\n                    'label',\n                    { className: 'col-sm-2 control-label' },\n                    'Max: '\n                ),\n                React.createElement(\n                    'div',\n                    { className: 'col-sm-2' },\n                    React.createElement('input', { className: 'form-control', type: 'number', id: 'numericmax', onChange: this.onChange, value: this.props.element.Options.MaxValue })\n                ),\n                React.createElement(\n                    'div',\n                    { className: 'col-sm-offset-2 col-sm-10' },\n                    errorMessage\n                )\n            )\n        );\n    }\n});\n\n/*\n *\tThis is the React class for the dropdown for the\n * \tdifferent question types.\n */\nListElements = React.createClass({\n    displayName: 'ListElements',\n\n    // Set the desired question type\n    selectType: function selectType(newId, newValue) {\n        var newState = {\n            selected: {\n                id: newId,\n                value: newValue\n            }\n        },\n            multi = false,\n            textSize = 'small';\n        // Set the options for the desired type\n        switch (newId) {\n            case 'textarea':\n                textSize = 'large';\n            case 'textbox':\n                newState.Options = {\n                    Type: textSize\n                };\n                break;\n            case 'multiselect':\n                multi = true;\n            case 'dropdown':\n                newState.Options = {\n                    Values: {},\n                    AllowMultiple: multi\n                };\n                break;\n            case 'date':\n                newState.Options = {\n                    MinDate: '',\n                    MaxDate: ''\n                };\n                break;\n            case 'numeric':\n                newState.Options = {\n                    MinValue: 0,\n                    MaxValue: 0\n                };\n                break;\n        };\n        this.props.updateState(newState);\n    },\n    // Render the HTML\n    render: function render() {\n        return React.createElement(\n            'div',\n            { className: 'form-group' },\n            React.createElement(\n                'label',\n                { 'for': 'selected-input', className: 'col-sm-2 control-label' },\n                'Question Type:'\n            ),\n            React.createElement(\n                'div',\n                { className: 'col-sm-4' },\n                React.createElement(\n                    'div',\n                    { className: 'btn-group' },\n                    React.createElement(\n                        'button',\n                        { id: 'selected-input', type: 'button', className: 'btn btn-default dropdown-toggle', 'data-toggle': 'dropdown' },\n                        React.createElement(\n                            'span',\n                            { id: 'search_concept' },\n                            this.props.value,\n                            ' '\n                        ),\n                        React.createElement('span', { className: 'caret' })\n                    ),\n                    React.createElement(\n                        'ul',\n                        { className: 'dropdown-menu', role: 'menu' },\n                        React.createElement(\n                            'li',\n                            null,\n                            React.createElement(\n                                'div',\n                                { className: 'col-sm-12' },\n                                React.createElement(\n                                    'h5',\n                                    { className: '' },\n                                    'Information'\n                                )\n                            )\n                        ),\n                        React.createElement(\n                            'li',\n                            { onClick: this.selectType.bind(this, \"header\", \"Header\") },\n                            React.createElement(\n                                'a',\n                                { id: 'header', className: 'option', title: 'Centered, header information' },\n                                'Header'\n                            )\n                        ),\n                        React.createElement(\n                            'li',\n                            { onClick: this.selectType.bind(this, \"label\", \"Label\") },\n                            React.createElement(\n                                'a',\n                                { id: 'label', className: 'option', title: 'Unemphasized display text' },\n                                'Label'\n                            )\n                        ),\n                        React.createElement(\n                            'li',\n                            { onClick: this.selectType.bind(this, \"score\", \"Scored Field\") },\n                            React.createElement(\n                                'a',\n                                { id: 'scored', className: 'option', title: 'Column which stores calculated data' },\n                                'Scored Field'\n                            )\n                        ),\n                        React.createElement('li', { className: 'divider' }),\n                        React.createElement(\n                            'li',\n                            null,\n                            React.createElement(\n                                'div',\n                                { className: 'col-sm-12' },\n                                React.createElement(\n                                    'h5',\n                                    { className: '' },\n                                    'Data entry'\n                                )\n                            )\n                        ),\n                        React.createElement(\n                            'li',\n                            { onClick: this.selectType.bind(this, \"textbox\", \"Textbox\") },\n                            React.createElement(\n                                'a',\n                                { id: 'textbox', className: 'option', title: 'Text box for user data entry' },\n                                'Textbox'\n                            )\n                        ),\n                        React.createElement(\n                            'li',\n                            { onClick: this.selectType.bind(this, \"textarea\", \"Textarea\") },\n                            React.createElement(\n                                'a',\n                                { id: 'textarea', className: 'option', title: 'Larger text area for data entry' },\n                                'Textarea'\n                            )\n                        ),\n                        React.createElement(\n                            'li',\n                            { onClick: this.selectType.bind(this, \"dropdown\", \"Dropdown\") },\n                            React.createElement(\n                                'a',\n                                { id: 'dropdown', className: 'option', title: 'Dropdown menu for users to select data from' },\n                                'Dropdown'\n                            )\n                        ),\n                        React.createElement(\n                            'li',\n                            { onClick: this.selectType.bind(this, \"multiselect\", \"Multiselect\") },\n                            React.createElement(\n                                'a',\n                                { id: 'multiselect', className: 'option', title: 'Data entry where multiple options may be selected' },\n                                'Multiselect'\n                            )\n                        ),\n                        React.createElement(\n                            'li',\n                            { onClick: this.selectType.bind(this, \"date\", \"Date\") },\n                            React.createElement(\n                                'a',\n                                { id: 'date', className: 'option', title: 'User data entry of a date' },\n                                'Date'\n                            )\n                        ),\n                        React.createElement(\n                            'li',\n                            { onClick: this.selectType.bind(this, \"numeric\", \"Numeric\") },\n                            React.createElement(\n                                'a',\n                                { id: 'numeric', className: 'option', title: 'User data entry of a number' },\n                                'Numeric'\n                            )\n                        ),\n                        React.createElement('li', { className: 'divider' }),\n                        React.createElement(\n                            'li',\n                            null,\n                            React.createElement(\n                                'div',\n                                { className: 'col-sm-12' },\n                                React.createElement(\n                                    'h5',\n                                    { className: '' },\n                                    'Formatting'\n                                )\n                            )\n                        ),\n                        React.createElement(\n                            'li',\n                            { onClick: this.selectType.bind(this, \"line\", \"Blank Line\") },\n                            React.createElement(\n                                'a',\n                                { id: 'line', className: 'option', title: 'Empty line' },\n                                'Blank Line'\n                            )\n                        ),\n                        React.createElement(\n                            'li',\n                            { onClick: this.selectType.bind(this, \"page-break\", \"Page Break\") },\n                            React.createElement(\n                                'a',\n                                { id: 'page-break', className: 'option', title: 'Start a new page' },\n                                'Page Break'\n                            )\n                        )\n                    )\n                )\n            )\n        );\n    }\n});\n\n/*\n *\tThis is the React class for adding a new element or\n * \tediting an exsiting one\n */\nAddElement = React.createClass({\n    displayName: 'AddElement',\n\n    // Keep track of the current element state\n    getInitialState: function getInitialState() {\n        var state;\n        if (this.props.element) {\n            // Editing an element, set to elements state\n            state = {\n                Options: Instrument.clone(this.props.element.Options),\n                Description: Instrument.clone(this.props.element.Description),\n                Name: Instrument.clone(this.props.element.Name),\n                selected: Instrument.clone(this.props.element.selected)\n            };\n        } else {\n            state = {\n                Options: {},\n                Description: '',\n                Name: '',\n                selected: {\n                    id: '',\n                    value: 'Select One'\n                }\n            };\n        }\n        return state;\n    },\n    // Update element state\n    updateState: function updateState(newState) {\n        this.setState(newState);\n    },\n    // Add a question to the buildPane\n    addQuestion: function addQuestion() {\n        var selected = this.state.selected.id,\n            questionText = this.state.Description,\n            questionName = this.state.Name,\n            hasError = false,\n            element;\n\n        if (questionName && questionName.indexOf('status') > -1) {\n            alert(\"Question name can't contain 'status' as part of the name!\");\n            return;\n        }\n\n        if (!selected) {\n            // Error, no element selected, alert the user and return\n            alert(\"No element type selected\");\n            return;\n        }\n\n        if (selected == 'date') {\n            var min = this.state.Options.MinDate,\n                max = this.state.Options.MaxDate;\n\n            var minDate = Date.parse(min),\n                maxDate = Date.parse(max);\n\n            if (isNaN(minDate) && min != '' || isNaN(maxDate) && max != '') {\n                var temp = this.state.error ? this.state.error : {};\n\n                temp.dateOption = \"Invalid date provided\";\n                this.setState({\n                    error: temp\n                });\n                hasError = true;\n            }\n\n            if (minDate > maxDate && min != '' && max != '') {\n                var temp = this.state.error ? this.state.error : {};\n\n                temp.dateOption = \"End year append befor start year\";\n                this.setState({\n                    error: temp\n                });\n                hasError = true;\n            }\n\n            if (!hasError && this.state.error) {\n                var temp = this.state.error;\n                delete temp.dateOption;\n                this.setState({\n                    error: temp\n                });\n            }\n        }\n\n        // Checking for error on numeric field\n        if (selected == 'numeric') {\n            var min = this.state.Options.MinValue;\n            var max = this.state.Options.MaxValue;\n\n            if (min >= max) {\n                var temp = this.state.error ? this.state.error : {};\n                temp.numeric = \"Max value must be larger than min value\";\n                this.setState({\n                    error: temp\n                });\n                hasError = true;\n            }\n\n            // If error corrected, remove error message and error\n            if (!hasError && this.state.error) {\n                var temp = this.state.error;\n                delete temp.numeric;\n                this.setState({\n                    error: temp\n                });\n            }\n        }\n\n        if (questionText == '' && selected != 'line') {\n            // Error, question text is required. Set the element error flag\n            // for the questionText with message. Set the hasError flag\n            var temp = this.state.error ? this.state.error : {};\n            if (selected == 'page-break') {\n                temp.questionText = \"Must use question text as page header\";\n            } else {\n                temp.questionText = \"No question text specified\";\n            }\n            this.setState({\n                error: temp\n            });\n            hasError = true;\n        }\n\n        if (!hasError && this.state.error) {\n            // No error, remove the elememt's questionText error flag\n            // if set\n            var temp = this.state.error;\n            delete temp.questionText;\n            this.setState({\n                error: temp\n            });\n        }\n\n        if (questionName == '' && selected != \"header\" && selected != \"label\" && selected != 'line' && selected != 'page-break') {\n            // Error, question name is needed for the desired type. Set the element error flag\n            // for the questionName with message. Set the hasError flag\n            var temp = this.state.error ? this.state.error : {};\n            temp.questionName = \"Must specifiy name for database to save value into\";\n            this.setState({\n                error: temp\n            });\n            hasError = true;\n        } else if (this.state.error) {\n            // No error, remove the elememt's questionName error flag\n            // if set\n            var temp = this.state.error;\n            delete temp.questionName;\n            this.setState({\n                error: temp\n            });\n        }\n        if (hasError) {\n            // An error is present, return\n            return;\n        }\n        // Setup the desired element to be added\n        switch (selected) {\n            case 'header':\n            case 'label':\n                questionName = '';\n                break;\n            case 'textbox':\n            case 'textarea':\n                selected = 'text';\n                break;\n            case 'dropdown':\n            case 'multiselect':\n                selected = 'select';\n                break;\n            case 'page-break':\n                // If page-break, add new page to the buildPane\n                // element list\n                this.props.addPage(questionText);\n                return;\n        }\n        // Remove all error flags\n        delete this.state.error;\n        var element = {\n            Type: selected,\n            Description: questionText,\n            Name: questionName,\n            Options: this.state.Options,\n            selected: this.state.selected\n        };\n\n        // Add/Update the Page's element array. The updateQuestion returns true\n        // if element was added/updated, false if the element name already exists.\n        if (typeof this.props.index !== 'undefined') {\n            // If editing, supply updateQuestion with the elements index in the\n            // Page's element array.\n            hasError = !this.props.updateQuestions(element, this.props.index);\n        } else {\n            hasError = !this.props.updateQuestions(element);\n        }\n        if (hasError) {\n            // Error, element name already exists. Set the element error flag\n            // for the questionName with message.\n            this.setState(function (state) {\n                var temp = state.error ? state.error : {};\n                temp.questionName = \"Duplicate question name\";\n                return {\n                    error: temp\n                };\n            });\n        }\n    },\n    // Add an option to the options array\n    addOption: function addOption(multi) {\n        // Use a function to update the state to enqueue an atomic\n        // update that consults the previous value of state before\n        // setting any values\n        this.setState(function (state) {\n            var temp = state.options,\n                option = multi ? $(\"#newmultiSelectOption\").val() : $(\"#newSelectOption\").val();\n            temp.push(option);\n            return {\n                options: temp\n            };\n        });\n    },\n    // Reset the options array\n    resetOptions: function resetOptions() {\n        this.setState({\n            options: []\n        });\n    },\n    // Render the HTML\n    render: function render() {\n        var questionInput,\n            multi = false,\n            options,\n            header = '',\n            buttons;\n        // Set the inputs to display based on the desired element type\n        switch (this.state.selected.id) {\n            case 'header':\n            case 'label':\n            case 'page-break':\n                questionInput = React.createElement(QuestionText, { updateState: this.updateState, element: this.state });\n                break;\n            case 'score':\n            case 'textbox':\n            case 'textarea':\n                questionInput = React.createElement(BasicOptions, { updateState: this.updateState, element: this.state });\n                break;\n            case 'multiselect':\n            case 'dropdown':\n                questionInput = React.createElement(DropdownOptions, { updateState: this.updateState, element: this.state });\n                break;\n            case 'date':\n                questionInput = React.createElement(DateOptions, { updateState: this.updateState, element: this.state });\n                break;\n            case 'numeric':\n                questionInput = React.createElement(NumericOptions, { updateState: this.updateState, element: this.state });\n                break;\n            case 'defualt':\n                break;\n        }\n        // Set the button/header based on whether you are editing or adding an element.\n        if (this.props.element) {\n            buttons = React.createElement('input', { className: 'btn btn-default', type: 'button', value: 'Edit Row', onClick: this.addQuestion });\n        } else {\n            header = React.createElement(\n                'h2',\n                null,\n                'Add Question'\n            );\n            buttons = React.createElement('input', { className: 'btn btn-default', type: 'button', value: 'Add Row', onClick: this.addQuestion });\n        }\n        return React.createElement(\n            'div',\n            { className: 'col-xs-12' },\n            header,\n            React.createElement(\n                'div',\n                { className: 'form-horizontal', role: 'form' },\n                React.createElement(ListElements, { updateState: this.updateState, value: this.state.selected.value }),\n                questionInput,\n                React.createElement(\n                    'div',\n                    { className: 'form-group' },\n                    React.createElement(\n                        'div',\n                        { className: 'col-sm-offset-2 col-sm-10' },\n                        buttons\n                    )\n                )\n            )\n        );\n    }\n});";
}});
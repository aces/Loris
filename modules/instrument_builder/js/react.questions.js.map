{"version":3,"sources":["../jsx/react.questions.js"],"names":[],"mappings":"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","file":"react.questions.js","sourcesContent":["/**\n *\tThis file contains the React classes for instrument builder\n * \tmodule. It is used to add and edit questions in the instrument\n *\tbuilder.\n */\n\n/*\n *\tThis is the React class for the question text input\n */\nQuestionText = React.createClass({\n    // Keep track of the current input\n    onChange: function(e){\n        this.props.updateState({Description: e.target.value});\n    },\n    // Render the HTML\n    render: function () {\n        var errorMessage = '',\n            errorClass = 'form-group';\n        if (this.props.element.error && this.props.element.error.questionText) {\n            // If an error is present, display the error\n            errorMessage = (<font className=\"form-error\">{this.props.element.error.questionText}</font>);\n            errorClass += \" has-error\";\n        }\n        return (\n            <div className={errorClass}>\n                <label className=\"col-sm-2 control-label\">Question Text: </label>\n                <div className=\"col-sm-6\">\n                    <input className=\"form-control col-xs-12\"\n                        type=\"text\" id=\"questionText\"\n                        size=\"75\"\n                        value={this.props.element ? this.props.element.Description : ''}\n                        onChange={this.onChange}\n                    />\n                    {errorMessage}\n                </div>\n            </div>\n        )\n    }\n});\n\n/*\n *\tThis is the React class for the question name input\n */\nBasicOptions = React.createClass({\n    // Keep track of the current input\n    onChange: function(e){\n        this.props.updateState({Name: e.target.value});\n    },\n    // Render the HTML\n    render: function () {\n        var errorMessage = '',\n            errorClass = 'form-group';\n        if (this.props.element.error && this.props.element.error.questionName) {\n            // If an error is present, display the error\n            errorMessage = (<font className=\"form-error\">{this.props.element.error.questionName}</font>);\n            errorClass += \" has-error\";\n        }\n        return (\n            <div>\n                <div className={errorClass}>\n                    <label className=\"col-sm-2 control-label\">Question Name: </label>\n                    <div className=\"col-sm-6\">\n                        <input className=\"form-control\"\n                            type=\"text\" id=\"questionName\"\n                            onChange={this.onChange}\n                            value={this.props.element ? this.props.element.Name : ''}\n                        />\n                        {errorMessage}\n                    </div>\n                </div>\n                <QuestionText updateState={this.props.updateState} element={this.props.element} />\n            </div>\n        )\n    }\n});\n\n/*\n *\tThis is the React class for the Dropdown options\n */\nDropdownOptions = React.createClass({\n    // Keep track the current option input\n    getInitialState: function() {\n        return {\n            option: ''\n        }\n    },\n    onChange: function(e){\n        this.setState({\n            option: e.target.value\n        });\n    },\n    // Add an option to the element\n    addOption: function(){\n        var temp = this.props.element.Options,\n            key = Instrument.Enumize(this.state.option);\n            temp.Values[key] = this.state.option;\n            this.props.updateState({Options: temp});\n    },\n    // Reset the dropdown options\n    resetOptions: function(){\n        temp = this.props.element.Options;\n        temp.Values = {};\n        this.props.updateState({Options: temp});\n    },\n    // Render the HTML\n    render: function () {\n        var multi = '',\n            options = this.props.element.Options.Values;\n        // Set the select option type\n        if(this.props.element.Options.AllowMultiple){\n            multi = \"multiple\";\n        }\n        return (\n            <div>\n                <BasicOptions updateState={this.props.updateState} element={this.props.element} />\n                <div className=\"form-group\">\n                    <label className=\"col-sm-2 control-label\">Dropdown Option: </label>\n                    <div className=\"col-sm-3\">\n                        <input className=\"form-control\" type=\"text\" id=\"newSelectOption\" onChange={this.onChange} />\n                    </div>\n                    <input className=\"btn btn-default\" type=\"button\" value=\"Add option\" onClick={this.addOption.bind(this, false)} />\n                    <input className=\"btn btn-default\" type=\"button\" value=\"Reset\" onClick={this.resetOptions} />\n                </div>\n                <div className=\"form-group\">\n                    <label className=\"col-sm-2 control-label\">Preview: </label>\n                    <div className=\"col-sm-2\">\n                        <select multiple={multi} id=\"selectOptions\" className=\"form-control\">\n                            {Object.keys(options).map(function(option){\n                                return (\n                                    <option>\n                                        {options[option]}\n                                    </option>\n                                )\n                            })}\n                        </select>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n});\n\n/*\n *\tThis is the React class for the date options\n */\nDateOptions = React.createClass({\n    // Keep track of the inputed years\n    onChange: function(e){\n        var options = this.props.element.Options;\n        if(e.target.id === 'datemin' && e.target.value.length > 0){\n            options.MinDate = e.target.value + \"-01-01\";\n        } else if (e.target.id === 'datemax' && e.target.value.length > 0){\n            options.MaxDate = e.target.value + \"-12-31\";\n        }\n        this.props.updateState({Options: options});\n    },\n    // Render the HTML\n    render: function () {\n        // Truncate off the month and day from the date to only have the\n        // year.\n        var minYear = this.props.element.Options.MinDate.split('-')[0],\n            maxYear = this.props.element.Options.MaxDate.split('-')[0];\n\n        var errorClass = 'options form-group',\n            errorMessage = '';\n\n        if (this.props.element.error && this.props.element.error.dateOption) {\n            // If an error is present, display the error\n            errorMessage = (<font className=\"form-error\">{this.props.element.error.dateOption}</font>);\n            errorClass += \" has-error\";\n        }\n\n        return (\n            <div>\n                <BasicOptions updateState={this.props.updateState} element={this.props.element} />\n                <div id=\"dateoptions\" className={errorClass}>\n                    <label className=\"col-sm-2 control-label\">Start year: </label>\n                    <div className=\"col-sm-2\">\n                        <input className=\"form-control\" type=\"number\" id=\"datemin\" min=\"1900\" max=\"2100\" value={minYear} onChange={this.onChange} />\n                        {errorMessage}\n                    </div>\n                    <label className=\"col-sm-2 control-label\">End year: </label>\n                    <div className=\"col-sm-2\">\n                        <input className=\"form-control\" type=\"number\" id=\"datemax\" min=\"1900\" max=\"2100\" onChange={this.onChange} value={maxYear} />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n});\n\n/*\n *\tThis is the React class for the numeric options\n */\nNumericOptions = React.createClass({\n    // Keep track of the inputed numbers, casting them to\n    // interger values.\n    onChange: function(e){\n        var options = this.props.element.Options;\n                \n        if (e.target.id === 'numericmin') {\n            options.MinValue = parseInt(e.target.value);\n        } else if (e.target.id === 'numericmax') {\n            options.MaxValue = parseInt(e.target.value);\n        }\n        this.props.updateState({Options: options});\n    },\n    // Render the HTML\n    render: function () {\n        var errorMessage = '';\n        var optionsClass = 'options form-group';\n       \n        // If an error is present, display the error\n        if (this.props.element.error && this.props.element.error.numeric) {            \n            errorMessage = (<font className=\"form-error\">{this.props.element.error.numeric}</font>);\n            optionsClass += \"options form-group has-error\";                                \n        }\n        return (            \n            <div>\n                <BasicOptions updateState={this.props.updateState} element={this.props.element} />\n                <div id=\"numericoptions\" className={optionsClass}>\n                    <label className=\"col-sm-2 control-label\">Min: </label>\n                    <div className=\"col-sm-2\">\n                        <input className=\"form-control\" type=\"number\" id=\"numericmin\" onChange={this.onChange} value={this.props.element.Options.MinValue} />\n                    </div>\n                    <label className=\"col-sm-2 control-label\">Max: </label>\n                    <div className=\"col-sm-2\">\n                        <input className=\"form-control\" type=\"number\" id=\"numericmax\" onChange={this.onChange} value={this.props.element.Options.MaxValue} />                        \n                    </div>\n                    <div className=\"col-sm-offset-2 col-sm-10\">\n                        {errorMessage}\n                    </div>                                      \n                </div>                \n            </div>\n        )\n    }\n});\n\n/*\n *\tThis is the React class for the dropdown for the\n * \tdifferent question types.\n */\nListElements = React.createClass({\n    // Set the desired question type\n    selectType: function (newId, newValue) {\n        var newState = {\n                selected: {\n                    id: newId,\n                    value: newValue\n                }\n            },\n            multi = false,\n            textSize = 'small';\n        // Set the options for the desired type\n        switch(newId){\n            case 'textarea':\n                textSize = 'large';\n            case 'textbox':\n                newState.Options = {\n                    Type: textSize\n                };\n                break;\n            case 'multiselect':\n                multi = true;\n            case 'dropdown':\n                newState.Options = {\n                    Values: {},\n                    AllowMultiple: multi\n                };\n                break;\n            case 'date':\n                newState.Options = {\n                    MinDate: '',\n                    MaxDate: ''\n                };\n                break;\n            case 'numeric':\n                newState.Options = {\n                    MinValue: 0,\n                    MaxValue: 0\n                };\n                break;\n        };\n        this.props.updateState(newState);\n    },\n    // Render the HTML\n    render: function () {\n        return (\n            <div className=\"form-group\">\n                <label for=\"selected-input\" className=\"col-sm-2 control-label\">Question Type:</label>\n                <div className=\"col-sm-4\">\n                    <div className=\"btn-group\">\n                        <button id=\"selected-input\" type=\"button\" className=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">\n                            <span id=\"search_concept\">{this.props.value} </span>\n                            <span className=\"caret\"></span>\n                        </button>\n                        <ul className=\"dropdown-menu\" role=\"menu\">\n                            <li>\n                                <div className=\"col-sm-12\"><h5 className=\"\">Information</h5></div>\n                            </li>\n                            <li onClick={this.selectType.bind(this, \"header\", \"Header\")}>\n                                <a id=\"header\" className=\"option\" title=\"Centered, header information\">Header</a>\n                            </li>\n                            <li onClick={this.selectType.bind(this, \"label\", \"Label\")}>\n                                <a id=\"label\" className=\"option\" title=\"Unemphasized display text\">Label</a>\n                            </li>\n                            <li onClick={this.selectType.bind(this, \"score\", \"Scored Field\")}>\n                                <a id=\"scored\" className=\"option\" title=\"Column which stores calculated data\">Scored Field</a>\n                            </li>\n                            <li className=\"divider\"></li>\n                            <li>\n                                <div className=\"col-sm-12\"><h5 className=\"\">Data entry</h5></div>\n                            </li>\n                            <li onClick={this.selectType.bind(this, \"textbox\", \"Textbox\")}>\n                                <a id=\"textbox\" className=\"option\" title=\"Text box for user data entry\">Textbox</a>\n                            </li>\n                            <li onClick={this.selectType.bind(this, \"textarea\", \"Textarea\")}>\n                                <a id=\"textarea\" className=\"option\" title=\"Larger text area for data entry\">Textarea</a>\n                            </li>\n                            <li onClick={this.selectType.bind(this, \"dropdown\", \"Dropdown\")}>\n                                <a id=\"dropdown\" className=\"option\" title=\"Dropdown menu for users to select data from\">Dropdown</a>\n                            </li>\n                            <li onClick={this.selectType.bind(this, \"multiselect\", \"Multiselect\")}>\n                                <a id=\"multiselect\" className=\"option\" title=\"Data entry where multiple options may be selected\">Multiselect</a>\n                            </li>\n                            <li onClick={this.selectType.bind(this, \"date\", \"Date\")}>\n                                <a id=\"date\" className=\"option\" title=\"User data entry of a date\">Date</a>\n                            </li>\n                            <li onClick={this.selectType.bind(this, \"numeric\", \"Numeric\")}>\n                                <a id=\"numeric\" className=\"option\" title=\"User data entry of a number\">Numeric</a>\n                            </li>\n                            <li className=\"divider\"></li>\n                            <li>\n                                <div className=\"col-sm-12\"><h5 className=\"\">Formatting</h5></div>\n                            </li>\n                            <li onClick={this.selectType.bind(this, \"line\", \"Blank Line\")}>\n                                <a id=\"line\" className=\"option\" title=\"Empty line\">Blank Line</a>\n                            </li>\n                            <li onClick={this.selectType.bind(this, \"page-break\", \"Page Break\")}>\n                                <a id=\"page-break\" className=\"option\" title=\"Start a new page\">Page Break</a>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n});\n\n/*\n *\tThis is the React class for adding a new element or\n * \tediting an exsiting one\n */\nAddElement = React.createClass({\n    // Keep track of the current element state\n    getInitialState: function() {\n        var state;\n        if(this.props.element){\n            // Editing an element, set to elements state\n            state = {\n                Options: this.props.element.Options,\n                 Description: this.props.element.Description,\n                 Name: this.props.element.Name,\n                 selected: this.props.element.selected\n            }\n        } else {\n            state = {\n                Options: {},\n                 Description: '',\n                 Name: '',\n                 selected: {\n                     id: '',\n                     value: 'Select One'\n                 }\n            }\n        }\n         return state;\n    },\n    // Update element state\n    updateState: function(newState) {\n        this.setState(newState);\n    },\n    // Add a question to the buildPane\n    addQuestion: function () {\n        \n        var selected = this.state.selected.id,\n            questionText = this.state.Description,\n            questionName = this.state.Name,\n            hasError = false,\n            element;\n\n        if(!selected) {\n            // Error, no element selected, alert the user and return\n            alert(\"No element type selected\");\n            return;\n        }\n\n        if (selected == 'date') {\n            var min = this.state.Options.MinDate,\n                max = this.state.Options.MaxDate;\n\n            var minDate = Date.parse(min),\n                maxDate = Date.parse(max);\n\n            if ( (isNaN(minDate) && min != '') || (isNaN(maxDate) && max != '') ) {\n                var temp = (this.state.error) ? this.state.error : {};\n                \n                temp.dateOption = \"Invalid date provided\";\n                this.setState({\n                    error: temp\n                });\n                hasError = true;\n                \n            }\n\n            if (minDate > maxDate && min != '' && max != '') {\n                var temp = (this.state.error) ? this.state.error : {}; \n\n                temp.dateOption = \"End year append befor start year\";\n                this.setState({\n                    error: temp\n                }); \n                hasError = true;\n            }\n            \n            if (!hasError && this.state.error) {\n                    var temp = this.state.error;\n                    delete temp.dateOption;\n                    this.setState({\n                        error: temp\n                    });\n            }\n        }\n                \n        // Checking for error on numeric field                 \n        if (selected == 'numeric') {\n            var min = this.state.Options.MinValue;\n            var max = this.state.Options.MaxValue;\n                \n            if (min >= max) {                \n                var temp = (this.state.error) ? this.state.error : {}; \n                temp.numeric = \"Max value must be larger than min value\";\n                this.setState({\n                    error: temp\n                }); \n                hasError = true;\n            }\n            \n            // If error corrected, remove error message and error \n            if (!hasError && this.state.error) {\n                var temp = this.state.error;\n                delete temp.numeric;\n                this.setState({\n                    error: temp\n                });\n            }                    \t\n        }\n\n        if (questionText == '' && selected != 'line') {\n            // Error, question text is required. Set the element error flag\n            // for the questionText with message. Set the hasError flag\n            var temp = (this.state.error) ? this.state.error : {};\n            if(selected == 'page-break') {\n                temp.questionText = \"Must use question text as page header\";\n            } else {\n                temp.questionText = \"No question text specified\";\n            }\n            this.setState({\n                error: temp\n            });\n            hasError = true;\n        }\n        if (!hasError && this.state.error) {\n            // No error, remove the elememt's questionText error flag\n            // if set\n            var temp = this.state.error;\n            delete temp.questionText;\n            this.setState({\n                error: temp\n            });\n        }\n        if (questionName == '' && selected != \"header\" && selected != \"label\" && selected != 'line' && selected != 'page-break') {\n            // Error, question name is needed for the desired type. Set the element error flag\n            // for the questionName with message. Set the hasError flag\n            var temp = (this.state.error) ? this.state.error : {};\n            temp.questionName = \"Must specifiy name for database to save value into\";\n            this.setState({\n                error: temp\n            });\n            hasError = true;\n        } else if (this.state.error) {\n            // No error, remove the elememt's questionName error flag\n            // if set\n            var temp = this.state.error;\n            delete temp.questionName;\n            this.setState({\n                error: temp\n            });\n        }\n        if (hasError) {\n            // An error is present, return\n            return;\n        }\n        // Setup the desired element to be added\n        switch(selected){\n            case 'header':\n            case 'label':\n                questionName = '';\n                break;\n            case 'textbox':\n            case 'textarea':\n                selected = 'text';\n                break;\n            case 'dropdown':\n             case 'multiselect':\n                 selected = 'select';\n                 break;\n             case 'page-break':\n                 // If page-break, add new page to the buildPane\n                 // element list\n                 this.props.addPage(questionText);\n                 return;\n        }\n        // Remove all error flags\n        delete this.state.error;\n        var element = {\n            Type: selected,\n            Description: questionText,\n            Name: questionName,\n            Options: this.state.Options,\n            selected: this.state.selected\n        };\n\n        // Add/Update the Page's element array. The updateQuestion returns true\n        // if element was added/updated, false if the element name already exists.\n        if (typeof this.props.index !== 'undefined') {\n            // If editing, supply updateQuestion with the elements index in the\n            // Page's element array.\n            hasError = !this.props.updateQuestions(element, this.props.index);\n        } else {\n            hasError = !this.props.updateQuestions(element);\n        }\n        if (hasError) {\n            // Error, element name already exists. Set the element error flag\n            // for the questionName with message.\n            this.setState(function (state) {\n                var temp = (state.error) ? state.error : {};\n                temp.questionName = \"Duplicate question name\";\n                return {\n                    error: temp\n                };\n            });\n        }\n    },\n    // Add an option to the options array\n    addOption: function (multi) {\n        // Use a function to update the state to enqueue an atomic\n        // update that consults the previous value of state before\n        // setting any values\n        this.setState(function(state){\n            var temp = state.options,\n                option = multi ? $(\"#newmultiSelectOption\").val() : $(\"#newSelectOption\").val();\n            temp.push(option);\n            return {\n                options: temp\n            };\n        });\n    },\n    // Reset the options array\n    resetOptions: function(){\n        this.setState({\n            options: []\n        });\n    },\n    // Render the HTML\n    render: function () {\n        var questionInput,\n            multi = false,\n            options,\n            header = '',\n            buttons;\n        // Set the inputs to display based on the desired element type\n        switch (this.state.selected.id) {\n            case 'header':\n            case 'label':\n            case 'page-break':\n                questionInput = <QuestionText updateState={this.updateState} element={this.state}/>\n                break;\n            case 'score':\n            case 'textbox':\n            case 'textarea':\n                questionInput = <BasicOptions updateState={this.updateState} element={this.state}/>\n                break;\n            case 'multiselect':\n            case 'dropdown':\n                questionInput = <DropdownOptions updateState={this.updateState} element={this.state}/>\n                break;\n            case 'date':\n                questionInput = <DateOptions updateState={this.updateState} element={this.state}/>\n                break;\n            case 'numeric':\n                questionInput = <NumericOptions updateState={this.updateState} element={this.state}/>\n                break;\n            case 'defualt':\n                break;\n        }\n        // Set the button/header based on whether you are editing or adding an element.\n        if (this.props.element){\n            buttons = (\n                <input className=\"btn btn-default\" type=\"button\" value=\"Edit Row\" onClick={this.addQuestion} />\n            )\n        } else {\n            header = (\n                <h2>Add Question</h2>\n            );\n            buttons = (\n                <input className=\"btn btn-default\" type=\"button\" value=\"Add Row\" onClick={this.addQuestion} />\n            )\n        }\n        return (\n            <div className=\"col-xs-12\">\n                {header}\n                <div className=\"form-horizontal\" role=\"form\">\n                    <ListElements updateState={this.updateState} value={this.state.selected.value}/>\n                    {questionInput}\n                    <div className=\"form-group\">\n                        <div className=\"col-sm-offset-2 col-sm-10\">\n                            {buttons}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n});\n"]}
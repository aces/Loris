!function(t){function e(a){if(n[a])return n[a].exports;var s=n[a]={exports:{},id:a,loaded:!1};return t[a].call(s.exports,s,s.exports,e),s.loaded=!0,s.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}({0:function(t,e,n){n(1)(n(31))},1:function(t,e){t.exports=function(t){"undefined"!=typeof execScript?execScript(t):eval.call(null,t)}},31:function(t,e){t.exports="/**\n *\tThis file contains the React classes for instrument builder\n * \tmodule.\n */\n\n/**\n *\tThis is the React class for loading in a previously\n *\tmade instrument.\n */\nvar LoadPane = React.createClass({\n\tdisplayName: 'LoadPane',\n\n\tgetInitialState: function getInitialState() {\n\t\treturn {\n\t\t\t// This is used to alert the user if the file was\n\t\t\t// loaded successfully or there was an error with\n\t\t\t// the loading.\n\t\t\talert: ''\n\t\t};\n\t},\n\t// Indicates to the state which file has been choosen\n\tchooseFile: function chooseFile(e) {\n\t\tvar value = e.target.files[0];\n\t\tthis.setState({\n\t\t\tfile: value,\n\t\t\talert: ''\n\t\t});\n\t},\n\t// Sets the alert to the specified type.\n\tsetAlert: function setAlert(type) {\n\t\tthis.setState({\n\t\t\talert: type\n\t\t});\n\t},\n\t// Reset the alert to empty.\n\tresetAlert: function resetAlert() {\n\t\tthis.setState({\n\t\t\talert: ''\n\t\t});\n\t},\n\t// Loads the specified file into builder tab.\n\tloadFile: function loadFile() {\n\t\t// Declare the success and error callbacks\n\t\tvar callback = {\n\t\t\tsuccess: this.props.loadCallback,\n\t\t\terror: this.setAlert\n\t\t};\n\t\tInstrument.load(this.state.file, callback);\n\t},\n\t// Render the HTML\n\trender: function render() {\n\t\tvar alert = '';\n\t\t// Set up declared alerts, if there is any.\n\t\tswitch (this.state.alert) {\n\t\t\tcase 'success':\n\t\t\t\talert = React.createElement(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ className: 'alert alert-success alert-dismissible', role: 'alert' },\n\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t'button',\n\t\t\t\t\t\t{ type: 'button', className: 'close', onClick: this.resetAlert },\n\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t'span',\n\t\t\t\t\t\t\t{ 'aria-hidden': 'true' },\n\t\t\t\t\t\t\t'\\xD7'\n\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t'strong',\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\t'Success!'\n\t\t\t\t\t),\n\t\t\t\t\t' Instrument Loaded'\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase 'typeError':\n\t\t\t\talert = React.createElement(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ className: 'alert alert-danger alert-dismissible', role: 'alert' },\n\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t'button',\n\t\t\t\t\t\t{ type: 'button', className: 'close', onClick: this.resetAlert },\n\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t'span',\n\t\t\t\t\t\t\t{ 'aria-hidden': 'true' },\n\t\t\t\t\t\t\t'\\xD7'\n\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t'strong',\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\t'Error!'\n\t\t\t\t\t),\n\t\t\t\t\t' Wrong file format'\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t}\n\t\treturn React.createElement(\n\t\t\tTabPane,\n\t\t\tthis.props,\n\t\t\tReact.createElement(\n\t\t\t\t'div',\n\t\t\t\t{ className: 'col-sm-6 col-xs-12' },\n\t\t\t\talert,\n\t\t\t\tReact.createElement('input', { className: 'fileUpload',\n\t\t\t\t\ttype: 'file', id: 'instfile',\n\t\t\t\t\tonChange: this.chooseFile\n\t\t\t\t}),\n\t\t\t\tReact.createElement('input', { className: 'btn btn-primary spacingTop',\n\t\t\t\t\ttype: 'button', id: 'load',\n\t\t\t\t\tvalue: 'Load Instrument',\n\t\t\t\t\tonClick: this.loadFile\n\t\t\t\t})\n\t\t\t)\n\t\t);\n\t}\n});\n\n/**\n *\tThis is the React class for saving the instrument\n */\nvar SavePane = React.createClass({\n\tdisplayName: 'SavePane',\n\n\tgetInitialState: function getInitialState() {\n\t\treturn {\n\t\t\tfileName: '',\n\t\t\tinstrumentName: ''\n\t\t};\n\t},\n\t// Used to set the state when a file is loaded\n\t// using the load tab.\n\tloadState: function loadState(newState) {\n\t\tthis.setState({\n\t\t\tfileName: newState.fileName,\n\t\t\tinstrumentName: newState.instrumentName\n\t\t});\n\t},\n\t// Keep track of the file name, saving it in the state\n\tonChangeFile: function onChangeFile(e) {\n\t\tvar value = e.target.value;\n\t\tthis.setState({\n\t\t\tfileName: value\n\t\t});\n\t},\n\t// Keep track of the instrument name, saving it in the state\n\tonChangeInst: function onChangeInst(e) {\n\t\tvar value = e.target.value;\n\t\tthis.setState({\n\t\t\tinstrumentName: value\n\t\t});\n\t},\n\t// Render the HTML\n\trender: function render() {\n\t\tvar value = this.state.fileName;\n\t\treturn React.createElement(\n\t\t\tTabPane,\n\t\t\tthis.props,\n\t\t\tReact.createElement(\n\t\t\t\t'div',\n\t\t\t\t{ className: 'form-group' },\n\t\t\t\tReact.createElement(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ className: 'col-xs-12' },\n\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t'label',\n\t\t\t\t\t\t{ className: 'col-sm-2 control-label' },\n\t\t\t\t\t\t'Filename: '\n\t\t\t\t\t),\n\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t'div',\n\t\t\t\t\t\t{ className: 'col-sm-4' },\n\t\t\t\t\t\tReact.createElement('input', { className: 'form-control',\n\t\t\t\t\t\t\ttype: 'text', id: 'filename',\n\t\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\t\tonChange: this.onChangeFile\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\tReact.createElement(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ className: 'col-xs-12 spacingTop' },\n\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t'label',\n\t\t\t\t\t\t{ className: 'col-sm-2 control-label' },\n\t\t\t\t\t\t'Instrument Name: '\n\t\t\t\t\t),\n\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t'div',\n\t\t\t\t\t\t{ className: 'col-sm-4' },\n\t\t\t\t\t\tReact.createElement('input', { className: 'form-control',\n\t\t\t\t\t\t\ttype: 'text', id: 'longname',\n\t\t\t\t\t\t\tvalue: this.state.instrumentName,\n\t\t\t\t\t\t\tonChange: this.onChangeInst\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\tReact.createElement(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ className: 'col-xs-12 spacingTop' },\n\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t'div',\n\t\t\t\t\t\t{ className: 'col-xs-12 col-sm-4 col-sm-offset-2' },\n\t\t\t\t\t\tReact.createElement('input', { className: 'btn btn-primary col-xs-12',\n\t\t\t\t\t\t\ttype: 'submit', value: 'Save',\n\t\t\t\t\t\t\tonClick: this.props.save\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t);\n\t}\n});\n\n/**\n *  This is the React class displaying the questions\n *  in the table.\n */\nvar DisplayElements = React.createClass({\n\tdisplayName: 'DisplayElements',\n\n\t// Used for the drag and drop rows\n\tgetPlaceholder: function getPlaceholder() {\n\t\tif (!this.placeholder) {\n\t\t\tvar tr = document.createElement('tr');\n\t\t\ttr.className = \"placeholder\";\n\t\t\tvar td = document.createElement('td');\n\t\t\ttd.colSpan = 2;\n\t\t\ttd.appendChild(document.createTextNode(\"Drop here\"));\n\t\t\ttr.appendChild(td);\n\t\t\tthis.placeholder = tr;\n\t\t}\n\t\treturn this.placeholder;\n\t},\n\t// Used for the drag and drop rows\n\tgetTableRow: function getTableRow(element) {\n\t\tif (element.tagName !== 'tr') {\n\t\t\treturn $(element).closest('tr')[0];\n\t\t} else {\n\t\t\treturn element;\n\t\t}\n\t},\n\t// Used for the drag and drop rows\n\tdragStart: function dragStart(e) {\n\t\tthis.dragged = this.getTableRow(e.currentTarget);\n\t\te.dataTransfer.effectAllowed = 'move';\n\t\t// Firefox requires dataTransfer data to be set\n\t\te.dataTransfer.setData(\"text/html\", e.currentTarget);\n\t},\n\t// Used for the drag and drop rows\n\tdragEnd: function dragEnd(e) {\n\t\tthis.dragged.style.display = \"table-row\";\n\t\tthis.dragged.parentNode.removeChild(this.getPlaceholder());\n\n\t\t// Update data\n\t\tvar data = this.props.elements;\n\t\tvar from = Number(this.dragged.dataset.id);\n\t\tvar to = Number(this.over.dataset.id);\n\t\tif (from < to) to--;\n\t\tif (this.nodePlacement == \"after\") to++;\n\t\tdata.splice(to, 0, data.splice(from, 1)[0]);\n\t\tthis.setState({\n\t\t\tdata: data\n\t\t});\n\t},\n\t// Used for the drag and drop rows\n\tdragOver: function dragOver(e) {\n\t\te.preventDefault();\n\t\tvar targetRow = this.getTableRow(e.target);\n\n\t\tthis.dragged.style.display = \"none\";\n\t\tif (targetRow.className == \"placeholder\") return;\n\t\tthis.over = targetRow;\n\t\t// Inside the dragOver method\n\t\tvar relY = e.pageY - $(this.over).offset().top;\n\t\tvar height = this.over.offsetHeight / 2;\n\t\tvar parent = targetRow.parentNode;\n\n\t\tif (relY >= height) {\n\t\t\tthis.nodePlacement = \"after\";\n\t\t\tparent.insertBefore(this.getPlaceholder(), targetRow.nextElementSibling);\n\t\t} else {\n\t\t\t// relY < height\n\t\t\tthis.nodePlacement = \"before\";\n\t\t\tparent.insertBefore(this.getPlaceholder(), targetRow);\n\t\t}\n\t},\n\t// Render the HTML\n\trender: function render() {\n\t\tvar temp = this.props.elements.map(function (element, i) {\n\t\t\tvar row;\n\t\t\tvar colStyles = { 'wordWrap': 'break-word' };\n\t\t\tif (element.editing) {\n\t\t\t\t// If you are editing an element, show element as an AddElement object\n\t\t\t\trow = React.createElement(\n\t\t\t\t\t'tr',\n\t\t\t\t\t{ 'data-id': i,\n\t\t\t\t\t\tkey: i,\n\t\t\t\t\t\tdraggable: this.props.draggable,\n\t\t\t\t\t\tonDragEnd: this.dragEnd,\n\t\t\t\t\t\tonDragStart: this.dragStart },\n\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t'td',\n\t\t\t\t\t\t{ className: 'col-xs-2', colSpan: '3' },\n\t\t\t\t\t\tReact.createElement(AddElement, { updateQuestions: this.props.updateElement,\n\t\t\t\t\t\t\telement: element, index: i })\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t// Else display element in regular way\n\t\t\t\trow = React.createElement(\n\t\t\t\t\t'tr',\n\t\t\t\t\t{ 'data-id': i,\n\t\t\t\t\t\tkey: i,\n\t\t\t\t\t\tdraggable: this.props.draggable,\n\t\t\t\t\t\tonDragEnd: this.dragEnd,\n\t\t\t\t\t\tonDragStart: this.dragStart },\n\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t'td',\n\t\t\t\t\t\t{ style: colStyles },\n\t\t\t\t\t\telement.Name\n\t\t\t\t\t),\n\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t'td',\n\t\t\t\t\t\t{ style: colStyles },\n\t\t\t\t\t\tReact.createElement(LorisElement, { element: element })\n\t\t\t\t\t),\n\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t'td',\n\t\t\t\t\t\t{ style: colStyles },\n\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t'button',\n\t\t\t\t\t\t\t{ onClick: this.props.editElement.bind(this, i), className: 'button' },\n\t\t\t\t\t\t\t'Edit'\n\t\t\t\t\t\t),\n\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t'button',\n\t\t\t\t\t\t\t{ onClick: this.props.deleteElement.bind(this, i), className: 'button' },\n\t\t\t\t\t\t\t'Delete'\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn { row: row };\n\t\t}.bind(this));\n\n\t\t// Set fixed layout to force column widths to be based on first row\n\t\tvar tableStyles = {\n\t\t\ttableLayout: 'fixed'\n\t\t};\n\n\t\treturn React.createElement(\n\t\t\t'table',\n\t\t\t{ id: 'sortable', className: 'table table-hover', style: tableStyles },\n\t\t\tReact.createElement(\n\t\t\t\t'thead',\n\t\t\t\tnull,\n\t\t\t\tReact.createElement(\n\t\t\t\t\t'tr',\n\t\t\t\t\tnull,\n\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t'th',\n\t\t\t\t\t\t{ className: 'col-xs-2' },\n\t\t\t\t\t\t'Database Name'\n\t\t\t\t\t),\n\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t'th',\n\t\t\t\t\t\t{ className: 'col-xs-6' },\n\t\t\t\t\t\t'Question Display (Front End)'\n\t\t\t\t\t),\n\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t'th',\n\t\t\t\t\t\t{ className: 'col-xs-4' },\n\t\t\t\t\t\t'Edit'\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t),\n\t\t\tReact.createElement(\n\t\t\t\t'tbody',\n\t\t\t\t{ onDragOver: this.dragOver },\n\t\t\t\ttemp\n\t\t\t)\n\t\t);\n\t}\n});\n\n/**\n *\tThis is the React class for building the instrument\n */\nvar BuildPane = React.createClass({\n\tdisplayName: 'BuildPane',\n\n\tgetInitialState: function getInitialState() {\n\t\treturn {\n\t\t\t// Keep track of the page groups\n\t\t\tElements: [{\n\t\t\t\tType: \"ElementGroup\",\n\t\t\t\tGroupType: \"Page\",\n\t\t\t\tDescription: \"Top\",\n\t\t\t\t// Keep track of the elements on the page\n\t\t\t\tElements: []\n\t\t\t}],\n\t\t\t// Keep track if elements are being edited to ensure\n\t\t\t// that drag and drop is not usable if any are being\n\t\t\t// edited\n\t\t\tamountEditing: 0,\n\t\t\t// Keep track of which page you are on\n\t\t\tcurrentPage: 0,\n\t\t\t// Keep track of elements DB names to ensure no doubles\n\t\t\t// are added\n\t\t\telementDBNames: {}\n\t\t};\n\t},\n\t// Load in a group of elements, replacing any that\n\t// were already present\n\tloadElements: function loadElements(elements) {\n\n\t\t// Populate existing DB names\n\t\tvar elContent = elements[this.state.currentPage].Elements;\n\t\tvar elNames = {};\n\t\telContent.forEach(function (el) {\n\t\t\telNames[el.Name] = \"\";\n\t\t});\n\n\t\tthis.setState({\n\t\t\tElements: elements,\n\t\t\telementDBNames: elNames\n\t\t});\n\t},\n\t// Set the element editing flag to true to render the element\n\t// as an AddQuestion object. Increase the number of editing to\n\t// disable drag and drop\n\teditElement: function editElement(elementIndex) {\n\t\t// Use a function to update the state to enqueue an atomic\n\t\t// update that consults the previous value of state before\n\t\t// setting any values\n\t\tthis.setState(function (state) {\n\t\t\tvar temp = state.Elements,\n\t\t\t    edit = state.amountEditing + 1,\n\t\t\t    dbNames = state.elementDBNames;\n\t\t\tdelete dbNames[temp[state.currentPage].Elements[elementIndex].Name];\n\t\t\ttemp[state.currentPage].Elements[elementIndex].editing = true;\n\t\t\treturn {\n\t\t\t\tElements: temp,\n\t\t\t\tamountEditing: edit,\n\t\t\t\telementDBNames: dbNames\n\t\t\t};\n\t\t});\n\t},\n\t// Remove an element from the current page's elements.\n\tdeleteElement: function deleteElement(elementIndex) {\n\t\t// Use a function to update the state to enqueue an atomic\n\t\t// update that consults the previous value of state before\n\t\t// setting any values\n\t\tthis.setState(function (state) {\n\t\t\tvar temp = state.Elements;\n\t\t\tvar dbNames = state.elementDBNames;\n\t\t\tdelete dbNames[temp[state.currentPage].Elements[elementIndex].Name];\n\t\t\ttemp[state.currentPage].Elements.splice(elementIndex, 1);\n\t\t\treturn {\n\t\t\t\tElements: temp\n\t\t\t};\n\t\t});\n\t},\n\t// Update an element. Returns true on success, false otherwise\n\tupdateElement: function updateElement(element, index) {\n\t\tif (element.Name && element.Name in this.state.elementDBNames) {\n\t\t\t// If the DB name already exists return false.\n\t\t\treturn false;\n\t\t}\n\t\t// Use a function to update the state to enqueue an atomic\n\t\t// update that consults the previous value of state before\n\t\t// setting any values\n\t\tthis.setState(function (state) {\n\t\t\tvar temp = state.Elements,\n\n\t\t\t// Decriment the editing count\n\t\t\tedit = state.amountEditing - 1,\n\t\t\t    dbNa = state.elementDBNames;\n\t\t\ttemp[state.currentPage].Elements[index] = element;\n\t\t\tif (element.Name) {\n\t\t\t\t// Add the DB name to the list of current names\n\t\t\t\tdbNa[element.Name] = '';\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tElements: temp,\n\t\t\t\tamountEditing: edit,\n\t\t\t\telementDBNames: dbNa\n\t\t\t};\n\t\t});\n\t\treturn true;\n\t},\n\t// Add a new question to the page's elements\n\taddQuestion: function addQuestion(element) {\n\n\t\tif (element.Name && element.Name in this.state.elementDBNames) {\n\t\t\t// If the DB name already exists return false.\n\t\t\treturn false;\n\t\t}\n\t\t// Use a function to update the state to enqueue an atomic\n\t\t// update that consults the previous value of state before\n\t\t// setting any values\n\t\tthis.setState(function (state) {\n\t\t\tvar temp = state.Elements,\n\t\t\t    dbNa = state.elementDBNames;\n\t\t\tif (element.Name) {\n\t\t\t\t// Add the DB name to the list of current names\n\t\t\t\tdbNa[element.Name] = '';\n\t\t\t}\n\t\t\ttemp[state.currentPage].Elements.push(element);\n\t\t\treturn {\n\t\t\t\tElements: temp,\n\t\t\t\telementDBNames: dbNa\n\t\t\t};\n\t\t});\n\t\treturn true;\n\t},\n\t// Add a new page\n\taddPage: function addPage(pageName) {\n\t\t// Use a function to update the state to enqueue an atomic\n\t\t// update that consults the previous value of state before\n\t\t// setting any values\n\t\tthis.setState(function (state) {\n\t\t\tvar temp = state.Elements,\n\n\t\t\t// change the current page to the new one\n\t\t\tpage = state.currentPage + 1;\n\t\t\ttemp.push({\n\t\t\t\tType: \"ElementGroup\",\n\t\t\t\tGroupType: \"Page\",\n\t\t\t\tDescription: pageName,\n\t\t\t\tElements: []\n\t\t\t});\n\t\t\treturn {\n\t\t\t\tElements: temp,\n\t\t\t\tcurrentPage: page\n\t\t\t};\n\t\t});\n\t},\n\t// Change to a page\n\tselectPage: function selectPage(index) {\n\t\tthis.setState({\n\t\t\tcurrentPage: index\n\t\t});\n\t},\n\t// Render the HTML\n\trender: function render() {\n\t\tvar draggable = this.state.amountEditing === 0 ? true : false,\n\t\t    that = this,\n\n\t\t// List the pages\n\t\tpages = this.state.Elements.map(function (element, i) {\n\t\t\treturn React.createElement(\n\t\t\t\t'li',\n\t\t\t\t{ onClick: that.selectPage.bind(this, i) },\n\t\t\t\tReact.createElement(\n\t\t\t\t\t'a',\n\t\t\t\t\tnull,\n\t\t\t\t\tthat.state.Elements[i].Description\n\t\t\t\t)\n\t\t\t);\n\t\t});\n\t\treturn React.createElement(\n\t\t\tTabPane,\n\t\t\tthis.props,\n\t\t\tReact.createElement(\n\t\t\t\t'div',\n\t\t\t\t{ className: 'form-group col-xs-12' },\n\t\t\t\tReact.createElement(\n\t\t\t\t\t'label',\n\t\t\t\t\t{ 'for': 'selected-input', className: 'col-xs-2 col-sm-1 control-label' },\n\t\t\t\t\t'Page:'\n\t\t\t\t),\n\t\t\t\tReact.createElement(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ className: 'col-sm-4' },\n\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t'div',\n\t\t\t\t\t\t{ className: 'btn-group' },\n\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t'button',\n\t\t\t\t\t\t\t{ id: 'selected-input', type: 'button', className: 'btn btn-default dropdown-toggle', 'data-toggle': 'dropdown' },\n\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t'span',\n\t\t\t\t\t\t\t\t{ id: 'search_concept' },\n\t\t\t\t\t\t\t\tthis.state.Elements[this.state.currentPage].Description\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tReact.createElement('span', { className: 'caret' })\n\t\t\t\t\t\t),\n\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t'ul',\n\t\t\t\t\t\t\t{ className: 'dropdown-menu', role: 'menu' },\n\t\t\t\t\t\t\tpages\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t),\n\t\t\tReact.createElement(DisplayElements, {\n\t\t\t\telements: this.state.Elements[this.state.currentPage].Elements,\n\t\t\t\teditElement: this.editElement,\n\t\t\t\tdeleteElement: this.deleteElement,\n\t\t\t\tupdateElement: this.updateElement,\n\t\t\t\tdraggable: draggable\n\t\t\t}),\n\t\t\tReact.createElement(\n\t\t\t\t'div',\n\t\t\t\t{ className: 'row' },\n\t\t\t\tReact.createElement(AddElement, { updateQuestions: this.addQuestion, addPage: this.addPage })\n\t\t\t)\n\t\t);\n\t}\n});\n\n/**\n *\tThis is the React class for the instrument builder\n */\nvar InstrumentBuilderApp = React.createClass({\n\tdisplayName: 'InstrumentBuilderApp',\n\n\t// Save the instrument\n\tsaveInstrument: function saveInstrument() {\n\t\t// Call to external function, passing it the save information and the elements\n\t\t// to save\n\t\tInstrument.save(this.refs.savePane.state, this.refs.buildPane.state.Elements);\n\t},\n\t// Load an instrument\n\tloadCallback: function loadCallback(elements, info) {\n\t\t// Set the savePane state to that extracted from the file\n\t\tthis.refs.savePane.loadState(info);\n\t\t// Set the buildPane elements to the rendered elements\n\t\tthis.refs.buildPane.loadElements(elements);\n\t\t// Set the alert state to success in the loadPane\n\t\tthis.refs.loadPane.setAlert('success');\n\t},\n\t// Render the HTML\n\trender: function render() {\n\t\tvar tabs = [];\n\t\ttabs.push(React.createElement(LoadPane, {\n\t\t\tTabId: 'Load',\n\t\t\tref: 'loadPane',\n\t\t\tloadCallback: this.loadCallback\n\t\t}));\n\t\ttabs.push(React.createElement(BuildPane, {\n\t\t\tTabId: 'Build',\n\t\t\tref: 'buildPane'\n\t\t}));\n\t\ttabs.push(React.createElement(SavePane, {\n\t\t\tTabId: 'Save',\n\t\t\tref: 'savePane',\n\t\t\tsave: this.saveInstrument\n\t\t}));\n\n\t\tvar tabList = [{\n\t\t\t\"id\": \"Load\",\n\t\t\t\"label\": \"Load\"\n\t\t}, {\n\t\t\t\"id\": \"Build\",\n\t\t\t\"label\": \"Build\"\n\t\t}, {\n\t\t\t\"id\": \"Save\",\n\t\t\t\"label\": \"Save\"\n\t\t}];\n\n\t\treturn React.createElement(\n\t\t\t'div',\n\t\t\tnull,\n\t\t\tReact.createElement(\n\t\t\t\tTabs,\n\t\t\t\t{ tabs: tabList, defaultTab: 'Build' },\n\t\t\t\ttabs\n\t\t\t)\n\t\t);\n\t}\n});\n\nRInstrumentBuilderApp = React.createFactory(InstrumentBuilderApp);"}});
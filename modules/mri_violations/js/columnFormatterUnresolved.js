(function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId]){return installedModules[moduleId].exports}var module=installedModules[moduleId]={i:moduleId,l:false,exports:{}};modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.l=true;return module.exports}__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.d=function(exports,name,getter){if(!__webpack_require__.o(exports,name)){Object.defineProperty(exports,name,{enumerable:true,get:getter})}};__webpack_require__.r=function(exports){if(typeof Symbol!=="undefined"&&Symbol.toStringTag){Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"})}Object.defineProperty(exports,"__esModule",{value:true})};__webpack_require__.t=function(value,mode){if(mode&1)value=__webpack_require__(value);if(mode&8)return value;if(mode&4&&typeof value==="object"&&value&&value.__esModule)return value;var ns=Object.create(null);__webpack_require__.r(ns);Object.defineProperty(ns,"default",{enumerable:true,value});if(mode&2&&typeof value!="string")for(var key in value)__webpack_require__.d(ns,key,function(key){return value[key]}.bind(null,key));return ns};__webpack_require__.n=function(module){var getter=module&&module.__esModule?function getDefault(){return module["default"]}:function getModuleExports(){return module};__webpack_require__.d(getter,"a",getter);return getter};__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)};__webpack_require__.p="";return __webpack_require__(__webpack_require__.s=55)})({55:function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});function formatColumn(column,cell,rowData,rowHeaders){if(loris.hiddenHeaders.indexOf(column)>-1){return null}var row={};rowHeaders.forEach(function(header,index){row[header]=rowData[index]},this);var hashName=void 0;var patientname=row.PatientName;var uid=row.SeriesUID;var url=void 0;var log=void 0;if(column==="Problem"&&row.Problem==="Protocol Violation"){return React.createElement("td",null,React.createElement("a",{href:"#",onClick:loris.loadFilteredMenuClickHandler("mri_violations/mri_protocol_check_violations",{PatientName:patientname,SeriesUID:uid})},"Protocol Violation"))}if(column==="Problem"&&row.Problem==="Could not identify scan type"){return React.createElement("td",null,React.createElement("a",{href:"#",onClick:loris.loadFilteredMenuClickHandler("mri_violations/mri_protocol_violations",{PatientName:patientname,SeriesUID:uid})},"Could not identify scan type"))}if(column==="Resolution Status"){hashName="resolvable["+row.Hash+"]";return React.createElement("td",null,React.createElement("select",{name:hashName,className:"form-control input-sm",id:"resolution-status"},React.createElement("option",{value:"unresolved"},"Unresolved"),React.createElement("option",{value:"reran"},"Reran"),React.createElement("option",{value:"emailed"},"Emailed site/pending"),React.createElement("option",{value:"inserted"},"Inserted"),React.createElement("option",{value:"rejected"},"Rejected"),React.createElement("option",{value:"inserted_flag"},"Inserted with flag"),React.createElement("option",{value:"other"},"Other")))}if(column==="MincFile"){if(row.Problem==="Could not identify scan type"){log=1}else if(row.Problem==="Protocol Violation"){log=2}else{log=3}url=loris.BaseURL+"/brainbrowser/?minc_id="+log+"l"+row.JoinID;return React.createElement("td",null,React.createElement("a",{href:url,target:"_blank"},cell))}return React.createElement("td",null,cell)}window.formatColumn=formatColumn;exports.default=formatColumn}});
//# sourceMappingURL=columnFormatterUnresolved.js.map